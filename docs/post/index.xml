<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on itning</title><link>https://blog.itning.top/post/</link><description>Recent content in Posts on itning</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Apr 2020 11:30:12 +0800</lastBuildDate><atom:link href="https://blog.itning.top/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Annotations</title><link>https://blog.itning.top/post/2020/04/24/spring-annotations/</link><pubDate>Fri, 24 Apr 2020 11:30:12 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/24/spring-annotations/</guid><description>&lt;h3 id="0前言">0.前言&lt;/h3>
&lt;p>转载自：&lt;a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide&lt;/a>。&lt;/p>
&lt;p>可以毫不夸张地说，这篇文章介绍的 Spring/SpringBoot 常用注解基本已经涵盖你工作中遇到的大部分常用的场景。对于每一个注解我都说了具体用法，掌握搞懂，使用 SpringBoot 来开发项目基本没啥大问题了！&lt;/p></description></item><item><title>通过explain查询分析SQL的执行计划</title><link>https://blog.itning.top/post/2020/04/12/%E9%80%9A%E8%BF%87explain%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90sql%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</link><pubDate>Sun, 12 Apr 2020 21:06:25 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/12/%E9%80%9A%E8%BF%87explain%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90sql%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</guid><description>&lt;p>&lt;strong>id&lt;/strong>列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行，id列为null的就表是这是一个结果集，不需要使用它来进行查询。&lt;/p></description></item><item><title>JVM系列5 执行子系统</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 10 Apr 2020 11:40:52 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid><description>&lt;blockquote>
&lt;p>字节码执行引擎&lt;/p>
&lt;/blockquote>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>执行引擎是Java虚拟机非常最核心的部分，对于物理级的执行引擎是直接建立在处理器、硬件、指令集合操作系统层面，而虚拟机执行引擎则是由自行定制的指令集与执行引擎的结构体系。执行引擎在执行Java会有解释执行(通过解释器)和编译执行(通过JIT生成的本地代码)两种选择，对于Android ART又多了一种提前编译器(AOT)。&lt;/p></description></item><item><title>JVM系列4 类的加载</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</link><pubDate>Fri, 10 Apr 2020 11:33:02 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</guid><description>&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;p>本文主要讲述虚拟机如何把 Class文件加载到内存的过程。校验、转换解析和初始化，最终形成可被虚拟机使用的Java类型，这就是虚拟机的类加载机制。类型的加载、连接和初始化都是在程序运行期间完成，这样做的优劣势，如下：&lt;/p>
&lt;ul>
&lt;li>优势：提高Java程序的灵活性，Java动态扩展的语言特性就是依赖运行期动态加载和动态连接。当面向接口的应用程序，可以等到运行时指定实现类；可以通过类加载器，让程序运行时加载一个二进制流作为程序一部分。&lt;/li>
&lt;li>劣势：增加类加载的性能开销。&lt;/li>
&lt;/ul></description></item><item><title>JVM系列3 字节码指令</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 10 Apr 2020 11:21:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义&lt;/p>
&lt;/blockquote>
&lt;h1 id="一概述">一、概述&lt;/h1>
&lt;p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。&lt;/p>
&lt;ul>
&lt;li>操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。&lt;/li>
&lt;li>操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 &lt;code>(byte1 &amp;lt;&amp;lt; 8) | byte2&lt;/code>。&lt;/li>
&lt;/ul></description></item><item><title>JVM系列2 Class文件格式</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link><pubDate>Fri, 10 Apr 2020 11:02:39 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>Java编译过程是将Java文件转换为Claaa文件，从而实现了跨平台的功能， 本文详细讲述Class文件结构。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一-概述">一、 概述&lt;/h2>
&lt;p>计算机只能识别0和1，所以大家编写的程序都需要经过编译器，转换为由0和1组成的二进制本地机器码(Native Code)。随着虚拟机的不断发展，很多程序语言开始选择与操作系统和机器指令集无关的格式作为编译后的存储格式（Class文件），从而实现”Write Once, Run Anywhere”。 Java设计之初，考虑后期能让Java虚拟机运行其他语言，目前有越来越多的其他语言都可以直接需要在Java虚拟机，虚拟机只能识别Class文件，至于是由何种语言编译而来的，虚拟机并不关心，如下图：&lt;/p></description></item><item><title>JVM系列1 运行时内存结构</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 10 Apr 2020 10:50:16 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</guid><description>&lt;blockquote>
&lt;p>java是在java虚拟机上运行，一般地大家讲到的Java运行时内存结构其实就是Jvm内存&lt;/p>
&lt;/blockquote>
&lt;h2 id="一运行时内存结构">一、运行时内存结构&lt;/h2>
&lt;p>Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，故Java运行时内存结构，也就是指Java虚拟机的运行时内存结构。&lt;/p></description></item><item><title>SpringBoot注解大全</title><link>https://blog.itning.top/post/2020/03/31/springboot%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/</link><pubDate>Tue, 31 Mar 2020 10:15:41 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/31/springboot%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/</guid><description>&lt;h2 id="一注解annotations列表">一、注解(annotations)列表&lt;/h2>
&lt;p>&lt;strong>@SpringBootApplication&lt;/strong>：&lt;/p>
&lt;p>包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。&lt;/p>
&lt;p>其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序上下文。&lt;/p></description></item><item><title>推荐4款MySQL调优工具，大神都在用</title><link>https://blog.itning.top/post/2020/03/29/%E6%8E%A8%E8%8D%904%E6%AC%BEmysql%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E5%A4%A7%E7%A5%9E%E9%83%BD%E5%9C%A8%E7%94%A8/</link><pubDate>Sun, 29 Mar 2020 13:13:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/29/%E6%8E%A8%E8%8D%904%E6%AC%BEmysql%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E5%A4%A7%E7%A5%9E%E9%83%BD%E5%9C%A8%E7%94%A8/</guid><description>&lt;p>对于正在运行的mysql性能如何？参数设置的是否合理？账号设置的是否存在安全隐患是否了然于胸？&lt;/p>
&lt;p>俗话说工欲善其事，必先利其器，定期对你的&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;amp;mid=2247490727&amp;amp;idx=1&amp;amp;sn=4d64de037c0665c57ced6abf12a003ce&amp;amp;chksm=eb539991dc241087c19bd0e70dfda3d03861d00c7536066b09f0723d23d8562551975c44e851&amp;amp;scene=21#wechat_redirect">MYSQL&lt;/a>数据库进行一个体检，是保证数据库安全运行的重要手段。&lt;/p>
&lt;p>今天和大家分享几个mysql 优化的工具，你可以使用它们对你的mysql进行一个体检，生成awr报告，让你从整体上把握你的数据库的性能情况。&lt;/p></description></item><item><title>JPA级联操作</title><link>https://blog.itning.top/post/2020/03/26/jpa%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 26 Mar 2020 12:36:32 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/26/jpa%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</guid><description>&lt;h2 id="级联操作有哪些">级联操作有哪些？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">javax.persistence&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">CascadeType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/** Cascade all operations */&lt;/span>
&lt;span class="n">ALL&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade persist operation */&lt;/span>
&lt;span class="n">PERSIST&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade merge operation */&lt;/span>
&lt;span class="n">MERGE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade remove operation */&lt;/span>
&lt;span class="n">REMOVE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade refresh operation */&lt;/span>
&lt;span class="n">REFRESH&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Cascade detach operation
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @since 2.0
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">DETACH&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>HibernateDialect设置</title><link>https://blog.itning.top/post/2020/03/26/hibernatedialect%E8%AE%BE%E7%BD%AE/</link><pubDate>Thu, 26 Mar 2020 12:15:05 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/26/hibernatedialect%E8%AE%BE%E7%BD%AE/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">spring&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>jpa&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database-platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>org.hibernate.dialect.MySQL8Dialect&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>常见限流算法 漏桶和令牌桶</title><link>https://blog.itning.top/post/2020/03/25/%E5%B8%B8%E8%A7%81%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95-%E6%BC%8F%E6%A1%B6%E5%92%8C%E4%BB%A4%E7%89%8C%E6%A1%B6/</link><pubDate>Wed, 25 Mar 2020 21:08:38 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/25/%E5%B8%B8%E8%A7%81%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95-%E6%BC%8F%E6%A1%B6%E5%92%8C%E4%BB%A4%E7%89%8C%E6%A1%B6/</guid><description>&lt;h2 id="漏桶算法">漏桶算法&lt;/h2>
&lt;p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200325210400.png" alt="漏桶算法">&lt;/p></description></item><item><title>FFmpeg使用硬件加速进行视频转码</title><link>https://blog.itning.top/post/2020/03/25/ffmpeg%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</link><pubDate>Wed, 25 Mar 2020 10:57:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/25/ffmpeg%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</guid><description>&lt;h2 id="获取视频信息">获取视频信息&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ffprobe -v error -show_streams -print_format json &amp;lt;input&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>MySQL8手动安装教程</title><link>https://blog.itning.top/post/2020/03/24/mysql8%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link><pubDate>Tue, 24 Mar 2020 19:36:03 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/24/mysql8%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid><description>&lt;h2 id="下载mysql">下载MySQL&lt;/h2>
&lt;p>&lt;a href="https://mirrors.cloud.tencent.com/mysql/downloads/MySQL-8.0/">腾讯软件源下载&lt;/a>&lt;/p>
&lt;p>搜索关键字：&lt;code>mysql-8.0.19-winx64.msi&lt;/code>，其中&lt;code>8.0.19&lt;/code>换成最新版本&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324194128.png" alt="下载页面截图">&lt;/p></description></item><item><title>音视频常见格式</title><link>https://blog.itning.top/post/2020/03/24/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/</link><pubDate>Tue, 24 Mar 2020 18:34:11 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/24/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/</guid><description>&lt;p>&lt;strong>音视频编码封装&lt;/strong>&lt;/p>
&lt;h2 id="封装格式">封装格式&lt;/h2></description></item><item><title>我的秋招面试问题集</title><link>https://blog.itning.top/post/2019/12/02/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86/</link><pubDate>Mon, 02 Dec 2019 16:33:56 +0800</pubDate><guid>https://blog.itning.top/post/2019/12/02/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86/</guid><description>&lt;h2 id="第一家">第一家&lt;/h2>
&lt;ol>
&lt;li>说说你怎么理解threadlocal的？&lt;/li>
&lt;li>ReentrantLock原理？&lt;/li>
&lt;li>[1，2，3，4，4，5] 数组找出4所在的所有下标？&lt;/li>
&lt;/ol></description></item><item><title>Synchronized</title><link>https://blog.itning.top/post/2019/09/15/synchronized/</link><pubDate>Sun, 15 Sep 2019 18:32:13 +0800</pubDate><guid>https://blog.itning.top/post/2019/09/15/synchronized/</guid><description>&lt;p>&lt;strong>偏向锁 01&lt;/strong>&lt;/p>
&lt;p>&lt;strong>轻量级锁 00&lt;/strong>&lt;/p>
&lt;p>&lt;strong>重量级锁 10&lt;/strong>&lt;/p>
&lt;p>对象在内存中的布局分为三块区域：&lt;strong>对象头，实例数据，填充数据&lt;/strong>&lt;/p></description></item><item><title>SpringBoot中如何发送邮件</title><link>https://blog.itning.top/post/2019/06/25/springboot%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link><pubDate>Tue, 25 Jun 2019 16:36:22 +0800</pubDate><guid>https://blog.itning.top/post/2019/06/25/springboot%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid><description>&lt;h2 id="邮件发送">邮件发送&lt;/h2>
&lt;h3 id="引入maven-dependency">引入maven dependency&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>javax.mail&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mail&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.4.7&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.freemarker&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>freemarker&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.3.28&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>SpringBean生命周期方法</title><link>https://blog.itning.top/post/2019/06/22/springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Jun 2019 10:29:01 +0800</pubDate><guid>https://blog.itning.top/post/2019/06/22/springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/</guid><description>&lt;p>对Spring Bean 生命周期方法的总结&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Bean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">initMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;initMethod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">destroyMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;destroyMethod&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">BeanTest&lt;/span> &lt;span class="nf">beanTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BeanTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>分布式事务解决方案</title><link>https://blog.itning.top/post/2019/05/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Sun, 12 May 2019 20:29:53 +0800</pubDate><guid>https://blog.itning.top/post/2019/05/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="两阶段提交方案xa方案">两阶段提交方案/XA方案&lt;/h2>
&lt;p>也叫做两阶段提交事务方案，这个举个例子，比如说咱们公司里经常tb是吧（就是团建），然后一般会有个tb主席（就是负责组织团建的那个人）。&lt;/p>
&lt;p>tb，team building，团建&lt;/p>
&lt;p>第一个阶段，一般tb主席会提前一周问一下团队里的每个人，说，大家伙，下周六我们去滑雪+烧烤，去吗？这个时候tb主席开始等待每个人的回答，如果所有人都说ok，那么就可以决定一起去这次tb。如果这个阶段里，任何一个人回答说，我有事不去了，那么tb主席就会取消这次活动。&lt;/p>
&lt;p>第二个阶段，那下周六大家就一起去滑雪+烧烤了&lt;/p></description></item><item><title>Java生产环境下性能监控与调优详解</title><link>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 23 Apr 2019 11:36:10 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="基于jdk命令行工具的监控">基于JDK命令行工具的监控&lt;/h2>
&lt;h3 id="x参数">X参数&lt;/h3>
&lt;p>非标准化参数 有可能会变 但变化比较小&lt;/p>
&lt;ul>
&lt;li>
&lt;p>-Xint&lt;/p>
&lt;p>解释执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xcomp&lt;/p>
&lt;p>第一次使用就编译成本地代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xmixed&lt;/p>
&lt;p>混合模式，JVM自己来决定是否编译成本地代码&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>单点登录SSO和集中式认证服务CAS和开放授权OAuth的简要解释</title><link>https://blog.itning.top/post/2019/04/08/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1cas%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83oauth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/</link><pubDate>Mon, 08 Apr 2019 14:15:42 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/08/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1cas%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83oauth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/</guid><description>&lt;h2 id="什么是sso">什么是SSO？&lt;/h2>
&lt;blockquote>
&lt;p>维基百科中对&lt;a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5">SSO&lt;/a>的解释：&lt;/p>
&lt;p>&lt;strong>单点登录&lt;/strong>（英语：Single sign-on，缩写为 SSO），又译为&lt;strong>单一签入&lt;/strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">访问控制&lt;/a>的属性。当拥有这项属性时，当用户&lt;a href="https://zh.wikipedia.org/wiki/%E7%99%BB%E5%85%A5">登录&lt;/a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以&lt;a href="https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE">轻型目录访问协议&lt;/a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，&lt;strong>单一退出&lt;/strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，单点登陆就是用户登陆过一个系统后访问其它需要认证的系统，不用用户再重复输入用户名和密码。&lt;/p>
&lt;p>单点登陆包含 单点登陆 单点登出&lt;/p>
&lt;p>可以看下单点登陆图解：&lt;/p></description></item><item><title>Redis缓存相关面试题</title><link>https://blog.itning.top/post/2019/04/01/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Mon, 01 Apr 2019 14:30:38 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/01/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;h2 id="怎么保证redis是高并发以及高可用的">怎么保证redis是高并发以及高可用的？&lt;/h2>
&lt;h3 id="redis如何通过读写分离来承载读请求qps超过10万">Redis如何通过读写分离来承载读请求QPS超过10万+？&lt;/h3>
&lt;p>一般来说 读高并发 而不是 写高并发 （读多写少）（写多读少最好用异步【消息队列】）&lt;/p>
&lt;p>所以读写分离：主从架构 主负责写 从节点负责读&lt;/p>
&lt;p>QPS太高可以直接增加从节点即可&lt;/p></description></item><item><title>分库分表原理及中间件相关面试题</title><link>https://blog.itning.top/post/2019/03/31/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Sun, 31 Mar 2019 10:12:07 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/31/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;h2 id="为什么要分库分表">为什么要分库分表？&lt;/h2>
&lt;p>数据库扛不住太大的流量，单表数据量太大，查询慢&lt;/p>
&lt;h2 id="什么是分库什么是分表">什么是分库？什么是分表？&lt;/h2>
&lt;p>所谓分库就是把一个库中的数据拆分到多个库中，避免了单库流量太大&lt;/p>
&lt;p>分表就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户id来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在200万以内。&lt;/p></description></item><item><title>分布式搜索引擎Elasticsearch面试题及一些概念</title><link>https://blog.itning.top/post/2019/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8Eelasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 25 Mar 2019 16:57:13 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8Eelasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="elasticsearch一些基本概念">Elasticsearch一些基本概念&lt;/h2>
&lt;h3 id="索引index">索引(index)&lt;/h3>
&lt;p>类似于关系数据库中的一张表&lt;/p>
&lt;p>但是和表有本质区别&lt;/p></description></item><item><title>常用消息中间件扫盲及面试题</title><link>https://blog.itning.top/post/2019/03/22/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Fri, 22 Mar 2019 19:42:50 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/22/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;p>写在前面：
这篇文章是看&lt;code>Java工程师面试突击第1季（可能是史上最好的Java面试突击课程）-中华石杉老师&lt;/code>视频的一个总结，文章中第三方图片均归原作者所有。&lt;/p>
&lt;h2 id="什么是消息队列">什么是消息队列？&lt;/h2>
&lt;blockquote>
&lt;p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，消息队列是用来收发消息的。这里边的消息并不是单纯的指字符消息，也可以是一些字节序列等等。&lt;/p></description></item><item><title>SpringCloud组件用途实现原理及POM坐标</title><link>https://blog.itning.top/post/2019/03/19/springcloud%E7%BB%84%E4%BB%B6%E7%94%A8%E9%80%94%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8Apom%E5%9D%90%E6%A0%87/</link><pubDate>Tue, 19 Mar 2019 17:57:31 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/19/springcloud%E7%BB%84%E4%BB%B6%E7%94%A8%E9%80%94%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8Apom%E5%9D%90%E6%A0%87/</guid><description>&lt;h2 id="spring-cloud是什么">Spring Cloud是什么？&lt;/h2>
&lt;blockquote>
&lt;p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态）&lt;/p>
&lt;p>&amp;mdash;&lt;a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Spring Cloud POM 例子&lt;/p></description></item><item><title>记人生中第一次参加校招</title><link>https://blog.itning.top/post/2019/03/17/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/</link><pubDate>Sun, 17 Mar 2019 18:30:42 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/17/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/</guid><description>&lt;p>6点半起床，洗漱。学校在荒无人烟的宾县，实在是偏远。无奈只能早起。
做大客车一个小时迷迷糊糊把JVM原理和计算机网络的面试题看了一遍，到地铁站。还好人不多。
坐了半个小时地铁。终于到了哈工大。&lt;/p></description></item><item><title>jsoup库api简介</title><link>https://blog.itning.top/post/2018/09/16/jsoup%E5%BA%93api%E7%AE%80%E4%BB%8B/</link><pubDate>Sun, 16 Sep 2018 19:27:01 +0800</pubDate><guid>https://blog.itning.top/post/2018/09/16/jsoup%E5%BA%93api%E7%AE%80%E4%BB%8B/</guid><description>&lt;h2 id="getelementsbytag">getElementsByTag&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByTag&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">tagName&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据标签获取元素
&lt;strong>什么是标签？&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;div&amp;gt;标签
&amp;lt;p&amp;gt;标签
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>记一次笔记本调节亮度快捷键失效的解决经历</title><link>https://blog.itning.top/post/2018/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</link><pubDate>Tue, 11 Sep 2018 18:41:24 +0800</pubDate><guid>https://blog.itning.top/post/2018/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</guid><description>&lt;p>笔记本最近升级到Win10 1803 后&lt;/p>
&lt;p>快捷键调节亮度居然失效的&lt;/p>
&lt;p>但是调节声音还能用&lt;/p>
&lt;p>想想解决吧..&lt;/p></description></item><item><title>Android控件&amp;Material-Design控件</title><link>https://blog.itning.top/post/2018/07/24/android%E6%8E%A7%E4%BB%B6material-design%E6%8E%A7%E4%BB%B6/</link><pubDate>Tue, 24 Jul 2018 12:23:08 +0800</pubDate><guid>https://blog.itning.top/post/2018/07/24/android%E6%8E%A7%E4%BB%B6material-design%E6%8E%A7%E4%BB%B6/</guid><description>&lt;h2 id="linearlayout线性布局">LinearLayout(线性布局)&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/linearlayout1.png" alt="linearlayout1">&lt;/p>
&lt;p>&lt;a href="https://developer.android.com/guide/topics/ui/layout/linear?hl=zh-cn">Google官方教程&lt;/a>&lt;/p></description></item><item><title>Hibernate注解</title><link>https://blog.itning.top/post/2018/06/19/hibernate%E6%B3%A8%E8%A7%A3/</link><pubDate>Tue, 19 Jun 2018 20:57:34 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/19/hibernate%E6%B3%A8%E8%A7%A3/</guid><description>&lt;h2 id="类级别">类级别&lt;/h2>
&lt;h3 id="entity">@Entity&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">*（可选）实体名称。
&lt;/span>&lt;span class="cm">*实体类的名称。 此名称是用来指
&lt;/span>&lt;span class="cm">*查询中的实体。 该名称不能是保留字面值
&lt;/span>&lt;span class="cm">*在Java持久性查询语言中。
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>操作系统</title><link>https://blog.itning.top/post/2018/06/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Sun, 17 Jun 2018 19:20:31 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h2 id="操作系统概述">操作系统概述&lt;/h2>
&lt;p>操作系统含义很广泛,包括运行在电脑,笔记本,手机,甚至机顶盒中&lt;/p>
&lt;p>操作系统介于硬件和应用软件程序之间&lt;/p></description></item><item><title>JAVA8中Stream接口用法</title><link>https://blog.itning.top/post/2018/06/09/java8%E4%B8%ADstream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/</link><pubDate>Sat, 09 Jun 2018 00:36:46 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/09/java8%E4%B8%ADstream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/</guid><description>&lt;p>JAVA8 中所有Stream接口&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-09-JAVA8%E4%B8%ADStream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/a.png" alt="a">&lt;/p></description></item><item><title>JAVA设计模式</title><link>https://blog.itning.top/post/2018/06/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 07 Jun 2018 09:20:29 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>在&lt;a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B">软件工程&lt;/a>中，&lt;strong>设计模式&lt;/strong>（design pattern）是对&lt;a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E8%A8%AD%E8%A8%88">软件设计&lt;/a>中普遍存在（反复出现）的各种问题，所提出的解决方案。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-07-JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/a.png" alt="a">&lt;/p></description></item><item><title>volatile工作机制</title><link>https://blog.itning.top/post/2018/05/30/volatile%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 30 May 2018 08:23:52 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/30/volatile%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>&lt;strong>volatile并非线程安全的&lt;/strong>&lt;/p></description></item><item><title>Win10操作系统安装详解</title><link>https://blog.itning.top/post/2018/05/29/win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 29 May 2018 19:19:25 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="什么是bios">什么是BIOS?&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>BIOS&lt;/strong>（&lt;strong>B&lt;/strong>asic &lt;strong>I&lt;/strong>nput/&lt;strong>O&lt;/strong>utput &lt;strong>S&lt;/strong>ystem的缩写、中文：&lt;strong>基本输入输出系统&lt;/strong>），在&lt;a href="https://zh.wikipedia.org/w/index.php?title=IBM_PC%E7%9B%B8%E5%AE%B9%E7%B3%BB%E7%B5%B1&amp;amp;action=edit&amp;amp;redlink=1">IBM PC兼容系统&lt;/a>上，是一种业界标准的&lt;a href="https://zh.wikipedia.org/wiki/%E9%9F%8C%E9%AB%94">固件&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E8%B3%87%E8%A8%8A%E7%A7%91%E6%8A%80)">接口&lt;/a>。[&lt;a href="https://zh.wikipedia.org/wiki/BIOS#cite_note-pcguidedefinition-1">1]&lt;/a>。BIOS这个字眼是在1975年第一次由&lt;a href="https://zh.wikipedia.org/wiki/CP/M">CP/M&lt;/a>操作系统中出现。BIOS是&lt;a href="https://zh.wikipedia.org/wiki/%E4%B8%AA%E4%BA%BA%E7%94%B5%E8%84%91">个人电脑&lt;/a>启动时加载的第一个软件。&lt;/p>
&lt;/blockquote>
&lt;p>这是维基百科对BIOS的介绍&lt;/p></description></item><item><title>Zookeeper 结构 命令行操作</title><link>https://blog.itning.top/post/2018/05/29/zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 29 May 2018 19:08:41 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid><description>&lt;h2 id="zookeeper-特性">Zookeeper 特性&lt;/h2>
&lt;p>1、Zookeeper：一个leader，多个follower组成的集群
2、全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的
3、分布式读写，更新请求转发，由leader实施
4、更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行
5、数据更新原子性，一次数据更新要么成功，要么失败
6、实时性，在一定时间范围内，client能读到最新数据&lt;/p></description></item><item><title>Zookeeper 基础</title><link>https://blog.itning.top/post/2018/05/29/zookeeper-%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 29 May 2018 19:07:07 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/zookeeper-%E5%9F%BA%E7%A1%80/</guid><description>&lt;blockquote>
&lt;p>Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.&lt;/p>
&lt;/blockquote>
&lt;p>Zookeeper 直译过来是 动物园管理员 说白了就是用来管理Hadoop(大象),Hive(蜜蜂) 的分布式协调服务&lt;/p>
&lt;p>Zookeeper 提供两种服务
&amp;ndash;&amp;gt;管理(存储，读取)用户程序提交的数据；
&amp;ndash;&amp;gt;为用户程序提供数据节点监听服务；&lt;/p></description></item><item><title>hadoop集群安装 7节点;HA</title><link>https://blog.itning.top/post/2018/05/27/hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85-7%E8%8A%82%E7%82%B9ha/</link><pubDate>Sun, 27 May 2018 11:57:36 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/27/hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85-7%E8%8A%82%E7%82%B9ha/</guid><description>&lt;blockquote>
&lt;p>教程使用版本:
hadoop-2.8.1.tar.gz
zookeeper-3.4.10.tar.gz
Linux: Centos 7 x64 (CentOS-7-x86_64-DVD-1708)&lt;/p>
&lt;/blockquote></description></item><item><title>NameNode管理元数据的机制</title><link>https://blog.itning.top/post/2018/05/23/namenode%E7%AE%A1%E7%90%86%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 23 May 2018 10:21:39 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/namenode%E7%AE%A1%E7%90%86%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>当NameNode收到更新元数据请求&lt;/p>
&lt;p>首先更新内存中元数据信息&lt;/p>
&lt;p>记录操作日志 edits&lt;/p>
&lt;p>定期合并(checkpoint) edits 到 fileimage&lt;/p></description></item><item><title>客户端向HDFS写数据的流程</title><link>https://blog.itning.top/post/2018/05/23/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%91hdfs%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 23 May 2018 10:03:28 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%91hdfs%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="hdfs集群分为两大角色">HDFS集群分为两大角色:&lt;/h2>
&lt;p>NameNode DataNode (Secondary NameNode)&lt;/p>
&lt;p>NameNode负责管理集群的元数据&lt;/p>
&lt;p>DataNode负责管理用户的文件数据块&lt;/p>
&lt;p>文件会按照固定的大小（blocksize）切成若干块后分布式存储在若干台datanode上&lt;/p>
&lt;p>每一个文件块可以有多个副本，并存放在不同的datanode上&lt;/p></description></item><item><title>HDFS读数据流程</title><link>https://blog.itning.top/post/2018/05/23/hdfs%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 23 May 2018 00:09:08 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/hdfs%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</guid><description>&lt;ol>
&lt;li>客户端向NameNode请求下载文件A&lt;/li>
&lt;li>NameNode从元数据中读取A文件所在位置,副本数量 返回给客户端&lt;/li>
&lt;li>客户端向最近DataNode请求下载block1 建立下载通道&lt;/li>
&lt;li>开始传输数据&lt;/li>
&lt;li>传输完成后客户端找第二个block数据所在DataNode中的位置&lt;/li>
&lt;li>最后所有块在客户端合并&lt;/li>
&lt;/ol></description></item><item><title>OOAD与UML</title><link>https://blog.itning.top/post/2018/05/16/ooad%E4%B8%8Euml/</link><pubDate>Wed, 16 May 2018 08:25:33 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/16/ooad%E4%B8%8Euml/</guid><description>&lt;h2 id="ooadobject-oriented-analysis-and-design-面向对象的分析与设计">OOAD(Object Oriented Analysis and Design) 面向对象的分析与设计&lt;/h2>
&lt;h3 id="ooa-分析阶段">OOA 分析阶段&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>建立针对业务问题域的清晰视图&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出系统必须要完成的核心人物&lt;/p>
&lt;/li>
&lt;li>
&lt;p>针对问题域建立公共词汇表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出针对此问题域的最佳解决方案&lt;/p>
&lt;p>核心问题:What to do ? 要做什么?&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>人生苦短,何妨一试</title><link>https://blog.itning.top/post/2018/05/13/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E4%BD%95%E5%A6%A8%E4%B8%80%E8%AF%95/</link><pubDate>Sun, 13 May 2018 19:34:43 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/13/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E4%BD%95%E5%A6%A8%E4%B8%80%E8%AF%95/</guid><description>&lt;p>当你认真谈过一次感情 最后分手了 后来你却很难再喜欢上别人 你不想再花心思去了解去用心 就好比你在喝一杯水还剩三分之一的时候有只小蚂蚁不小心爬进了杯子里把水弄脏了 让你从新倒一杯再喝 但你却因为肚子撑喝不下去了 就像爱情还差要一个结尾但却让你从新来过 那时的你已经没有精力了&lt;/p></description></item><item><title>设内存按字节编址，若8K×8bit存储空间的起始地址为7000H，则该存储空间的最大地址编号为</title><link>https://blog.itning.top/post/2018/05/13/%E8%AE%BE%E5%86%85%E5%AD%98%E6%8C%89%E5%AD%97%E8%8A%82%E7%BC%96%E5%9D%80%E8%8B%A58k8bit%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E4%B8%BA7000h%E5%88%99%E8%AF%A5%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9C%B0%E5%9D%80%E7%BC%96%E5%8F%B7%E4%B8%BA/</link><pubDate>Sun, 13 May 2018 11:33:41 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/13/%E8%AE%BE%E5%86%85%E5%AD%98%E6%8C%89%E5%AD%97%E8%8A%82%E7%BC%96%E5%9D%80%E8%8B%A58k8bit%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E4%B8%BA7000h%E5%88%99%E8%AF%A5%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9C%B0%E5%9D%80%E7%BC%96%E5%8F%B7%E4%B8%BA/</guid><description>&lt;blockquote>
&lt;p>设内存按字节编址，若8K×8bit存储空间的起始地址为7000H，则该存储空间的最大地址编号为（7）。&lt;/p>
&lt;p>(7)A.7FFF B.8FFF C.9FFF D.AFFF&lt;/p>
&lt;/blockquote></description></item><item><title>向值栈保存数据&amp;在JSP中获取值栈的数据</title><link>https://blog.itning.top/post/2018/05/09/%E5%90%91%E5%80%BC%E6%A0%88%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%9C%A8jsp%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC%E6%A0%88%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Wed, 09 May 2018 07:53:15 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/09/%E5%90%91%E5%80%BC%E6%A0%88%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%9C%A8jsp%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC%E6%A0%88%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>&lt;h4 id="向值栈保存数据root">向值栈保存数据(root)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ValueStack vs=ActionContext.getContext().getValueStack();
push(Object obj)//底层就是 root.add(0,obj) 将数据存储到栈顶。
set(String name,Object obj);
/*底层是将数据封装到HashMap中，在将这个HashMap通过push存储。*/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>项目中session的管理方式</title><link>https://blog.itning.top/post/2018/05/06/%E9%A1%B9%E7%9B%AE%E4%B8%ADsession%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 06 May 2018 20:55:35 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/06/%E9%A1%B9%E7%9B%AE%E4%B8%ADsession%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>项目中session的管理方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">/&lt;/span>&lt;span class="n">getCurrentSession&lt;/span> &lt;span class="n">创建或者获取session&lt;/span>
&lt;span class="c1">// 线程的方式创建session
&lt;/span>&lt;span class="c1">// 一定要配置：&amp;lt;property name=&amp;#34;hibernate.current_session_context_class&amp;#34;&amp;gt;thread&amp;lt;/property&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Session&lt;/span> &lt;span class="n">session3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentSession&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 创建session，绑定到线程
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Session&lt;/span> &lt;span class="n">session4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentSession&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 从当前访问线程获取session
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">session3&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">session4&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>二叉树-已知先序或后续遍历和中序遍历求画出二叉树及后续或先序遍历</title><link>https://blog.itning.top/post/2018/05/04/%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/</link><pubDate>Fri, 04 May 2018 15:46:16 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/04/%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/</guid><description>&lt;p>二叉树有三种遍历方式:先序遍历,中序遍历,后续遍历&lt;/p>
&lt;p>&lt;strong>1.先序遍历&lt;/strong>&lt;/p>
&lt;p>(1)访问根结点；&lt;/p>
&lt;p>(2)先序遍历左子树；&lt;/p>
&lt;p>(3)先序遍历右子树。&lt;/p></description></item><item><title>K2路由器V22.6.507.43及V22.6.506.28以前版本刷breed,潘多拉不死鸟老毛桃教程</title><link>https://blog.itning.top/post/2018/05/04/k2%E8%B7%AF%E7%94%B1%E5%99%A8v22.6.507.43%E5%8F%8Av22.6.506.28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 04 May 2018 10:42:32 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/04/k2%E8%B7%AF%E7%94%B1%E5%99%A8v22.6.507.43%E5%8F%8Av22.6.506.28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/</guid><description>&lt;p>原帖地址:&lt;a href="http://bbs.zol.com.cn/techbbs/d16_74689.html">斐讯k2_V22.6.507.43降级刷入Breed Web&lt;/a> &lt;a href="http://www.right.com.cn/forum/thread-255017-1-1.html">路由器刷breed Web控制台助手v4.8版本 &lt;/a>&lt;/p>
&lt;p>在此感谢 &lt;a href="http://www.right.com.cn/forum/forum.php">恩山无线论坛&lt;/a>小伙伴们&lt;/p>
&lt;p>附件地址 : &lt;a href="https://guanghou-my.sharepoint.com/:f:/g/personal/wangning_get365_pw/EmX6aycUdRJBmZkdVMVTEMYBo587Xs02LNL8PrRYDGxUWA?e=V67HTT">K2最新固件V22.6.507.43降级刷入breed的方法&lt;/a> &lt;a href="https://guanghou-my.sharepoint.com/:f:/g/personal/wangning_get365_pw/Es3gpId4ZB1ClvQU32gQCIYBenrklWlDSfXn-tSbPt0D_A?e=rHSNNc">路由器刷breed Web控制台助手v4.8版本&lt;/a>&lt;/p>
&lt;hr></description></item><item><title>JAVA JMS Java消息服务（Java Message Service） 的实现ActiveMQ</title><link>https://blog.itning.top/post/2018/05/03/java-jms-java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1java-message-service-%E7%9A%84%E5%AE%9E%E7%8E%B0activemq/</link><pubDate>Thu, 03 May 2018 12:06:31 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/03/java-jms-java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1java-message-service-%E7%9A%84%E5%AE%9E%E7%8E%B0activemq/</guid><description>&lt;blockquote>
&lt;p>JMS即Java消息服务（Java Message Service）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。&lt;/p>
&lt;/blockquote></description></item><item><title>单例设计模式</title><link>https://blog.itning.top/post/2018/05/02/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 02 May 2018 19:15:18 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/02/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>解决一个类在内存中只存在一个对象，想要保证对象的唯一。&lt;/p>
&lt;ol>
&lt;li>为了避免其他程序过多的建立该类对象。禁止其他程序建立该类对象。&lt;/li>
&lt;li>为了其他程序可以访问该类对象，在本类中自定义一个对象。&lt;/li>
&lt;li>方便其他程序对自定义类的对象的访问，对外提供一些访问方式。&lt;/li>
&lt;/ol></description></item><item><title>学习笔记（3）-指令（Directive)</title><link>https://blog.itning.top/post/2018/05/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%8C%87%E4%BB%A4directive/</link><pubDate>Wed, 02 May 2018 18:09:14 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%8C%87%E4%BB%A4directive/</guid><description>&lt;h2 id="指令directive">指令（Directive）&lt;/h2>
&lt;blockquote>
&lt;p>AngularJS 有一套完整的、可扩展的、用来帮助 Web 应用开发的指令集
在 DOM 编译期间，和 HTML 关联着的指令会被检测到，并且被执行
在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等
简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作
HTML5 允许扩展的（自制的）属性，以 data- 开头。
AngularJS 属性以 ng- 开头，但是可以使用 data-ng- 来让网页对 HTML5 有效。&lt;/p>
&lt;/blockquote></description></item><item><title>Docker Dockerfile 创建镜像</title><link>https://blog.itning.top/post/2018/03/31/docker-dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</link><pubDate>Sat, 31 Mar 2018 18:53:17 +0800</pubDate><guid>https://blog.itning.top/post/2018/03/31/docker-dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</guid><description>&lt;blockquote>
&lt;p>从刚才的 docker commit 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p>
&lt;/blockquote></description></item><item><title>Docker 简介 安装 启动 常用命令</title><link>https://blog.itning.top/post/2018/03/30/docker-%E7%AE%80%E4%BB%8B-%E5%AE%89%E8%A3%85-%E5%90%AF%E5%8A%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 30 Mar 2018 21:04:43 +0800</pubDate><guid>https://blog.itning.top/post/2018/03/30/docker-%E7%AE%80%E4%BB%8B-%E5%AE%89%E8%A3%85-%E5%90%AF%E5%8A%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;h2 id="简介">简介&lt;/h2></description></item><item><title>Web.xml</title><link>https://blog.itning.top/post/2017/04/21/web.xml/</link><pubDate>Fri, 21 Apr 2017 13:10:59 +0800</pubDate><guid>https://blog.itning.top/post/2017/04/21/web.xml/</guid><description/></item><item><title>基于springframework中HandlerExceptionResolver接口的统一异常处理</title><link>https://blog.itning.top/post/2017/03/29/%E5%9F%BA%E4%BA%8Espringframework%E4%B8%ADhandlerexceptionresolver%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Wed, 29 Mar 2017 17:49:49 +0800</pubDate><guid>https://blog.itning.top/post/2017/03/29/%E5%9F%BA%E4%BA%8Espringframework%E4%B8%ADhandlerexceptionresolver%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>&lt;blockquote>
&lt;p>系统中异常类型有哪些？
包括预期可能发生的异常、运行时异常（RuntimeException），运行时异常不是预期会发生的。
针对预期可能发生的异常，在代码手动处理异常可以try/catch捕获，可以向上抛出。
针对运行时异常，只能通过规范代码质量、在系统测试时详细测试等排除运行时异常。&lt;/p>
&lt;/blockquote></description></item><item><title>C++ 构造函数 笔记</title><link>https://blog.itning.top/post/2016/10/06/c-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 06 Oct 2016 21:34:05 +0800</pubDate><guid>https://blog.itning.top/post/2016/10/06/c-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E7%AC%94%E8%AE%B0/</guid><description/></item></channel></rss>