<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>itning</title><link>https://blog.itning.top/</link><description>Recent content on itning</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 24 Apr 2020 11:30:12 +0800</lastBuildDate><atom:link href="https://blog.itning.top/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Annotations</title><link>https://blog.itning.top/post/2020/04/24/spring-annotations/</link><pubDate>Fri, 24 Apr 2020 11:30:12 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/24/spring-annotations/</guid><description>&lt;h3 id="0前言">0.前言&lt;/h3>
&lt;p>转载自：&lt;a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide&lt;/a>。&lt;/p>
&lt;p>可以毫不夸张地说，这篇文章介绍的 Spring/SpringBoot 常用注解基本已经涵盖你工作中遇到的大部分常用的场景。对于每一个注解我都说了具体用法，掌握搞懂，使用 SpringBoot 来开发项目基本没啥大问题了！&lt;/p>
&lt;h3 id="1-springbootapplication">1. &lt;code>@SpringBootApplication&lt;/code>&lt;/h3>
&lt;p>这里先单独拎出&lt;code>@SpringBootApplication&lt;/code> 注解说一下，虽然我们一般不会主动去使用它。&lt;/p>
&lt;p>&lt;em>Guide 哥：这个注解是 Spring Boot 项目的基石，创建 SpringBoot 项目之后会默认在主类加上。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootApplication&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SpringSecurityJwtGuideApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringSecurityJwtGuideApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们可以把 &lt;code>@SpringBootApplication&lt;/code>看作是 &lt;code>@Configuration&lt;/code>、&lt;code>@EnableAutoConfiguration&lt;/code>、&lt;code>@ComponentScan&lt;/code> 注解的集合。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.springframework.boot.autoconfigure&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Inherited&lt;/span>
&lt;span class="nd">@SpringBootConfiguration&lt;/span>
&lt;span class="nd">@EnableAutoConfiguration&lt;/span>
&lt;span class="nd">@ComponentScan&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">excludeFilters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CUSTOM&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">TypeExcludeFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="nd">@Filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FilterType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CUSTOM&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">classes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AutoConfigurationExcludeFilter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">})&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">SpringBootApplication&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kn">package&lt;/span> &lt;span class="nn">org.springframework.boot&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Target&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Retention&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Documented&lt;/span>
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">SpringBootConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据 SpringBoot 官网，这三个注解的作用分别是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>@EnableAutoConfiguration&lt;/code>：启用 SpringBoot 的自动配置机制&lt;/li>
&lt;li>&lt;code>@ComponentScan&lt;/code>： 扫描被&lt;code>@Component&lt;/code> (&lt;code>@Service&lt;/code>,&lt;code>@Controller&lt;/code>)注解的 bean，注解默认会扫描该类所在的包下所有的类。&lt;/li>
&lt;li>&lt;code>@Configuration&lt;/code>：允许在 Spring 上下文中注册额外的 bean 或导入其他配置类&lt;/li>
&lt;/ul>
&lt;h3 id="2-spring-bean-相关">2. Spring Bean 相关&lt;/h3>
&lt;h4 id="21-autowired">2.1. &lt;code>@Autowired&lt;/code>&lt;/h4>
&lt;p>自动导入对象到类中，被注入进的类同样要被 Spring 容器管理比如：Service 类注入到 Controller 类中。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Service&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/users&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">UserService&lt;/span> &lt;span class="n">userService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="22-componentrepositoryservice-controller">2.2. &lt;code>Component&lt;/code>,&lt;code>@Repository&lt;/code>,&lt;code>@Service&lt;/code>, &lt;code>@Controller&lt;/code>&lt;/h4>
&lt;p>我们一般使用 &lt;code>@Autowired&lt;/code> 注解让 Spring 容器帮我们自动装配 bean。要想把类标识成可用于 &lt;code>@Autowired&lt;/code> 注解自动装配的 bean 的类,可以采用以下注解实现：&lt;/p>
&lt;ul>
&lt;li>&lt;code>@Component&lt;/code> ：通用的注解，可标注任意类为 &lt;code>Spring&lt;/code> 组件。如果一个 Bean 不知道属于哪个层，可以使用&lt;code>@Component&lt;/code> 注解标注。&lt;/li>
&lt;li>&lt;code>@Repository&lt;/code> : 对应持久层即 Dao 层，主要用于数据库相关操作。&lt;/li>
&lt;li>&lt;code>@Service&lt;/code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。&lt;/li>
&lt;li>&lt;code>@Controller&lt;/code> : 对应 Spring MVC 控制层，主要用户接受用户请求并调用 Service 层返回数据给前端页面。&lt;/li>
&lt;/ul>
&lt;h4 id="23-restcontroller">2.3. &lt;code>@RestController&lt;/code>&lt;/h4>
&lt;p>&lt;code>@RestController&lt;/code>注解是&lt;code>@Controller和&lt;/code>@&lt;code>ResponseBody&lt;/code>的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。&lt;/p>
&lt;p>&lt;em>Guide 哥：现在都是前后端分离，说实话我已经很久没有用过&lt;code>@Controller&lt;/code>。如果你的项目太老了的话，就当我没说。&lt;/em>&lt;/p>
&lt;p>单独使用 &lt;code>@Controller&lt;/code> 不加 &lt;code>@ResponseBody&lt;/code>的话一般使用在要返回一个视图的情况，这种情况属于比较传统的 Spring MVC 的应用，对应于前后端不分离的情况。&lt;code>@Controller&lt;/code> +&lt;code>@ResponseBody&lt;/code> 返回 JSON 或 XML 形式数据&lt;/p>
&lt;p>关于&lt;code>@RestController&lt;/code> 和 &lt;code>@Controller&lt;/code>的对比，请看这篇文章：&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485544&amp;amp;idx=1&amp;amp;sn=3cc95b88979e28fe3bfe539eb421c6d8&amp;amp;chksm=cea247a3f9d5ceb5e324ff4b8697adc3e828ecf71a3468445e70221cce768d1e722085359907&amp;amp;token=1725092312&amp;amp;lang=zh_CN#rd">@RestController vs @Controller&lt;/a>。&lt;/p>
&lt;h4 id="24-scope">2.4. &lt;code>@Scope&lt;/code>&lt;/h4>
&lt;p>声明 Spring Bean 的作用域，使用方法:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Bean&lt;/span>
&lt;span class="nd">@Scope&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;singleton&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Person&lt;/span> &lt;span class="nf">personSingleton&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>四种常见的 Spring Bean 的作用域：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>singleton : 唯一 bean 实例，Spring 中的 bean 默认都是单例的。&lt;/li>
&lt;li>prototype : 每次请求都会创建一个新的 bean 实例。&lt;/li>
&lt;li>request : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP request 内有效。&lt;/li>
&lt;li>session : 每一次 HTTP 请求都会产生一个新的 bean，该 bean 仅在当前 HTTP session 内有效。&lt;/li>
&lt;/ul>
&lt;h4 id="25-configuration">2.5. &lt;code>Configuration&lt;/code>&lt;/h4>
&lt;p>一般用来声明配置类，可以使用 &lt;code>@Component&lt;/code>注解替代，不过使用&lt;code>Configuration&lt;/code>注解声明配置类更加语义化。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AppConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">TransferService&lt;/span> &lt;span class="nf">transferService&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TransferServiceImpl&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-处理常见的-http-请求类型">3. 处理常见的 HTTP 请求类型&lt;/h3>
&lt;p>&lt;strong>5 种常见的请求类型:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GET&lt;/strong> ：请求从服务器获取特定资源。举个例子：&lt;code>GET /users&lt;/code>（获取所有学生）&lt;/li>
&lt;li>&lt;strong>POST&lt;/strong> ：在服务器上创建一个新的资源。举个例子：&lt;code>POST /users&lt;/code>（创建学生）&lt;/li>
&lt;li>&lt;strong>PUT&lt;/strong> ：更新服务器上的资源（客户端提供更新后的整个资源）。举个例子：&lt;code>PUT /users/12&lt;/code>（更新编号为 12 的学生）&lt;/li>
&lt;li>&lt;strong>DELETE&lt;/strong> ：从服务器删除特定的资源。举个例子：&lt;code>DELETE /users/12&lt;/code>（删除编号为 12 的学生）&lt;/li>
&lt;li>&lt;strong>PATCH&lt;/strong> ：更新服务器上的资源（客户端提供更改的属性，可以看做作是部分更新），使用的比较少，这里就不举例子了。&lt;/li>
&lt;/ul>
&lt;h4 id="31-get-请求">3.1. GET 请求&lt;/h4>
&lt;p>&lt;code>@GetMapping(&amp;quot;users&amp;quot;)&lt;/code> 等价于&lt;code>@RequestMapping(value=&amp;quot;/users&amp;quot;,method=RequestMethod.GET)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/users&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="nf">getAllUsers&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">userRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">findAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="32-post-请求">3.2. POST 请求&lt;/h4>
&lt;p>&lt;code>@PostMapping(&amp;quot;users&amp;quot;)&lt;/code> 等价于&lt;code>@RequestMapping(value=&amp;quot;/users&amp;quot;,method=RequestMethod.POST)&lt;/code>&lt;/p>
&lt;p>关于&lt;code>@RequestBody&lt;/code>注解的使用，在下面的“前后端传值”这块会讲到。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/users&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">createUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Valid&lt;/span> &lt;span class="nd">@RequestBody&lt;/span> &lt;span class="n">UserCreateRequest&lt;/span> &lt;span class="n">userCreateRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">userRespository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="33-put-请求">3.3. PUT 请求&lt;/h4>
&lt;p>&lt;code>@PutMapping(&amp;quot;/users/{userId}&amp;quot;)&lt;/code> 等价于&lt;code>@RequestMapping(value=&amp;quot;/users/{userId}&amp;quot;,method=RequestMethod.PUT)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@PutMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/users/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">updateUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nd">@Valid&lt;/span> &lt;span class="nd">@RequestBody&lt;/span> &lt;span class="n">UserUpdateRequest&lt;/span> &lt;span class="n">userUpdateRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="34-delete-请求">3.4. &lt;strong>DELETE 请求&lt;/strong>&lt;/h4>
&lt;p>&lt;code>@DeleteMapping(&amp;quot;/users/{userId}&amp;quot;)&lt;/code>等价于&lt;code>@RequestMapping(value=&amp;quot;/users/{userId}&amp;quot;,method=RequestMethod.DELETE)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@DeleteMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/users/{userId}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span> &lt;span class="nf">deleteUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">userId&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="35-patch-请求">3.5. &lt;strong>PATCH 请求&lt;/strong>&lt;/h4>
&lt;p>一般实际项目中，我们都是 PUT 不够用了之后才用 PATCH 请求去更新数据。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@PatchMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/profile&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span> &lt;span class="nf">updateStudent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestBody&lt;/span> &lt;span class="n">StudentUpdateRequest&lt;/span> &lt;span class="n">studentUpdateRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">studentRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">updateDetail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">studentUpdateRequest&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-前后端传值">4. 前后端传值&lt;/h3>
&lt;p>&lt;strong>掌握前后端传值的正确姿势，是你开始 CRUD 的第一步！&lt;/strong>&lt;/p>
&lt;h4 id="41-pathvariable-和-requestparam">4.1. &lt;code>@PathVariable&lt;/code> 和 &lt;code>@RequestParam&lt;/code>&lt;/h4>
&lt;p>&lt;code>@PathVariable&lt;/code>用于获取路径参数，&lt;code>@RequestParam&lt;/code>用于获取查询参数。&lt;/p>
&lt;p>举个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/klasses/{klassId}/teachers&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Teacher&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getKlassRelatedTeachers&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;klassId&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">klassId&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;type&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">required&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">...&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果我们请求的 url 是：&lt;code>/klasses/{123456}/teachers?type=web&lt;/code>&lt;/p>
&lt;p>那么我们服务获取到的数据就是：&lt;code>klassId=123456,type=web&lt;/code>。&lt;/p>
&lt;h4 id="42-requestbody">4.2. &lt;code>@RequestBody&lt;/code>&lt;/h4>
&lt;p>用于读取 Request 请求（可能是 POST,PUT,DELETE,GET 请求）的 body 部分并且&lt;strong>Content-Type 为 application/json&lt;/strong> 格式的数据，接收到数据之后会自动将数据绑定到 Java 对象上去。系统会使用&lt;code>HttpMessageConverter&lt;/code>或者自定义的&lt;code>HttpMessageConverter&lt;/code>将请求的 body 中的 json 字符串转换为 java 对象。&lt;/p>
&lt;p>我用一个简单的例子来给演示一下基本使用！&lt;/p>
&lt;p>我们有一个注册的接口：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/sign-up&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span> &lt;span class="nf">signUp&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestBody&lt;/span> &lt;span class="nd">@Valid&lt;/span> &lt;span class="n">UserRegisterRequest&lt;/span> &lt;span class="n">userRegisterRequest&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">userService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">userRegisterRequest&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>UserRegisterRequest&lt;/code>对象：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@AllArgsConstructor&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">UserRegisterRequest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@NotBlank&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@NotBlank&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@FullName&lt;/span>
&lt;span class="nd">@NotBlank&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们发送 post 请求到这个接口，并且 body 携带 JSON 数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;userName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;coder&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;fullName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;shuangkou&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;123456&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样我们的后端就可以直接把 json 格式的数据映射到我们的 &lt;code>UserRegisterRequest&lt;/code> 类上。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200424113400.png" alt="">&lt;/p>
&lt;p>👉 需要注意的是：&lt;strong>一个请求方法只可以有一个&lt;code>@RequestBody&lt;/code>，但是可以有多个&lt;code>@RequestParam&lt;/code>和&lt;code>@PathVariable&lt;/code>&lt;/strong>。 如果你的方法必须要用两个 &lt;code>@RequestBody&lt;/code>来接受数据的话，大概率是你的数据库设计或者系统设计出问题了！&lt;/p>
&lt;h3 id="5-读取配置信息">5. 读取配置信息&lt;/h3>
&lt;p>&lt;strong>很多时候我们需要将一些常用的配置信息比如阿里云 oss、发送短信、微信认证的相关配置信息等等放到配置文件中。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>下面我们来看一下 Spring 为我们提供了哪些方式帮助我们从配置文件中读取这些配置信息。&lt;/strong>&lt;/p>
&lt;p>我们的数据源&lt;code>application.yml&lt;/code>内容如下：：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="k">wuhan2020&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>2020年初武汉爆发了新型冠状病毒，疫情严重，但是，我相信一切都会过去！武汉加油！中国加油！&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>my-profile&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>Guide哥&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">email&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>koushuangbwcx@&lt;span class="m">163.&lt;/span>com&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>library&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">location&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>湖北武汉加油中国加油&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>books&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>天才基本法&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>二十二岁的林朝夕在父亲确诊阿尔茨海默病这天，得知自己暗恋多年的校园男神裴之即将出国深造的消息——对方考取的学校，恰是父亲当年为她放弃的那所。&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>时间的秩序&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>为什么我们记得过去，而非未来？时间“流逝”意味着什么？是我们存在于时间之内，还是时间存在于我们之中？卡洛·罗韦利用诗意的文字，邀请我们思考这一亘古难题——时间的本质。&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="k">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>了不起的我&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>如何养成一个新习惯？如何让心智变得更成熟？如何拥有高质量的关系？&lt;span class="w"> &lt;/span>如何走出人生的艰难时刻？&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="51-value常用">5.1. &lt;code>@value&lt;/code>(常用)&lt;/h4>
&lt;p>使用 &lt;code>@Value(&amp;quot;${property}&amp;quot;)&lt;/code> 读取比较简单的配置信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${wuhan2020}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">wuhan2020&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="52-configurationproperties常用">5.2. &lt;code>@ConfigurationProperties&lt;/code>(常用)&lt;/h4>
&lt;p>通过&lt;code>@ConfigurationProperties&lt;/code>读取配置信息并与 bean 绑定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@ConfigurationProperties&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;library&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">LibraryProperties&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@NotEmpty&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Book&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">books&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Setter&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Book&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">省略getter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setter&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以像使用普通的 Spring bean 一样，将其注入到类中使用。&lt;/p>
&lt;h4 id="53-propertysource不常用">5.3. &lt;code>PropertySource&lt;/code>（不常用）&lt;/h4>
&lt;p>&lt;code>@PropertySource&lt;/code>读取指定 properties 文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Component&lt;/span>
&lt;span class="nd">@PropertySource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;classpath:website.properties&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">WebSite&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;${url}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">省略getter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setter&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更多内容请查看我的这篇文章：《&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247486181&amp;amp;idx=2&amp;amp;sn=10db0ae64ef501f96a5b0dbc4bd78786&amp;amp;chksm=cea2452ef9d5cc384678e456427328600971180a77e40c13936b19369672ca3e342c26e92b50&amp;amp;token=816772476&amp;amp;lang=zh_CN#rd">10 分钟搞定 SpringBoot 如何优雅读取配置文件？&lt;/a>》 。&lt;/p>
&lt;h3 id="6-参数校验">6. 参数校验&lt;/h3>
&lt;p>&lt;strong>数据的校验的重要性就不用说了，即使在前端对数据进行校验的情况下，我们还是要对传入后端的数据再进行一遍校验，避免用户绕过浏览器直接通过一些 HTTP 工具直接向后端请求一些违法数据。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>JSR(Java Specification Requests）&lt;/strong> 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，这样就可以在需要校验的时候进行校验了，非常方便！&lt;/p>
&lt;p>校验的时候我们实际用的是 &lt;strong>Hibernate Validator&lt;/strong> 框架。Hibernate Validator 是 Hibernate 团队最初的数据校验框架，Hibernate Validator 4.x 是 Bean Validation 1.0（JSR 303）的参考实现，Hibernate Validator 5.x 是 Bean Validation 1.1（JSR 349）的参考实现，目前最新版的 Hibernate Validator 6.x 是 Bean Validation 2.0（JSR 380）的参考实现。&lt;/p>
&lt;p>SpringBoot 项目的 spring-boot-starter-web 依赖中已经有 hibernate-validator 包，不需要引用相关依赖。如下图所示（通过 idea 插件—Maven Helper 生成）：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200424113300.png" alt="">&lt;/p>
&lt;p>非 SpringBoot 项目需要自行引入相关依赖包，这里不多做讲解，具体可以查看我的这篇文章：《&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485783&amp;amp;idx=1&amp;amp;sn=a407f3b75efa17c643407daa7fb2acd6&amp;amp;chksm=cea2469cf9d5cf8afbcd0a8a1c9cc4294d6805b8e01bee6f76bb2884c5bc15478e91459def49&amp;amp;token=292197051&amp;amp;lang=zh_CN#rd">如何在 Spring/Spring Boot 中做参数校验？你需要了解的都在这里！&lt;/a>》。&lt;/p>
&lt;p>👉 需要注意的是： &lt;strong>所有的注解，推荐使用 JSR 注解，即&lt;code>javax.validation.constraints&lt;/code>，而不是&lt;code>org.hibernate.validator.constraints&lt;/code>&lt;/strong>&lt;/p>
&lt;h4 id="61-一些常用的字段验证的注解">6.1. 一些常用的字段验证的注解&lt;/h4>
&lt;ul>
&lt;li>&lt;code>@NotEmpty&lt;/code> 被注释的字符串的不能为 null 也不能为空&lt;/li>
&lt;li>&lt;code>@NotBlank&lt;/code> 被注释的字符串非 null，并且必须包含一个非空白字符&lt;/li>
&lt;li>&lt;code>@Null&lt;/code> 被注释的元素必须为 null&lt;/li>
&lt;li>&lt;code>@NotNull&lt;/code> 被注释的元素必须不为 null&lt;/li>
&lt;li>&lt;code>@AssertTrue&lt;/code> 被注释的元素必须为 true&lt;/li>
&lt;li>&lt;code>@AssertFalse&lt;/code> 被注释的元素必须为 false&lt;/li>
&lt;li>&lt;code>@Pattern(regex=,flag=)&lt;/code>被注释的元素必须符合指定的正则表达式&lt;/li>
&lt;li>&lt;code>@Email&lt;/code> 被注释的元素必须是 Email 格式。&lt;/li>
&lt;li>&lt;code>@Min(value)&lt;/code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值&lt;/li>
&lt;li>&lt;code>@Max(value)&lt;/code>被注释的元素必须是一个数字，其值必须小于等于指定的最大值&lt;/li>
&lt;li>&lt;code>@DecimalMin(value)&lt;/code>被注释的元素必须是一个数字，其值必须大于等于指定的最小值&lt;/li>
&lt;li>&lt;code>@DecimalMax(value)&lt;/code> 被注释的元素必须是一个数字，其值必须小于等于指定的最大值&lt;/li>
&lt;li>&lt;code>@Size(max=, min=)&lt;/code>被注释的元素的大小必须在指定的范围内&lt;/li>
&lt;li>&lt;code>@Digits (integer, fraction)&lt;/code>被注释的元素必须是一个数字，其值必须在可接受的范围内&lt;/li>
&lt;li>&lt;code>@Past&lt;/code>被注释的元素必须是一个过去的日期&lt;/li>
&lt;li>&lt;code>@Future&lt;/code> 被注释的元素必须是一个将来的日期&lt;/li>
&lt;li>&amp;hellip;&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h4 id="62-验证请求体requestbody">6.2. 验证请求体(RequestBody)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@AllArgsConstructor&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Person&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@NotNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;classId 不能为空&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">classId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Size&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">max&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">33&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@NotNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;name 不能为空&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Pattern&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">regexp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;((^Man$|^Woman$|^UGM$))&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;sex 值不在可选范围&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@NotNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;sex 不能为空&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sex&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Email&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;email 格式不正确&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@NotNull&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;email 不能为空&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">email&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们在需要验证的参数上加上了&lt;code>@Valid&lt;/code>注解，如果验证失败，它将抛出&lt;code>MethodArgumentNotValidException&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/api&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/person&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getPerson&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@RequestBody&lt;/span> &lt;span class="nd">@Valid&lt;/span> &lt;span class="n">Person&lt;/span> &lt;span class="n">person&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="63-验证请求参数path-variables-和-request-parameters">6.3. 验证请求参数(Path Variables 和 Request Parameters)&lt;/h4>
&lt;p>&lt;strong>一定一定不要忘记在类上加上 &lt;code>Validated&lt;/code> 注解了，这个参数可以告诉 Spring 去校验方法参数。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/api&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Validated&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/person/{id}&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">getPersonByID&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@Valid&lt;/span> &lt;span class="nd">@PathVariable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="nd">@Max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;超过 id 的范围了&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">body&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更多关于如何在 Spring 项目中进行参数校验的内容，请看《&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485783&amp;amp;idx=1&amp;amp;sn=a407f3b75efa17c643407daa7fb2acd6&amp;amp;chksm=cea2469cf9d5cf8afbcd0a8a1c9cc4294d6805b8e01bee6f76bb2884c5bc15478e91459def49&amp;amp;token=292197051&amp;amp;lang=zh_CN#rd">如何在 Spring/Spring Boot 中做参数校验？你需要了解的都在这里！&lt;/a>》这篇文章。&lt;/p>
&lt;h3 id="7-全局处理-controller-层异常">7. 全局处理 Controller 层异常&lt;/h3>
&lt;p>介绍一下我们 Spring 项目必备的全局处理 Controller 层异常。&lt;/p>
&lt;p>&lt;strong>相关注解：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>@ControllerAdvice&lt;/code> :注解定义全局异常处理类&lt;/li>
&lt;li>&lt;code>@ExceptionHandler&lt;/code> :注解声明异常处理方法&lt;/li>
&lt;/ol>
&lt;p>如何使用呢？拿我们在第 5 节参数校验这块来举例子。如果方法参数不对的话就会抛出&lt;code>MethodArgumentNotValidException&lt;/code>，我们来处理这个异常。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@ControllerAdvice&lt;/span>
&lt;span class="nd">@ResponseBody&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">GlobalExceptionHandler&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 请求参数异常处理
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@ExceptionHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MethodArgumentNotValidException&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span> &lt;span class="n">handleMethodArgumentNotValidException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MethodArgumentNotValidException&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更多关于 Spring Boot 异常处理的内容，请看我的这两篇文章：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485568&amp;amp;idx=2&amp;amp;sn=c5ba880fd0c5d82e39531fa42cb036ac&amp;amp;chksm=cea2474bf9d5ce5dcbc6a5f6580198fdce4bc92ef577579183a729cb5d1430e4994720d59b34&amp;amp;token=2133161636&amp;amp;lang=zh_CN#rd">SpringBoot 处理异常的几种常见姿势&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247486379&amp;amp;idx=2&amp;amp;sn=48c29ae65b3ed874749f0803f0e4d90e&amp;amp;chksm=cea24460f9d5cd769ed53ad7e17c97a7963a89f5350e370be633db0ae8d783c3a3dbd58c70f8&amp;amp;token=1054498516&amp;amp;lang=zh_CN#rd">使用枚举简单封装一个优雅的 Spring Boot 全局异常处理！&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="8-jpa-相关">8. JPA 相关&lt;/h3>
&lt;h4 id="81-创建表">8.1. 创建表&lt;/h4>
&lt;p>&lt;code>@Entity&lt;/code>声明一个类对应一个数据库实体。&lt;/p>
&lt;p>&lt;code>@Table&lt;/code> 设置表明&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Table&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Role&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GenerationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">省略getter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="82-创建主键">8.2. 创建主键&lt;/h4>
&lt;p>&lt;code>@Id&lt;/code> ：声明一个字段为主键。&lt;/p>
&lt;p>使用&lt;code>@Id&lt;/code>声明之后，我们还需要定义主键的生成策略。我们可以使用 &lt;code>@GeneratedValue&lt;/code> 指定主键生成策略。&lt;/p>
&lt;p>&lt;strong>1.通过 &lt;code>@GeneratedValue&lt;/code>直接使用 JPA 内置提供的四种主键生成策略来指定主键生成策略。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Id&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GenerationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>JPA 使用枚举定义了 4 中常见的主键生成策略，如下：&lt;/p>
&lt;p>&lt;em>Guide 哥：枚举替代常量的一种用法&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">GenerationType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 使用一个特定的数据库表格来保存主键
&lt;/span>&lt;span class="cm"> * 持久化引擎通过关系数据库的一张特定的表格来生成主键,
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">TABLE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> *在某些数据库中,不支持主键自增长,比如Oracle、PostgreSQL其提供了一种叫做&amp;#34;序列(sequence)&amp;#34;的机制生成主键
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">SEQUENCE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 主键自增长
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">IDENTITY&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> *把主键生成策略交给持久化引擎(persistence engine),
&lt;/span>&lt;span class="cm"> *持久化引擎会根据数据库在以上三种主键生成 策略中选择其中一种
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">AUTO&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>@GeneratedValue&lt;/code>注解默认使用的策略是&lt;code>GenerationType.AUTO&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nd">@interface&lt;/span> &lt;span class="n">GeneratedValue&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">GenerationType&lt;/span> &lt;span class="nf">strategy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">AUTO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">generator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般使用 MySQL 数据库的话，使用&lt;code>GenerationType.IDENTITY&lt;/code>策略比较普遍一点（分布式系统的话需要另外考虑使用分布式 ID）。&lt;/p>
&lt;p>&lt;strong>2.通过 &lt;code>@GenericGenerator&lt;/code>声明一个主键策略，然后 &lt;code>@GeneratedValue&lt;/code>使用这个策略&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Id&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;IdentityIdGenerator&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@GenericGenerator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;IdentityIdGenerator&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;identity&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>等价于：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Id&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GenerationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>jpa 提供的主键生成策略有如下几种：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultIdentifierGeneratorFactory&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">MutableIdentifierGeneratorFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Serializable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServiceRegistryAwareService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;deprecation&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">DefaultIdentifierGeneratorFactory&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;uuid2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UUIDGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;guid&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">GUIDGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span> &lt;span class="c1">// can be done with UUIDGenerator + strategy
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UUIDHexGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span> &lt;span class="c1">// &amp;#34;deprecated&amp;#34; for new use
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;uuid.hex&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UUIDHexGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span> &lt;span class="c1">// uuid.hex is deprecated
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;assigned&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Assigned&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;identity&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IdentityGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;select&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SelectGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;sequence&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SequenceStyleGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;seqhilo&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SequenceHiLoGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;increment&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IncrementGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;foreign&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ForeignGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;sequence-identity&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SequenceIdentityGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;enhanced-sequence&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">SequenceStyleGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="n">register&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;enhanced-table&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TableGenerator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">register&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">generatorClass&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debugf&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;Registering IdentifierGenerator strategy [%s] -&amp;gt; [%s]&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">generatorClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="kd">final&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">generatorStrategyToClassNameMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">strategy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">generatorClass&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">previous&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">LOG&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">debugf&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34; - overriding [%s]&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">previous&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="83-设置字段类型">8.3. 设置字段类型&lt;/h4>
&lt;p>&lt;code>@Column&lt;/code> 声明字段。&lt;/p>
&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;p>设置属性 userName 对应的数据库字段名为 user_name，长度为 32，非空&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Column&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;user_name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">nullable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">32&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>设置字段类型并且加默认值，这个还是挺常用的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Column&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">columnDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;tinyint(1) default 1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Boolean&lt;/span> &lt;span class="n">enabled&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="84-指定不持久化特定字段">8.4. 指定不持久化特定字段&lt;/h4>
&lt;p>&lt;code>@Transient&lt;/code> ：声明不需要与数据库映射的字段，在保存的时候不需要保存进数据库 。&lt;/p>
&lt;p>如果我们想让&lt;code>secrect&lt;/code> 这个字段不被持久化，可以使用 &lt;code>@Transient&lt;/code>关键字声明。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Entity&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;USER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="nd">@Transient&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">secrect&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// not persistent because of @Transient
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>除了 &lt;code>@Transient&lt;/code>关键字声明， 还可以采用下面几种方法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">static&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">secrect&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// not persistent because of static
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">secrect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="n">Satish&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// not persistent because of final
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">transient&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">secrect&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// not persistent because of transient
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一般使用注解的方式比较多。&lt;/p>
&lt;h4 id="85-声明大字段">8.5. 声明大字段&lt;/h4>
&lt;p>&lt;code>@Lob&lt;/code>:声明某个字段为大字段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Lob&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更详细的声明：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Lob&lt;/span>
&lt;span class="c1">//指定 Lob 类型数据的获取策略， FetchType.EAGER 表示非延迟 加载，而 FetchType. LAZY 表示延迟加载 ；
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Basic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">fetch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FetchType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">EAGER&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//columnDefinition 属性指定数据表对应的 Lob 字段类型
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">columnDefinition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;LONGTEXT NOT NULL&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="86-创建枚举类型的字段">8.6. 创建枚举类型的字段&lt;/h4>
&lt;p>可以使用枚举类型的字段，不过枚举字段要用&lt;code>@Enumerated&lt;/code>注解修饰。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">MALE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;男性&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="n">FEMALE&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;女性&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">Gender&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Table&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;role&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Role&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">GenerationType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Long&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">description&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Enumerated&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EnumType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STRING&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Gender&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">省略getter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setter&lt;/span>&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>数据库里面对应存储的是 MAIL/FEMAIL。&lt;/p>
&lt;h4 id="87-增加审计功能">8.7. 增加审计功能&lt;/h4>
&lt;p>只要继承了 &lt;code>AbstractAuditBase&lt;/code>的类都会默认加上下面四个字段。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@AllArgsConstructor&lt;/span>
&lt;span class="nd">@NoArgsConstructor&lt;/span>
&lt;span class="nd">@MappedSuperclass&lt;/span>
&lt;span class="nd">@EntityListeners&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">AuditingEntityListener&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbstractAuditBase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@CreatedDate&lt;/span>
&lt;span class="nd">@Column&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">updatable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Instant&lt;/span> &lt;span class="n">createdAt&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@LastModifiedDate&lt;/span>
&lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Instant&lt;/span> &lt;span class="n">updatedAt&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@CreatedBy&lt;/span>
&lt;span class="nd">@Column&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">updatable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">createdBy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@LastModifiedBy&lt;/span>
&lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">updatedBy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们对应的审计功能对应地配置类可能是下面这样的（Spring Security 项目）:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="nd">@EnableJpaAuditing&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AuditSecurityConfiguration&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Bean&lt;/span>
&lt;span class="n">AuditorAware&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">auditorAware&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Optional&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">ofNullable&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SecurityContextHolder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getContext&lt;/span>&lt;span class="o">())&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SecurityContext&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getAuthentication&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Authentication&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">isAuthenticated&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Authentication&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>简单介绍一下上面设计到的一些注解：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code>@CreatedDate&lt;/code>: 表示该字段为创建时间时间字段，在这个实体被 insert 的时候，会设置值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>@CreatedBy&lt;/code> :表示该字段为创建人，在这个实体被 insert 的时候，会设置值&lt;/p>
&lt;p>&lt;code>@LastModifiedDate&lt;/code>、&lt;code>@LastModifiedBy&lt;/code>同理。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;code>@EnableJpaAuditing&lt;/code>：开启 JPA 审计功能。&lt;/p>
&lt;h4 id="88-删除修改数据">8.8. 删除/修改数据&lt;/h4>
&lt;p>&lt;code>@Modifying&lt;/code> 注解提示 JPA 该操作是修改操作,注意还要配合&lt;code>@Transactional&lt;/code>注解使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Repository&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">UserRepository&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">JpaRepository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Modifying&lt;/span>
&lt;span class="nd">@Transactional&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">deleteByUserName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="89-关联关系">8.9. 关联关系&lt;/h4>
&lt;ul>
&lt;li>&lt;code>@OneToOne&lt;/code> 声明一对一关系&lt;/li>
&lt;li>&lt;code>@OneToMany&lt;/code> 声明一对多关系&lt;/li>
&lt;li>&lt;code>@ManyToOne&lt;/code>声明多对一关系&lt;/li>
&lt;li>&lt;code>MangToMang&lt;/code>声明多对多关系&lt;/li>
&lt;/ul>
&lt;p>更多关于 Spring Boot JPA 的文章请看我的这篇文章：&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247485689&amp;amp;idx=1&amp;amp;sn=061b32c2222869932be5631fb0bb5260&amp;amp;chksm=cea24732f9d5ce24a356fb3675170e7843addbfcc79ee267cfdb45c83fc7e90babf0f20d22e1&amp;amp;token=292197051&amp;amp;lang=zh_CN#rd">一文搞懂如何在 Spring Boot 正确中使用 JPA&lt;/a> 。&lt;/p>
&lt;h3 id="9-事务-transactional">9. 事务 &lt;code>@Transactional&lt;/code>&lt;/h3>
&lt;p>在要开启事务的方法上使用&lt;code>@Transactional&lt;/code>注解即可!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Transactional&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们知道 Exception 分为运行时异常 RuntimeException 和非运行时异常。在&lt;code>@Transactional&lt;/code>注解中如果不配置&lt;code>rollbackFor&lt;/code>属性,那么事物只会在遇到&lt;code>RuntimeException&lt;/code>的时候才会回滚,加上&lt;code>rollbackFor=Exception.class&lt;/code>,可以让事物在遇到非运行时异常时也回滚。&lt;/p>
&lt;p>&lt;code>@Transactional&lt;/code> 注解一般用在可以作用在&lt;code>类&lt;/code>或者&lt;code>方法&lt;/code>上。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>作用于类&lt;/strong>：当把&lt;code>@Transactional 注解放在类上时，表示所有该类的&lt;/code>public 方法都配置相同的事务属性信息。&lt;/li>
&lt;li>&lt;strong>作用于方法&lt;/strong>：当类配置了&lt;code>@Transactional&lt;/code>，方法也配置了&lt;code>@Transactional&lt;/code>，方法的事务会覆盖类的事务配置信息。&lt;/li>
&lt;/ul>
&lt;p>更多关于关于 Spring 事务的内容请查看：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247484943&amp;amp;idx=1&amp;amp;sn=46b9082af4ec223137df7d1c8303ca24&amp;amp;chksm=cea249c4f9d5c0d2b8212a17252cbfb74e5fbe5488b76d829827421c53332326d1ec360f5d63&amp;amp;token=1082669959&amp;amp;lang=zh_CN#rd">可能是最漂亮的 Spring 事务管理详解&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;amp;mid=2247486483&amp;amp;idx=2&amp;amp;sn=77be488e206186803531ea5d7164ec53&amp;amp;chksm=cea243d8f9d5cacecaa5c5daae4cde4c697b9b5b21f96dfc6cce428cfcb62b88b3970c26b9c2&amp;amp;token=816772476&amp;amp;lang=zh_CN#rd">一口气说出 6 种 @Transactional 注解失效场景&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="10-json-数据处理">10. json 数据处理&lt;/h3>
&lt;h4 id="101-过滤-json-数据">10.1. 过滤 json 数据&lt;/h4>
&lt;p>&lt;strong>&lt;code>@JsonIgnoreProperties&lt;/code> 作用在类上用于过滤掉特定字段不返回或者不解析。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//生成json时将userRoles属性过滤
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nd">@JsonIgnoreProperties&lt;/span>&lt;span class="o">({&lt;/span>&lt;span class="s">&amp;#34;userRoles&amp;#34;&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UserRole&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">userRoles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>@JsonIgnore&lt;/code>一般用于类的属性上，作用和上面的&lt;code>@JsonIgnoreProperties&lt;/code> 一样。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//生成json时将userRoles属性过滤
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nd">@JsonIgnore&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">UserRole&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">userRoles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="102-格式化-json-数据">10.2. 格式化 json 数据&lt;/h4>
&lt;p>&lt;code>@JsonFormat&lt;/code>一般用来格式化 json 数据。：&lt;/p>
&lt;p>比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@JsonFormat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">shape&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">JsonFormat&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Shape&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">STRING&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;yyyy-MM-dd&amp;#39;T&amp;#39;HH:mm:ss.SSS&amp;#39;Z&amp;#39;&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">timezone&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;GMT&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Date&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="103-扁平化对象">10.3. 扁平化对象&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@Setter&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Account&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@JsonUnwrapped&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Location&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@JsonUnwrapped&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">PersonInfo&lt;/span> &lt;span class="n">personInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@Setter&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Location&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">provinceName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">countyName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@Setter&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PersonInfo&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">userName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>未扁平化之前：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;location&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;provinceName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;湖北&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;countyName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;武汉&amp;#34;&lt;/span>
&lt;span class="p">},&lt;/span>
&lt;span class="nt">&amp;#34;personInfo&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;userName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;coder1234&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;fullName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;shaungkou&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;code>@JsonUnwrapped&lt;/code> 扁平对象之后：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Getter&lt;/span>
&lt;span class="nd">@Setter&lt;/span>
&lt;span class="nd">@ToString&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Account&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@JsonUnwrapped&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Location&lt;/span> &lt;span class="n">location&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@JsonUnwrapped&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">PersonInfo&lt;/span> &lt;span class="n">personInfo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="p">{&lt;/span>
&lt;span class="nt">&amp;#34;provinceName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;湖北&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;countyName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;武汉&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;userName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;coder1234&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nt">&amp;#34;fullName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;shaungkou&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="11-测试相关">11. 测试相关&lt;/h3>
&lt;p>&lt;strong>&lt;code>@ActiveProfiles&lt;/code>一般作用于测试类上， 用于声明生效的 Spring 配置文件。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@SpringBootTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webEnvironment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RANDOM_PORT&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ActiveProfiles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Slf4j&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TestBase&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>&lt;code>@Test&lt;/code>声明一个方法为测试方法&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>@Transactional&lt;/code>被声明的测试方法的数据会回滚，避免污染测试数据。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>@WithMockUser&lt;/code> Spring Security 提供的，用来模拟一个真实用户，并且可以赋予权限。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="nd">@Test&lt;/span>
&lt;span class="nd">@Transactional&lt;/span>
&lt;span class="nd">@WithMockUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;user-id-18163138155&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">authorities&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ROLE_TEACHER&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">should_import_student_success&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">......&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>暂时总结到这里吧！虽然花了挺长时间才写完，不过可能还是会一些常用的注解的被漏掉，所以，我将文章也同步到了 Github 上去，Github 地址： 欢迎完善！&lt;/em>&lt;/p>
&lt;p>本文已经收录进我的 75K Star 的 Java 开源项目 JavaGuide：&lt;a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide&lt;/a>。&lt;/p></description></item><item><title>通过explain查询分析SQL的执行计划</title><link>https://blog.itning.top/post/2020/04/12/%E9%80%9A%E8%BF%87explain%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90sql%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</link><pubDate>Sun, 12 Apr 2020 21:06:25 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/12/%E9%80%9A%E8%BF%87explain%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90sql%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</guid><description>&lt;p>&lt;strong>id&lt;/strong>列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行，id列为null的就表是这是一个结果集，不需要使用它来进行查询。&lt;/p>
&lt;p>&lt;strong>select_type&lt;/strong>列常见的有：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>select_type&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>simple&lt;/td>
&lt;td>表示不需要union操作或者不包含子查询的简单select查询。有连接查询时，外层的查询为simple，且只有一个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>primary&lt;/td>
&lt;td>一个需要union操作或者含有子查询的select，位于最外层的单位查询的select_type即为primary。且只有一个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>union&lt;/td>
&lt;td>union连接的两个select查询，第一个查询是dervied派生表，除了第一个表外，第二个以后的表select_type都是union&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dependent union&lt;/td>
&lt;td>与union一样，出现在union 或union all语句中，但是这个查询要受到外部查询的影响&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>union result&lt;/td>
&lt;td>包含union的结果集，在union和union all语句中,因为它不需要参与查询，所以id字段为null&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>subquery&lt;/td>
&lt;td>除了from子句中包含的子查询外，其他地方出现的子查询都可能是subquery&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dependent subquery&lt;/td>
&lt;td>与dependent union类似，表示这个subquery的查询要受到外部表查询的影响&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>derived&lt;/td>
&lt;td>from字句中出现的子查询，也叫做派生表，其他数据库中可能叫做内联视图或嵌套select&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>table&lt;/strong>显示的查询表名，如果查询使用了别名，那么这里显示的是别名，如果不涉及对数据表的操作，那么这显示为null，如果显示为尖括号括起来的&lt;code>&amp;lt;derived N&amp;gt;&lt;/code>就表示这个是临时表，后边的N就是执行计划中的id，表示结果来自于这个查询产生。如果是尖括号括起来的&lt;code>&amp;lt;union M,N&amp;gt;&lt;/code>，与&lt;code>&amp;lt;derived N&amp;gt;&lt;/code>类似，也是一个临时表，表示这个结果来自于union查询的id为M,N的结果集。&lt;/p>
&lt;p>&lt;strong>type&lt;/strong>依次从好到差：&lt;code>system&lt;/code>，&lt;code>const&lt;/code>，&lt;code>eq_ref&lt;/code>，&lt;code>ref&lt;/code>，&lt;code>fulltext&lt;/code>，&lt;code>ref_or_null&lt;/code>，&lt;code>unique_subquery&lt;/code>，&lt;code>index_subquery&lt;/code>，&lt;code>range&lt;/code>，&lt;code>index_merge&lt;/code>，&lt;code>index&lt;/code>，&lt;code>ALL&lt;/code>，除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>type&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>system&lt;/td>
&lt;td>表中只有一行数据或者是空表，且只能用于myisam和memory表。如果是Innodb引擎表，type列在这个情况通常都是all或者index&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>const&lt;/td>
&lt;td>使用唯一索引或者主键，返回记录一定是1行记录的等值where条件时，通常type是const。其他数据库也叫做唯一索引扫描&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eq_ref&lt;/td>
&lt;td>出现在要连接过个表的查询计划中，驱动表只返回一行数据，且这行数据是第二个表的主键或者唯一索引，且必须为not null，唯一索引和主键是多列时，只有所有的列都用作比较时才会出现eq_ref&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ref&lt;/td>
&lt;td>不像eq_ref那样要求连接顺序，也没有主键和唯一索引的要求，只要使用相等条件检索时就可能出现，常见与辅助索引的等值查找。或者多列主键、唯一索引中，使用第一个列之外的列作为等值查找也会出现，总之，返回数据不唯一的等值查找就可能出现。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fulltext&lt;/td>
&lt;td>全文索引检索，要注意，全文索引的优先级很高，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ref_or_null&lt;/td>
&lt;td>与ref方法类似，只是增加了null值的比较。实际用的不多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unique_subquery&lt;/td>
&lt;td>用于where中的in形式子查询，子查询返回不重复值唯一值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>index_subquery&lt;/td>
&lt;td>用于in形式子查询使用到了辅助索引或者in常数列表，子查询可能返回重复值，可以使用索引将子查询去重。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range&lt;/td>
&lt;td>索引范围扫描，常见于使用&amp;gt;,&amp;lt;,is null,between ,in ,like等运算符的查询中。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>index_merge&lt;/td>
&lt;td>表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取所个索引，性能可能大部分时间都不如range&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>index&lt;/td>
&lt;td>索引全表扫描，把索引从头到尾扫一遍，常见于使用索引列就可以处理不需要读取数据文件的查询、可以使用索引排序或者分组的查询。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>all&lt;/td>
&lt;td>这个就是全表扫描数据文件，然后再在server层进行过滤返回符合要求的记录。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>possible_keys&lt;/strong>查询可能使用到的索引都会在这里列出来&lt;/p>
&lt;p>&lt;strong>key&lt;/strong>查询真正使用到的索引，select_type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。&lt;/p>
&lt;p>&lt;strong>key_len&lt;/strong>用于处理查询的索引长度，如果是单列索引，那就整个索引长度算进去，如果是多列索引，那么查询不一定都能使用到所有的列，具体使用到了多少个列的索引，这里就会计算进去，没有使用到的列，这里不会计算进去。留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。要注意，mysql的ICP特性使用到的索引不会计入其中。另外，key_len只计算where条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。&lt;/p>
&lt;p>&lt;strong>ref&lt;/strong>如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func&lt;/p>
&lt;p>&lt;strong>rows&lt;/strong>这里是执行计划中估算的扫描行数，不是精确值&lt;/p>
&lt;p>&lt;strong>extra&lt;/strong>这个列可以显示的信息非常多，有几十种，常用的有&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>extra&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>distinct&lt;/td>
&lt;td>在select部分使用了distinc关键字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>no tables used&lt;/td>
&lt;td>不带from字句的查询或者From dual查询&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>使用not in()形式子查询或not exists运算符的连接查询，这种叫做反连接。即，一般连接查询是先查询内表，再查询外表，反连接就是先查询外表，再查询内表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using filesort&lt;/td>
&lt;td>排序时无法使用到索引时，就会出现这个。常见于order by和group by语句中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using index&lt;/td>
&lt;td>查询时不需要回表查询，直接通过索引就可以获取查询的数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using join buffer（block nested loop），using join buffer（batched key accss）&lt;/td>
&lt;td>5.6.x之后的版本优化关联查询的BNL，BKA特性。主要是减少内表的循环数量以及比较顺序地扫描查询。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using intersect&lt;/td>
&lt;td>表示使用and的各个索引的条件时，该信息表示是从处理结果获取交集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using union&lt;/td>
&lt;td>表示使用or连接各个使用索引的条件时，该信息表示从处理结果获取并集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using sort_union和using sort_intersection&lt;/td>
&lt;td>与前面两个对应的类似，只是他们是出现在用and和or查询信息量大时，先查询主键，然后进行排序合并后，才能读取记录并返回。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using temporary&lt;/td>
&lt;td>表示使用了临时表存储中间结果。临时表可以是内存临时表和磁盘临时表，执行计划中看不出来，需要查看status变量，used_tmp_table，used_tmp_disk_table才能看出来。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>using where&lt;/td>
&lt;td>表示存储引擎返回的记录并不是所有的都满足查询条件，需要在server层进行过滤。查询条件中分为限制条件和检查条件，5.6之前，存储引擎只能根据限制条件扫描数据并返回，然后server层根据检查条件进行过滤再返回真正符合查询的数据。5.6.x之后支持ICP特性，可以把检查条件也下推到存储引擎层，不符合检查条件和限制条件的数据，直接不读取，这样就大大减少了存储引擎扫描的记录数量。extra列显示using index condition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>firstmatch(tb_name)&lt;/td>
&lt;td>5.6.x开始引入的优化子查询的新特性之一，常见于where字句含有in()类型的子查询。如果内表的数据量比较大，就可能出现这个&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loosescan(m..n)&lt;/td>
&lt;td>5.6.x之后引入的优化子查询的新特性之一，在in()类型的子查询中，子查询返回的可能有重复记录时，就可能出现这个&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除了这些之外，还有很多查询数据字典库，执行计划过程中就发现不可能存在结果的一些提示信息&lt;/p>
&lt;p>&lt;strong>filtered&lt;/strong>使用explain extended时会出现这个列，5.7之后的版本默认就有这个字段，不需要使用explain extended了。这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200412211800.png" alt="a">&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200412211900.png" alt="b">&lt;/p></description></item><item><title>JVM系列5 执行子系统</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 10 Apr 2020 11:40:52 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid><description>&lt;blockquote>
&lt;p>字节码执行引擎&lt;/p>
&lt;/blockquote>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>执行引擎是Java虚拟机非常最核心的部分，对于物理级的执行引擎是直接建立在处理器、硬件、指令集合操作系统层面，而虚拟机执行引擎则是由自行定制的指令集与执行引擎的结构体系。执行引擎在执行Java会有解释执行(通过解释器)和编译执行(通过JIT生成的本地代码)两种选择，对于Android ART又多了一种提前编译器(AOT)。&lt;/p>
&lt;p>接下来，主要讲解虚拟机的方法执行过程，对于Java虚拟机的解释器的执行模型（不考虑异常处理）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="k">do&lt;/span> &lt;span class="o">{&lt;/span>
atomically calculate pc and fetch opcode at pc&lt;span class="p">;&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>operands&lt;span class="o">)&lt;/span> fetch operands&lt;span class="p">;&lt;/span>
execute the action &lt;span class="k">for&lt;/span> the opcode&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>there is more to &lt;span class="k">do&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;a href="https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/">Jvm系列1—运行时内存模型&lt;/a>，有提到栈帧(Stack Frame)，这是用于支持虚拟机的方法调用和方法执行的重要数据结构。每一个方法的调用到执行完成，都对着栈帧的入栈和出栈过程。&lt;/p>
&lt;h2 id="对象创建">对象创建&lt;/h2>
&lt;p>Java作为一门面向对象的语言，对象的创建时刻都在发生着，对于Java语言来说创建对象只需要一个new关键字就可以完成，接下来看看从Java虚拟机角度创建对象是怎样的一个过程。如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Person&lt;/span> &lt;span class="n">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当虚拟机遇到new指令后，执行如下流程：&lt;/p>
&lt;ul>
&lt;li>先检查指令参数“Person”能否在常量池中定位到Person类的符号引用；如果找到，则往下执行；&lt;/li>
&lt;li>再检查Person类是否已经加载、解析和初始化；如果没有初始化，则先执行类加载过程；&lt;/li>
&lt;li>类加载后，虚拟机为新生成的person对象在堆上分配相应大小的内存；（对象大小在类加载后确定）&lt;/li>
&lt;li>内存分配后，虚拟机将分配的内存空间都初始化为零值(不包括对象头)，实例变量不赋初值也能使用对应的零值；&lt;/li>
&lt;li>设置对象头信息，比如对象的哈希值，gc分代年龄等。&lt;/li>
&lt;/ul>
&lt;p>从虚拟机角度，到此一个新的对象已经创建完成。但从Java视角，对象才刚刚开始，init构造方法还没有执行，所有字段还是零。执行完init方法，按java程序的构造方法进行初始化后，对象便是彻底创建完成。&lt;/p>
&lt;p>未完，待续&lt;/p></description></item><item><title>JVM系列4 类的加载</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</link><pubDate>Fri, 10 Apr 2020 11:33:02 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</guid><description>&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;p>本文主要讲述虚拟机如何把 Class文件加载到内存的过程。校验、转换解析和初始化，最终形成可被虚拟机使用的Java类型，这就是虚拟机的类加载机制。类型的加载、连接和初始化都是在程序运行期间完成，这样做的优劣势，如下：&lt;/p>
&lt;ul>
&lt;li>优势：提高Java程序的灵活性，Java动态扩展的语言特性就是依赖运行期动态加载和动态连接。当面向接口的应用程序，可以等到运行时指定实现类；可以通过类加载器，让程序运行时加载一个二进制流作为程序一部分。&lt;/li>
&lt;li>劣势：增加类加载的性能开销。&lt;/li>
&lt;/ul>
&lt;h2 id="二-类加载的生命周期">二、 类加载的生命周期&lt;/h2>
&lt;p>类的生命周期是指把Class字节码从文件中加载到内存，直到卸载内存整个过程，分为7个步骤。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200410113400.png" alt="jvm_class_loading_2">&lt;/p>
&lt;p>图中用红色虚线框起来的3个过程分别为验证、准备、解析，它们合称为链接(Linking)过程。另外图中紫色的5项是严格按照执行。而蓝色的解析阶段不一定要在初始化之前， 也可以在初始化之后再解析，这种情况称为动态绑定或晚期绑定。&lt;/p>
&lt;h3 id="1-加载">1. 加载&lt;/h3>
&lt;p>虚拟机在加载阶段，主要工作如下：&lt;/p>
&lt;ol>
&lt;li>通过&lt;code>类的全限定名&lt;/code>获取该类的二进制字节流；&lt;/li>
&lt;li>将字节流所代表的静态存储结构 转化为 方法区的运行时数据结构；&lt;/li>
&lt;li>生成代表该类的Class对象并存放方法区，作为方法区该类的各种数据的访问入口。&lt;/li>
&lt;/ol>
&lt;p>对于上述字节流，可能来源：&lt;/p>
&lt;ul>
&lt;li>压缩包，例如jar/war等格式;&lt;/li>
&lt;li>网络，典型场景applet;&lt;/li>
&lt;li>运行时计算生成，例如动态代理技术，在java.lang.reflect.Proxy中，利用ProxyGenerator.generateProxyClass来为特定接口生成形如“*$Proxy”的代理类的二进制字节流；&lt;/li>
&lt;li>数据库，例如中间件服务器(SAP Netweaver)。&lt;/li>
&lt;/ul>
&lt;p>注：对于数组类，不通过类加载器创建，而是由虚拟机直接创建的。另外加载阶段尚未完成，连接阶段可能已经开始。&lt;/p>
&lt;h3 id="2-验证">2. 验证&lt;/h3>
&lt;p>验证是连接阶段(Linking)的第一步，目的是为了&lt;strong>确保Class文件的字节流符合虚拟机规范&lt;/strong>，不会危害虚拟机自身安全。比如：访问数组越界问题，将对象转型为未实现的类型，跳转到不存在的代码区等情绪编译器都会拒绝编译，也就是无法生成Class文件，既然如此，为什么还要验证呢？原因是Class文件不一定都是由java源码编译而成，可以是任何途径，所以验证还是很有必要的，尽可能保证系统能承受住恶意代码攻击。&lt;/p>
&lt;p>验证主要工作分4阶段：&lt;/p>
&lt;ol>
&lt;li>文件格式验证：验证是否符合Class文件格式规范；&lt;/li>
&lt;li>元数据验证：验证是否符合Java语言规范；&lt;/li>
&lt;li>字节码验证：验证数据流和控制流分析；&lt;/li>
&lt;li>符号引用验证：验证符号引用转化为直接引用。&lt;/li>
&lt;/ol>
&lt;h4 id="21-文件格式验证">2.1 文件格式验证&lt;/h4>
&lt;p>验证点有比如是否魔数0xCAFEBABE开头；主、次版本号是否范围之内；常量池中常量tag标示是否正确等等，只有通过全部的验证，才能把字节流存储到内存的方法区。&lt;/p>
&lt;h4 id="22-元数据验证">2.2 元数据验证&lt;/h4>
&lt;p>经过文件格式验证，字节流已加载到方法区，这个阶段工作是对方法区的字节码进行语义分析，保证符合Java语言规范。 验证点比如：&lt;/p>
&lt;ul>
&lt;li>该类是否有父类(除Object之外，所有类都应该有父类)&lt;/li>
&lt;li>该类是否继承不允许继承的类(final类)&lt;/li>
&lt;li>非抽象类，是否都实现其父类的抽象方法或接口中的方法&lt;/li>
&lt;li>类的字段、方法是否与父类矛盾(例如覆盖父类的final字段，或重载不符合规则)&lt;/li>
&lt;li>… 除上面列举外，还有很多。经过元数据验证，能确保元数据都是符合规范。&lt;/li>
&lt;/ul>
&lt;h4 id="23-字节码验证">2.3 字节码验证&lt;/h4>
&lt;p>比如操作数栈的数据类型和指令代码序列配合，跳转指令不会跳到方法体之外等。HotSpot虚拟机提供 -XX:-UseSplitVerifier选项来关闭这项优化。&lt;/p>
&lt;h4 id="24-符号引用验证">2.4 符号引用验证&lt;/h4>
&lt;p>校验点：&lt;/p>
&lt;ul>
&lt;li>符号引用中通过字符串描述的全限定名是否能找到对应的类；&lt;/li>
&lt;li>在指定类是否存在符合方法的字段描述符以及简单名称所描述的方法和字段；&lt;/li>
&lt;li>符号引用中的类、字段、方法的访问权限检查。&lt;/li>
&lt;li>…等等&lt;/li>
&lt;/ul>
&lt;p>对于虚拟机的类加载机制来说，验证阶段非常重要的，但不是一定必要的。如果所运行的全部代码(包含自己编写以及第三方包的代码)都已经被反复使用和验证过，那么可以考虑使用 -Xverify:none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。&lt;/p>
&lt;h3 id="3-准备">3. 准备&lt;/h3>
&lt;p>主要工作：&lt;code>static变量&lt;/code>分配内存，并设置类变量的初始值的阶段。&lt;/p>
&lt;p>&lt;strong>(1). 类变量：赋予零值&lt;/strong>&lt;/p>
&lt;p>数据类型的零值表，如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>零值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>0L&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>0.0f&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>0.0d&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>(short)0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>(byte)0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>char&lt;/td>
&lt;td>‘\u0000’&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>boolean&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>reference&lt;/td>
&lt;td>null&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在准备阶段，会为变量&lt;code>value&lt;/code>在方法区分配内存并初始化零值，即&lt;code>value=0&lt;/code>，而非10。 因为对于value的赋值10，是由&lt;code>putstatic&lt;/code>指令完成。该指令是在java程序被编译后，存放在类构造器&lt;code>&amp;lt;clinit&amp;gt;&lt;/code>方法之中。所以 &lt;code>value=10&lt;/code>的操作是在类初始化的时候才发生，故类变量在准备期&lt;code>value=0&lt;/code>。&lt;/p>
&lt;p>&lt;strong>(2). 常量：赋予真实值&lt;/strong>&lt;/p>
&lt;p>例如:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>对于常量，准备阶段会把类字段的字段属性表中的ConstantValue属性所指定的值（此处是10），赋给常量（&lt;code>value&lt;/code>），故常量在准备期间&lt;code>value =10&lt;/code>;&lt;/p>
&lt;p>&lt;strong>(3). 实例变量：不赋任何值&lt;/strong>&lt;/p>
&lt;p>该阶段仅对类变量进行内存分配，而对于实例变量(或者称呼为成员变量)并不会分配内存，也就更不用提赋值的事。实例变量的初始化，是随着对象实例化时在Java堆上分配内存而进行的。&lt;/p>
&lt;h3 id="4-解析">4. 解析&lt;/h3>
&lt;p>主要工作：虚拟机将常量池内的符号引用替换为直接引用的阶段。&lt;/p>
&lt;p>先解释一下符号引用和直接引用的概念&lt;/p>
&lt;ul>
&lt;li>&lt;strong>符号引用(Symbolic Reference)&lt;/strong>：以一组符号来描述引用目标，符号可以是任意形式的字面量。只能要准确定位到目标即可。符号引用与虚拟机的内存布局无关，引用的目标也不一定存在内存。这样兼容性强，各种虚拟机只需要能接受符号引用即可。&lt;/li>
&lt;li>&lt;strong>直接引用(Direct Reference)&lt;/strong>：直接引用就是指向目标的指针、相对偏移量或者能间接定位到目标的句柄，直接引用和虚拟机内存布局息息相关。直接引用的目标必然存在与内存中。&lt;/li>
&lt;/ul>
&lt;p>同一个符号引用 在不同的虚拟机中解析出来的直接引用地址一般都是不相同的；同一个符号引用，在同一个虚拟机下，多次解析时，会对第一次解析结果进行缓存（常量池记录直接引用，并标记已解析状态），从而避免多次解析。&lt;/p>
&lt;p>只有静态方法、私有方法、实例构造器以及final方法，这些都可以统称为非虚方法。不可能通过继承或其他方法覆写，在类加载阶段就可以确定只有一个版本。与之相反的就是虚方法，可能有多个版本只有真正运行的时候才可确定的。&lt;/p>
&lt;p>特殊情形，对于invokedynamic指令，不会进行缓存过程，每次使用前都会进行解析。&lt;/p>
&lt;h3 id="5-初始化">5. 初始化&lt;/h3>
&lt;p>主工作：主要是执行类构造器方法clinit。(class init的简称)&lt;/p>
&lt;p>类初始化阶段是类加载的最后一个阶段。在初始化之前的过程中，用户可控的地方只有通过自定义类加载器参与，其余都是虚拟机主导和控制。&lt;/p>
&lt;p>到了初始化，才开始真正的执行类中定义的Java程序代码。&lt;/p>
&lt;p>&lt;strong>(1). 类的构造方法&lt;/strong>&lt;/p>
&lt;p>类构造方法是由编译器自动收集源文件中的&lt;code>类变量赋值操作&lt;/code>和&lt;code>静态语句块&lt;/code>合并而成的。收集顺序是由语句在源文件的顺序所决定。故静态语句块只能访问定义之前的静态变量；对于定义之后的变量可以赋值，但不能访问。&lt;/p>
&lt;ol>
&lt;li>clinit方法与类的实例构造方法init不同，&lt;code>clinit方法不需要显式调用父类构造器&lt;/code>，虚拟机会保证子类的clinit方法执行之前，父类的clinit方法已经执行完毕。故第一个被执行的clinit方法的类肯定是java.lang.Object;&lt;/li>
&lt;li>&lt;code>clinit方法不是必需的&lt;/code>，对于没有静态块和类变量赋值操作，编译器不会生成clinit方法。&lt;/li>
&lt;li>&lt;code>父类静态语句和静态变量赋值优先于子类&lt;/code>.&lt;/li>
&lt;li>&lt;code>interface中不能有静态语句块&lt;/code>，但仍可以有变量初始化的赋值操作，也可以生成clinit方法。但接口和类的不同是，执行接口的clinit方法不需要先执行父接口的clinit方法。只有当父接口中定义的变量使用时，父接口才会初始化。&lt;/li>
&lt;li>虚拟机保证类构造方法可以多线程正确执行，会加锁、同步的操作。 一个线程执行类构造方法，其他线程&lt;code>阻塞等待&lt;/code>，当类构造方法有耗时操作，会造成多进程的阻塞,往往比较隐蔽。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>(2). 类初始化时机&lt;/strong>&lt;/p>
&lt;p>虚拟机规范中严格规定有且只有5种情况下，当类没有初始化时必须立即对类进行初始化：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>遇到&lt;code>new&lt;/code>、&lt;code>getstatic&lt;/code>、&lt;code>putstatic&lt;/code>或&lt;code>invokeStatic&lt;/code>&lt;/p>
&lt;p>这4条字节码指令时。常见场景：&lt;/p>
&lt;ol>
&lt;li>使用new关键字实例化对象时，触发&lt;code>new&lt;/code>；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>读取类变量时，触发&lt;code>getstatic&lt;/code>；（final常量除外）
3. 设置类变量时，触发&lt;code>putstatic&lt;/code>；
4. 调用类的静态方法时，触发&lt;code>invokeStatic&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>虚拟机启动时，需指定一个要执行的主类(含有&lt;code>main()&lt;/code>的类)，虚拟机会先初始化该类；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>初始化一个类时，当其父类没有初始化，则需要先触发其父类的初始化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>java.lang.reflect&lt;/code>包中的方法对类进行反射调用时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当&lt;code>java.lang.invoke.MethodHandle&lt;/code>实例最后的解析结果为&lt;code>REF_getStatic&lt;/code>、&lt;code>REF_putStatic&lt;/code>、&lt;code>REF_invokeStatic&lt;/code>的方法句柄，并且该句柄所对应的类没有进行过初始化；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>对于final常量不能触发类初始化，是由于在编译时已把数据放入常量池的静态字段，当读取类的&lt;code>static final&lt;/code>字段时，并不需要初始化类，而是从常量池中去获取相应的数据。上述的5种场景的行为都是对类的一个主动引用过程。除此之外，还有被动引用并不会触发类的初始化过程。&lt;/p></description></item><item><title>JVM系列3 字节码指令</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 10 Apr 2020 11:21:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义&lt;/p>
&lt;/blockquote>
&lt;h1 id="一概述">一、概述&lt;/h1>
&lt;p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。&lt;/p>
&lt;ul>
&lt;li>操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。&lt;/li>
&lt;li>操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 &lt;code>(byte1 &amp;lt;&amp;lt; 8) | byte2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>放弃操作数对齐操作数对齐方案：&lt;/p>
&lt;ul>
&lt;li>优势：可以省略很多填充和间隔符号，从而减少数据量，具有更高的传输效率；Java起初就是为了面向网络、智能家具而设计的，故更加注重传输效率。&lt;/li>
&lt;li>劣势：运行时从字节码里构建出具体数据结构，需要花费部分CPU时间，从而导致解释执行字节码会损失部分性能。&lt;/li>
&lt;/ul>
&lt;h2 id="二指令">二、指令&lt;/h2>
&lt;p>大多数指令包含了其操作所对应的数据类型信息，比如iload，表示从局部变量表中加载int型的数据到操作数栈；而fload表示加载float型数据到操作数栈。由于操作码长度只有1Byte，因此Java虚拟机的指令集对于特定操作只提供有限的类型相关指令，并非为每一种数据类型都有相应的操作指令。必要时，有些指令可用于将不支持的类型转换为可被支持的类型。&lt;/p>
&lt;p>对于byte,short,char,boolean类型，往往没有单独的操作码，通过编译器在编译期或者运行期将其扩展。对于byte,short采用带符号扩展，chart,boolean采用零位扩展。相应的数组也是采用类似的扩展方式转换为int类型的字节码来处理。 下面分门别类来介绍Java虚拟机指令，都以int类型的数据操作为例。&lt;/p>
&lt;p>栈是指操作数栈&lt;/p>
&lt;h3 id="21-栈操作相关">2.1 栈操作相关&lt;/h3>
&lt;h4 id="load和store">load和store&lt;/h4>
&lt;ul>
&lt;li>load 命令：用于将局部变量表的指定位置的相应类型变量加载到栈顶；&lt;/li>
&lt;li>store命令：用于将栈顶的相应类型数据保入局部变量表的指定位置；&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量进栈&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>变量保存&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>iload&lt;/td>
&lt;td>第1个int型变量进栈&lt;/td>
&lt;td>istore&lt;/td>
&lt;td>栈顶int数值存入第1局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iload_0&lt;/td>
&lt;td>第1个int型变量进栈&lt;/td>
&lt;td>istore_0&lt;/td>
&lt;td>栈顶int数值存入第1局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iload_1&lt;/td>
&lt;td>第2个int型变量进栈&lt;/td>
&lt;td>istore_1&lt;/td>
&lt;td>栈顶int数值存入第2局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iload_2&lt;/td>
&lt;td>第3个int型变量进栈&lt;/td>
&lt;td>istore_2&lt;/td>
&lt;td>栈顶int数值存入第3局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iload_3&lt;/td>
&lt;td>第4个int型变量进栈&lt;/td>
&lt;td>istore_3&lt;/td>
&lt;td>栈顶int数值存入第4局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lload&lt;/td>
&lt;td>第1个long型变量进栈&lt;/td>
&lt;td>lstore&lt;/td>
&lt;td>栈顶long数值存入第1局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fload&lt;/td>
&lt;td>第1个float型变量进栈&lt;/td>
&lt;td>fstore&lt;/td>
&lt;td>栈顶float数值存入第1局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dload&lt;/td>
&lt;td>第1个double型变量进栈&lt;/td>
&lt;td>dstore&lt;/td>
&lt;td>栈顶double数值存入第1局部变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>aload&lt;/td>
&lt;td>第1个ref型变量进栈&lt;/td>
&lt;td>astore&lt;/td>
&lt;td>栈顶ref对象存入第1局部变量&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="constpush和ldc">const、push和ldc&lt;/h4>
&lt;ul>
&lt;li>const、push：将相应类型的常量放入栈顶&lt;/li>
&lt;li>ldc:则是从常量池中将常量&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>常量进栈&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>aconst_null&lt;/td>
&lt;td>null进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_m1&lt;/td>
&lt;td>int型常量-1进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_0&lt;/td>
&lt;td>int型常量0进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_1&lt;/td>
&lt;td>int型常量1进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_2&lt;/td>
&lt;td>int型常量2进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_3&lt;/td>
&lt;td>int型常量3进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_4&lt;/td>
&lt;td>int型常量4进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iconst_5&lt;/td>
&lt;td>int型常量5进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lconst_0&lt;/td>
&lt;td>long型常量0进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fconst_0&lt;/td>
&lt;td>float型常量0进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dconst_0&lt;/td>
&lt;td>double型常量0进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bipush&lt;/td>
&lt;td>byte型常量进栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sipush&lt;/td>
&lt;td>short型常量进栈&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>常量池操作&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ldc&lt;/td>
&lt;td>int、float或String型常量从常量池推送至栈顶&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ldc_w&lt;/td>
&lt;td>int、float或String型常量从常量池推送至栈顶（宽索引）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ldc2_w&lt;/td>
&lt;td>long或double型常量从常量池推送至栈顶（宽索引）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="pop和dup">pop和dup&lt;/h4>
&lt;ul>
&lt;li>pop用于栈顶数值出栈操作；&lt;/li>
&lt;li>dup用于赋值栈顶的指定个数的数值，并将其压入栈顶指定次数；&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>栈顶操作&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>pop&lt;/td>
&lt;td>栈顶数值出栈(不能是long/double)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pop2&lt;/td>
&lt;td>栈顶数值出栈(long/double型1个，其他2个)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup&lt;/td>
&lt;td>复制栈顶数值，并压入栈顶&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup_x1&lt;/td>
&lt;td>复制栈顶数值，并压入栈顶2次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup_x2&lt;/td>
&lt;td>复制栈顶数值，并压入栈顶3次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup2&lt;/td>
&lt;td>复制栈顶2个数值，并压入栈顶&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup2_x1&lt;/td>
&lt;td>复制栈顶2个数值，并压入栈顶2次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dup2_x2&lt;/td>
&lt;td>复制栈顶2个数值，并压入栈顶3次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>swap&lt;/td>
&lt;td>栈顶的两个数值互换，且不能是long/double&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>注意：dup2&lt;/strong>对于long、double类型的数据就是一个，对于其他类型的数据，才是真正的两个，这个的2代表的是2个slot的数据。&lt;/p>
&lt;h3 id="22-对象相关">2.2 对象相关&lt;/h3>
&lt;h4 id="字段调用">字段调用&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>字段调用&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>getstatic&lt;/td>
&lt;td>获取类的静态字段，将其值压入栈顶&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>putstatic&lt;/td>
&lt;td>给类的静态字段赋值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getfield&lt;/td>
&lt;td>获取对象的字段，将其值压入栈顶&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>putfield&lt;/td>
&lt;td>给对象的字段赋值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="方法调用">方法调用&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法调用&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>invokevirtual&lt;/td>
&lt;td>调用实例方法&lt;/td>
&lt;td>虚方法分派&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invokestatic&lt;/td>
&lt;td>调用类方法&lt;/td>
&lt;td>static方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invokeinterface&lt;/td>
&lt;td>调用接口方法&lt;/td>
&lt;td>运行时搜索合适方法调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invokespecial&lt;/td>
&lt;td>调用特殊实例方法&lt;/td>
&lt;td>包括实例初始化方法、父类方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invokedynamic&lt;/td>
&lt;td>由用户引导方法决定&lt;/td>
&lt;td>运行时动态解析出调用点限定符所引用方法&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="方法返回">方法返回&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法返回&lt;/th>
&lt;th>含义&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ireturn&lt;/td>
&lt;td>当前方法返回int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lreturn&lt;/td>
&lt;td>当前方法返回long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>freturn&lt;/td>
&lt;td>当前方法返回float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dreturn&lt;/td>
&lt;td>当前方法返回double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>areturn&lt;/td>
&lt;td>当前方法返回ref&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="对象和数组">对象和数组&lt;/h4>
&lt;ul>
&lt;li>创建类实例： new&lt;/li>
&lt;li>创建数组：newarray、anewarray、multianewarray&lt;/li>
&lt;li>数组元素 加载到 操作数栈：xaload (x可为b,c,s,i,l,f,d,a)&lt;/li>
&lt;li>操作数栈的值 存储到数组元素： xastore (x可为b,c,s,i,l,f,d,a)&lt;/li>
&lt;li>数组长度：arraylength&lt;/li>
&lt;li>类实例类型：instanceof、checkcast&lt;/li>
&lt;/ul>
&lt;h3 id="23-运算指令">2.3 运算指令&lt;/h3>
&lt;p>运算指令是用于对操作数栈上的两个数值进行某种运算，并把结果重新存入到操作栈顶。Java虚拟机只支持整型和浮点型两类数据的运算指令，所有指令如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算&lt;/th>
&lt;th>int&lt;/th>
&lt;th>long&lt;/th>
&lt;th>float&lt;/th>
&lt;th>double&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>加法&lt;/td>
&lt;td>iadd&lt;/td>
&lt;td>ladd&lt;/td>
&lt;td>fadd&lt;/td>
&lt;td>dadd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>减法&lt;/td>
&lt;td>isub&lt;/td>
&lt;td>lsub&lt;/td>
&lt;td>fsub&lt;/td>
&lt;td>dsub&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>乘法&lt;/td>
&lt;td>imul&lt;/td>
&lt;td>lmul&lt;/td>
&lt;td>fmul&lt;/td>
&lt;td>dmul&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>除法&lt;/td>
&lt;td>idiv&lt;/td>
&lt;td>ldiv&lt;/td>
&lt;td>fdiv&lt;/td>
&lt;td>ddiv&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>求余&lt;/td>
&lt;td>irem&lt;/td>
&lt;td>lrem&lt;/td>
&lt;td>frem&lt;/td>
&lt;td>drem&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>取反&lt;/td>
&lt;td>ineg&lt;/td>
&lt;td>lneg&lt;/td>
&lt;td>fneg&lt;/td>
&lt;td>dneg&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>其他运算：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>位移：ishl,ishr,iushr,lshl,lshr,lushr&lt;/li>
&lt;li>按位或： ior,lor&lt;/li>
&lt;li>按位与： iand, land&lt;/li>
&lt;li>按位异或： ixor, lxor&lt;/li>
&lt;li>自增：iin&lt;/li>
&lt;li>比较：dcmpg,dcmpl,fcmpg,fcmpl,lcmp&lt;/li>
&lt;/ul>
&lt;h3 id="24-类型转换">2.4 类型转换&lt;/h3>
&lt;p>类型转换用于将两种不同类型的数值进行转换。&lt;/p>
&lt;p>(1) 对于宽化类型转换(小范围向大范围转换)，无需显式的转换指令，并且是安全的操作。各种范围从小到大依次排序： int, long, float, double。&lt;/p>
&lt;p>(2)对于窄化类型转换，必须显式地调用类型转换指令，并且该过程很可能导致精度丢失。转换规则中需要特别注意的是当浮点值为NaN, 则转换结果为int或long的0。虽然窄化运算可能会发生上/下限溢出和精度丢失等情况，但虚拟机规范明确规定窄化转换U不可能导致虚拟机抛出异常。&lt;/p>
&lt;p>类型转换指令：&lt;code>i2b, i2c,f2i&lt;/code>等等。&lt;/p>
&lt;h3 id="25-流程控制">2.5 流程控制&lt;/h3>
&lt;p>控制指令是指有条件或无条件地修改PC寄存器的值，从而达到控制流程的目标&lt;/p>
&lt;ul>
&lt;li>条件分支：ifeq、iflt、ifnull、ifnonnull等&lt;/li>
&lt;li>复合分支：tableswitch、lookupswitch&lt;/li>
&lt;li>无条件分支：goto、goto_w、jsr、jsr_w、ret&lt;/li>
&lt;/ul>
&lt;h3 id="26-同步与异常">2.6 同步与异常&lt;/h3>
&lt;p>&lt;strong>异常：&lt;/strong>&lt;/p>
&lt;p>Java程序显式抛出异常： athrow指令。在Java虚拟机中，处理异常(catch语句)不是由字节码指令来实现，而是采用异常表来完成。&lt;/p>
&lt;p>&lt;strong>同步：&lt;/strong>&lt;/p>
&lt;p>方法级的同步和方法内部分代码的同步，都是依靠管程(Monitor)来实现的。&lt;/p>
&lt;p>Java语言使用synchronized语句块，那么Java虚拟机的指令集中通过monitorenter和monitorexit两条指令来完成synchronized的功能。为了保证monitorenter和monitorexit指令一定能成对的调用（不管方法正常结束还是异常结束），编译器会自动生成一个异常处理器，该异常处理器的主要目的是用于执行monitorexit指令。&lt;/p>
&lt;h3 id="27-小结">2.7 小结&lt;/h3>
&lt;p>在基于堆栈的的虚拟机中，指令的主战场便是操作数栈，除了load是从局部变量表加载数据到操作数栈以及store储存数据到局部变量表，其余指令基本都是用于操作数栈的。&lt;/p></description></item><item><title>JVM系列2 Class文件格式</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link><pubDate>Fri, 10 Apr 2020 11:02:39 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>Java编译过程是将Java文件转换为Claaa文件，从而实现了跨平台的功能， 本文详细讲述Class文件结构。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一-概述">一、 概述&lt;/h2>
&lt;p>计算机只能识别0和1，所以大家编写的程序都需要经过编译器，转换为由0和1组成的二进制本地机器码(Native Code)。随着虚拟机的不断发展，很多程序语言开始选择与操作系统和机器指令集无关的格式作为编译后的存储格式（Class文件），从而实现”Write Once, Run Anywhere”。 Java设计之初，考虑后期能让Java虚拟机运行其他语言，目前有越来越多的其他语言都可以直接需要在Java虚拟机，虚拟机只能识别Class文件，至于是由何种语言编译而来的，虚拟机并不关心，如下图：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200410110400.png" alt="Jvm_class_loading_1">&lt;/p>
&lt;p>可以看出不管是由Java语言，还是JRuby等其他语言，只能能生成.class字节码文件，就都可以运行在Java虚拟机上。故发布规范文档时，Java规范拆分为Java语言规范和Java虚拟机规范。&lt;/p>
&lt;p>Java语法中定义各种变量、关键字、运算符的语义最终由多个字节码命令组合而成。因此字节码命令所能提供的语义描述能力必然要比Java语言本身更加强大。&lt;/p>
&lt;h2 id="二class组成">二、Class组成&lt;/h2>
&lt;p>Class文件是一组以8位字节为单位的二进制流，中间没有任何分隔符，非常紧凑。 当需要占用8位以上的数据时，会按照Big-endian顺序，高位在前，低位在后的方式来分割成多个8位字节来存储。&lt;/p>
&lt;ul>
&lt;li>任何一个Class文件都对应着唯一的类或接口的定义信息；&lt;/li>
&lt;li>类或接口并不一定定义在文件里，也可以通过类加载器直接生成。&lt;/li>
&lt;/ul>
&lt;p>Java虚拟机规范规定：Class文件格式采用伪结构来存储数据，伪结构中只有无符号数和表这两种数据类型。&lt;/p>
&lt;ul>
&lt;li>无符号数：是基本数据类型，以u1、u2、u4、u8分别代表1个字节、2个字节、4个字节、8个字节的无符号数。无符号数用于描述数字、索引引用、数量值、字符串值。&lt;/li>
&lt;li>表：是由多个无符号数或者子表作为数据项构成的符合数据类型。用于描述有层次关系的复合结构的数据。整个Class其实就是一张表。&lt;/li>
&lt;/ul>
&lt;h3 id="21-相关概念">2.1 相关概念&lt;/h3>
&lt;p>下面介绍几个概述：&lt;/p>
&lt;h4 id="全限定名">全限定名&lt;/h4>
&lt;p>是指把类全名中的“.”号，用“/”号替换，并且在最后加入一个“；”分号后生成的名称。比如&lt;code>java.lang.Object&lt;/code>对应的全限定名为&lt;code>java/lang/Object;&lt;/code> 。&lt;/p>
&lt;h4 id="简单名">简单名&lt;/h4>
&lt;p>这个比较好理解，就是直接的方法名或者字段。比如&lt;code>toString()&lt;/code>方法，不需要包名作为前缀了。&lt;/p>
&lt;h4 id="字段描述符">字段描述符&lt;/h4>
&lt;p>用于描述字段的数据类型。&lt;/p>
&lt;p>规则如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>基本类型字符&lt;/th>
&lt;th>对应类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>B&lt;/td>
&lt;td>byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>C&lt;/td>
&lt;td>char&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>I&lt;/td>
&lt;td>int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>S&lt;/td>
&lt;td>short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>J&lt;/td>
&lt;td>long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Z&lt;/td>
&lt;td>boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>V&lt;/td>
&lt;td>void&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>L+classname +;&lt;/td>
&lt;td>对象类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>[&lt;/td>
&lt;td>数组类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>例如：&lt;/p>
&lt;ul>
&lt;li>基本类型：int ==&amp;gt; I&lt;/li>
&lt;li>对象类型：String ==&amp;gt; Ljava/lang/String;&lt;/li>
&lt;li>数组类型：long[] ==&amp;gt; [J&lt;/li>
&lt;/ul>
&lt;h4 id="方法描述符">方法描述符&lt;/h4>
&lt;p>用来描述方法的参数列表(数量、类型以及顺序)和返回值。&lt;/p>
&lt;p>格式：(参数描述符列表)返回值描述符:
例如：&lt;code>Object m(int i, double d, Thread t) {..}&lt;/code> ==&amp;gt; &lt;code>IDLjava/lang/Thread;)Ljava/lang/Object;&lt;/code>&lt;/p>
&lt;h3 id="22-classfile结构">2.2 ClassFile结构&lt;/h3>
&lt;p>一个Class类文件是由一个ClassFile结构组成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ClassFile &lt;span class="o">{&lt;/span>
u4 magic&lt;span class="p">;&lt;/span> //魔数，固定值0xCAFEBABE
u2 minor_version&lt;span class="p">;&lt;/span> //次版本号
u2 major_version&lt;span class="p">;&lt;/span> //主版本号
u2 constant_pool_count&lt;span class="p">;&lt;/span> //常量的个数
cp_info constant_pool&lt;span class="o">[&lt;/span>constant_pool_count-1&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的常量池内容
u2 access_flags&lt;span class="p">;&lt;/span> //访问标识
u2 this_class&lt;span class="p">;&lt;/span> //当前类索引
u2 super_class&lt;span class="p">;&lt;/span> //父类索引
u2 interfaces_count&lt;span class="p">;&lt;/span> //接口的个数
u2 interfaces&lt;span class="o">[&lt;/span>interfaces_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的接口内容
u2 fields_count&lt;span class="p">;&lt;/span> //字段的个数
field_info fields&lt;span class="o">[&lt;/span>fields_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的字段内容
u2 methods_count&lt;span class="p">;&lt;/span> //方法的个数
method_info methods&lt;span class="o">[&lt;/span>methods_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的方法内容
u2 attributes_count&lt;span class="p">;&lt;/span> //属性的个数
attribute_info attributes&lt;span class="o">[&lt;/span>attributes_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的属性内容
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>一个Class文件的大小：26 + cp_info[] + u2[] + field_info[] + method_info[] + attribute_info[]&lt;/p>
&lt;p>接下来，将具体来介绍ClassFile文件的各个组成部分。&lt;/p>
&lt;h2 id="三classfile文件组成">三、ClassFile文件组成&lt;/h2>
&lt;h3 id="31-魔数">3.1 魔数&lt;/h3>
&lt;p>每个Class文件头4个字节称为魔数(Magic Number),作用是用于确定这个Class文件是否能被虚拟机所接受，魔数固定值0xCAFEBABE。这是身份识别，比如jpeg等图片文件头也会有魔数。&lt;/p>
&lt;h3 id="32-版本号">3.2 版本号&lt;/h3>
&lt;p>紧跟魔数，也占用4个字节。从第5字节到第8字节存储的分别是 次版本号，主版本号。&lt;/p>
&lt;h3 id="33-常量池">3.3 常量池&lt;/h3>
&lt;p>常量池是Class文件空间最大的数据项之一，长度不固定。&lt;/p>
&lt;p>a. 常量池长度 用u2类型代表常量池容量计数值，u2紧跟版本号。u2的大小等于常量池的常量个数+1。对于u2=0的特殊情况，代表没有使用常量池。&lt;/p>
&lt;p>b. 常量池内容,格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">cp_info &lt;span class="o">{&lt;/span>
u1 tag&lt;span class="p">;&lt;/span>
u1 info&lt;span class="o">[]&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>包括两个类常量，字面量和符号引用：&lt;/p>
&lt;ul>
&lt;li>字面量：与Java语言层面的常量概念相近，包含文本字符串、声明为final的常量值等。&lt;/li>
&lt;li>符号引用：编译语言层面的概念，包括以下3类：
&lt;ul>
&lt;li>类和接口的全限定名&lt;/li>
&lt;li>字段的名称和描述符&lt;/li>
&lt;li>方法的名称和描述符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>常量池中每一项常量都是一个表结构，每个表的开始第一位是u1类型的标志位tag, 代表当前这个常量的类型。在JDK 1.7.中共有14种不同的表结构的类型，如下：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200410110900.png" alt="constant_type">&lt;/p>
&lt;p>Class文件都是二进制格式，可通过&lt;code>Jdk/bin/javap.exe&lt;/code>工具，分析Class文件字节码。关于javap用法，可通过&lt;code>javap --help&lt;/code>来查看。&lt;/p>
&lt;h3 id="34-访问标识">3.4 访问标识&lt;/h3>
&lt;p>2个字节代表，标示用于识别一些类或者接口层次的访问信息.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标识名&lt;/th>
&lt;th>标识值&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>声明为public;可以从包外部访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>被声明为final;不允许子类修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SUPER&lt;/td>
&lt;td>0x0020&lt;/td>
&lt;td>当被invokespecial指令调用时，将特殊对待父类的方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_INTERFACE&lt;/td>
&lt;td>0x0200&lt;/td>
&lt;td>接口标识符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ABSTRACT&lt;/td>
&lt;td>0x0400&lt;/td>
&lt;td>声明为abstract;不能被实例化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>声明为synthetic;不存在于源代码，由编译器生成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ANNOTATION&lt;/td>
&lt;td>0x2000&lt;/td>
&lt;td>声明为注释类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ENUM&lt;/td>
&lt;td>0x4000&lt;/td>
&lt;td>声明为枚举类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="35-类父类索引">3.5 类/父类索引&lt;/h3>
&lt;p>当前类索引和父类索引占用大小都为u2类型，由于一个类智能继承一个父类，故父类索引只有一个。除了java.lang.Object对象的父类索引为0，其他所有类都有父类。&lt;/p>
&lt;h3 id="36-接口索引">3.6 接口索引&lt;/h3>
&lt;p>一个类可以实现多个接口，故利用interfaces_count来记录该类所实现的接口个数，interfaces[interfaces_count]来记录所有实现的接口内容。&lt;/p>
&lt;h3 id="37-字段表">3.7 字段表&lt;/h3>
&lt;p>字段表用于描述类或接口中声明的变量，格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">field_info &lt;span class="o">{&lt;/span>
u2 access_flags&lt;span class="p">;&lt;/span> //访问标识
u2 name_index&lt;span class="p">;&lt;/span> //名称索引
u2 descriptor_index&lt;span class="p">;&lt;/span> //描述符索引
u2 attributes_count&lt;span class="p">;&lt;/span> //属性个数
attribute_info attributes&lt;span class="o">[&lt;/span>attributes_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //属性表的具体内容
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>字段访问标识如下：(表中加粗项是字段独有的)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标识名&lt;/th>
&lt;th>标识值&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>声明为 public; 可以从包外部访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PRIVATE&lt;/td>
&lt;td>0x0002&lt;/td>
&lt;td>声明为 private; 只有定义的类可以访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PROTECTED&lt;/td>
&lt;td>0x0004&lt;/td>
&lt;td>声明为 protected;只有子类和相同package的类可访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_STATIC&lt;/td>
&lt;td>0x0008&lt;/td>
&lt;td>声明为 static；属于类变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>声明为 final; 对象构造后无法直接修改值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_VOLATILE&lt;/strong>&lt;/td>
&lt;td>0x0040&lt;/td>
&lt;td>声明为 volatile; 不会被缓存,直接刷新到主屏幕&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_TRANSIENT&lt;/strong>&lt;/td>
&lt;td>0x0080&lt;/td>
&lt;td>声明为 transient; 不能被序列化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>声明为 synthetic; 不存在于源代码，由编译器生成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_ENUM&lt;/td>
&lt;td>0x4000&lt;/td>
&lt;td>声明为enum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Java语法中，接口中的字段默认包含ACC_PUBLIC, ACC_STATIC, ACC_FINAL标识。ACC_FINAL，ACC_VOLATILE不能同时选择等规则。&lt;/p>
&lt;p>紧跟其后的name_index和descriptor_index是对常量池的引用，分别代表着字段的简单名和方法的描述符。&lt;/p>
&lt;h3 id="38-方法表">3.8 方法表&lt;/h3>
&lt;p>方法表用于描述类或接口中声明的方法，格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">method_info &lt;span class="o">{&lt;/span>
u2 access_flags&lt;span class="p">;&lt;/span> //访问标识
u2 name_index&lt;span class="p">;&lt;/span> //名称索引
u2 descriptor_index&lt;span class="p">;&lt;/span> //描述符索引
u2 attributes_count&lt;span class="p">;&lt;/span> //属性个数
attribute_info attributes&lt;span class="o">[&lt;/span>attributes_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //属性表的具体内容
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方法访问标识如下：(表中加粗项是方法独有的)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>标识名&lt;/th>
&lt;th>标识值&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ACC_PUBLIC&lt;/td>
&lt;td>0x0001&lt;/td>
&lt;td>声明为 public; 可以从包外部访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PRIVATE&lt;/td>
&lt;td>0x0002&lt;/td>
&lt;td>声明为 private; 只有定义的类可以访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_PROTECTED&lt;/td>
&lt;td>0x0004&lt;/td>
&lt;td>声明为 protected;只有子类和相同package的类可访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_STATIC&lt;/td>
&lt;td>0x0008&lt;/td>
&lt;td>声明为 static；属于类变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_FINAL&lt;/td>
&lt;td>0x0010&lt;/td>
&lt;td>声明为 final; 不能被覆写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_SYNCHRONIZED&lt;/strong>&lt;/td>
&lt;td>0x0020&lt;/td>
&lt;td>声明为 synchronized; 同步锁包裹&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_BRIDGE&lt;/td>
&lt;td>0x0040&lt;/td>
&lt;td>桥接方法, 由编译器生成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_VARARGS&lt;/strong>&lt;/td>
&lt;td>0x0080&lt;/td>
&lt;td>声明为 接收不定长参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_NATIVE&lt;/strong>&lt;/td>
&lt;td>0x0100&lt;/td>
&lt;td>声明为 native; 由非Java语言来实现&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_ABSTRACT&lt;/strong>&lt;/td>
&lt;td>0x0400&lt;/td>
&lt;td>声明为 abstract; 没有提供实现&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>ACC_STRICT&lt;/strong>&lt;/td>
&lt;td>0x0800&lt;/td>
&lt;td>声明为 strictfp; 浮点模式是FP-strict&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ACC_SYNTHETIC&lt;/td>
&lt;td>0x1000&lt;/td>
&lt;td>声明为 synthetic; 不存在于源代码，由编译器生成&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>对于方法里的Java代码，进过编译器编译成字节码指令后，存放在方法属性表集合中“code”的属性内。&lt;/li>
&lt;li>当子类没有覆写父类方法，则方法集合中不会出现父类的方法信息。&lt;/li>
&lt;li>Java语言中重载方法，必须与原方法同名，且特征签名不同。特征签名是指方法中各个参数在常量池的字段符号引用的集合，不包括返回值。当时Class文件格式中，特征签名范围更广，允许方法名和特征签名都相同，但返回值不同的方法，合法地共存子啊同一个Class文件中&lt;/li>
&lt;/ul>
&lt;h3 id="39-属性表">3.9 属性表&lt;/h3>
&lt;p>属性表格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">attribute_info &lt;span class="o">{&lt;/span>
u2 attribute_name_index&lt;span class="p">;&lt;/span> //属性名索引
u4 attribute_length&lt;span class="p">;&lt;/span> //属性长度
u1 info&lt;span class="o">[&lt;/span>attribute_length&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //属性的具体内容
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>属性表的限制相对宽松，不需要各个属性表有严格的顺序，只有不与已有的属性名重复，任何自定义的编译器都可以向属性表中写入自定义的属性信息，Java虚拟机运行时会忽略掉无法识别的属性。 关于虚拟机规范中预定义的属性，这里不展开讲了，列举几个常用的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性名&lt;/th>
&lt;th>使用位置&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Code&lt;/td>
&lt;td>方法表&lt;/td>
&lt;td>方法体的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ConstantValue&lt;/td>
&lt;td>字段表&lt;/td>
&lt;td>final关键字定义的常量值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Deprecated&lt;/td>
&lt;td>类、方法表、字段表&lt;/td>
&lt;td>声明为deprecated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>InnerClasses&lt;/td>
&lt;td>类文件&lt;/td>
&lt;td>内部类的列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LineNumberTable&lt;/td>
&lt;td>Code属性&lt;/td>
&lt;td>Java源码的行号与字节码指令的对应关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>LocalVariableTable&lt;/td>
&lt;td>Code属性&lt;/td>
&lt;td>方法的局部变量描述&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Signature&lt;/td>
&lt;td>类、方法表、字段表&lt;/td>
&lt;td>用于支持泛型的方法签名，由于Java的泛型采用擦除法，避免类型信息被擦除后导致签名混乱，Signature记录相关信息&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Code属性&lt;/strong> java程序方法体中的代码，经编译后得到的字节码指令存储在Code属性内，Code属性位于方法表的属性集合中。但与native或者abstract的方法则不会存在Code属性中。&lt;/p>
&lt;p>Code属性的格式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Code_attribute &lt;span class="o">{&lt;/span>
u2 attribute_name_index&lt;span class="p">;&lt;/span> //常量池中的uft8类型的索引，值固定为”Code“
u4 attribute_length&lt;span class="p">;&lt;/span> //属性值长度，为整个属性表长度-6
u2 max_stack&lt;span class="p">;&lt;/span> //操作数栈的最大深度值，jvm运行时根据该值佩服栈帧
u2 max_locals&lt;span class="p">;&lt;/span> //局部变量表最大存储空间，单位是slot
u4 code_length&lt;span class="p">;&lt;/span> // 字节码指令的个数
u1 code&lt;span class="o">[&lt;/span>code_length&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> // 具体的字节码指令
u2 exception_table_length&lt;span class="p">;&lt;/span> //异常的个数
&lt;span class="o">{&lt;/span> u2 start_pc&lt;span class="p">;&lt;/span>
u2 end_pc&lt;span class="p">;&lt;/span>
u2 handler_pc&lt;span class="p">;&lt;/span> //当字节码在&lt;span class="o">[&lt;/span>start_pc, end_pc&lt;span class="o">)&lt;/span>区间出现catch_type或子类，则转到handler_pc行继续处理。
u2 catch_type&lt;span class="p">;&lt;/span> //当catch_type&lt;span class="o">=&lt;/span>0，则任意异常都需转到handler_pc处理
&lt;span class="o">}&lt;/span> exception_table&lt;span class="o">[&lt;/span>exception_table_length&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的异常内容
u2 attributes_count&lt;span class="p">;&lt;/span> //属性的个数
attribute_info attributes&lt;span class="o">[&lt;/span>attributes_count&lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> //具体的属性内容
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>slot是虚拟机未局部变量分配内存使用的最小单位。对于byte/char/float/int/short/boolean/returnAddress等长度不超过32位的局部变量，每个占用1个Slot；对于long和double这两种64位的数据类型则需要2个Slot来存放。&lt;/li>
&lt;li>实例方法中有隐藏参数this, 显式异常处理器的参数，方法体定义的局部变量都使用局部变量表来存放。&lt;/li>
&lt;li>max_locals，不是所有局部变量所占Slot之和，因为Slot可以重用，javac编译器会根据变量的作用域来分配Slot给各个变量使用，从而计算出max_locals大小。&lt;/li>
&lt;li>虚拟机规范限制严格方法不允许超过65535个字节码，否则拒绝编译。&lt;/li>
&lt;/ul>
&lt;p>Code属性是Class文件中最重要的属性，Java程序的幸福课分为代码(方法体中的Java代码)和元数据(包含类、接口、字段、方法定义以及其他信息)两部分。&lt;/p>
&lt;p>&lt;strong>ConstantValue属性&lt;/strong> ConstantValue属性是指被static关键字修饰的变量（也称为类变量）。&lt;/p>
&lt;ul>
&lt;li>类变量: 在类构造器方法或者使用ConstantValue属性来赋值&lt;/li>
&lt;li>实例变量：在实例构造器方法进行赋值&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>参考资料&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://docs.oracle.com/javase/specs/jvms/se7/html/">https://docs.oracle.com/javase/specs/jvms/se7/html/&lt;/a>&lt;/li>
&lt;li>Java语言规范《The Java Language Specification》&lt;/li>
&lt;li>Java虚拟机规范《The Java Virtual Machine Specification》&lt;/li>
&lt;/ol>
&lt;/blockquote></description></item><item><title>JVM系列1 运行时内存结构</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 10 Apr 2020 10:50:16 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</guid><description>&lt;blockquote>
&lt;p>java是在java虚拟机上运行，一般地大家讲到的Java运行时内存结构其实就是Jvm内存&lt;/p>
&lt;/blockquote>
&lt;h2 id="一运行时内存结构">一、运行时内存结构&lt;/h2>
&lt;p>Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，故Java运行时内存结构，也就是指Java虚拟机的运行时内存结构。&lt;/p>
&lt;p>作为Java开发人员来说，并不需要像C/C++开发人员，需要时刻注意内存的释放，而是全权交给虚拟机去管理，那么有就必要了解虚拟机的运行时内存是如何构成的。运行时内存模型，分为线程私有和共享数据区两大类，其中线程私有的数据区包含程序计数器、虚拟机栈、本地方法区，所有线程共享的数据区包含Java堆、方法区，在方法区内有一个常量池。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329132205.png" alt="jvm_memory_1">&lt;/p>
&lt;p>（1）线程私有区：&lt;/p>
&lt;ul>
&lt;li>程序计数器，记录正在执行的虚拟机字节码的地址；&lt;/li>
&lt;li>虚拟机栈：方法执行的内存区，每个方法执行时会在虚拟机栈中创建栈帧；&lt;/li>
&lt;li>本地方法栈：虚拟机的Native方法执行的内存区；&lt;/li>
&lt;/ul>
&lt;p>（2）线程共享区：&lt;/p>
&lt;ul>
&lt;li>Java堆：对象分配内存的区域；&lt;/li>
&lt;li>方法区：存放类信息、常量、静态变量、编译器编译后的代码等数据；&lt;/li>
&lt;li>常量池：存放编译器生成的各种字面量和符号引用，是方法区的一部分。&lt;/li>
&lt;/ul>
&lt;p>对于大多数的程序员来说，Java内存比较流行的说法便是堆和栈，这其实是非常粗略的一种划分，这种划分的”堆”对应内存模型的Java堆，”栈”是指虚拟机栈，然而Java内存模型远比这更复杂，想深入了解Java的内存，还是有必要明白整个内存模型。&lt;/p>
&lt;h2 id="二-结构详解">二、 结构详解&lt;/h2>
&lt;p>运行时内存分为五大块区域（常量池属于方法区，算作一块区域），前面简要介绍了每个区域的功能，那接下来再详细说明每个区域的内容，Java内存总体结构图如下：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200410105300.png" alt="stack_heap_info">&lt;/p>
&lt;h3 id="21-程序计数器pc">2.1 程序计数器PC&lt;/h3>
&lt;p>程序计数器PC，当前线程所执行的字节码行号指示器。每个线程都有自己计数器，是私有内存空间，该区域是整个内存中较小的一块。&lt;/p>
&lt;p>当线程正在执行一个Java方法时，PC计数器记录的是正在执行的虚拟机字节码的地址；当线程正在执行的一个Native方法时，PC计数器则为空（Undefined）。&lt;/p>
&lt;h3 id="22-虚拟机栈">2.2 虚拟机栈&lt;/h3>
&lt;p>虚拟机栈，生命周期与线程相同，是Java方法执行的内存模型。每个方法(不包含native方法)执行的同时都会创建一个栈帧结构，方法执行过程，对应着虚拟机栈的入栈到出栈的过程。&lt;/p>
&lt;p>&lt;strong>栈帧(Stack Frame)结构&lt;/strong>&lt;/p>
&lt;p>栈帧是用于支持虚拟机进行方法执行的数据结构，是属性运行时数据区的虚拟机栈的栈元素。见上图， 栈帧包括：&lt;/p>
&lt;ol>
&lt;li>局部变量表 (locals大小，编译期确定)，一组变量存储空间， 容量以slot为最小单位。&lt;/li>
&lt;li>操作栈(stack大小，编译期确定)，操作栈元素的数据类型必须与字节码指令序列严格匹配&lt;/li>
&lt;li>动态连接， 指向运行时常量池中该栈帧所属方法的引用，为了 动态连接使用。
&lt;ul>
&lt;li>前面的解析过程其实是静态解析；&lt;/li>
&lt;li>对于运行期转化为直接引用，称为动态解析。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>方法返回地址
&lt;ul>
&lt;li>正常退出，执行引擎遇到方法返回的字节码，将返回值传递给调用者&lt;/li>
&lt;li>异常退出，遇到Exception,并且方法未捕捉异常，那么不会有任何返回值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>额外附加信息，虚拟机规范没有明确规定，由具体虚拟机实现。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>异常(Exception)&lt;/strong>&lt;/p>
&lt;p>Java虚拟机规范规定该区域有两种异常：&lt;/p>
&lt;ul>
&lt;li>StackOverFlowError：当线程请求栈深度超出虚拟机栈所允许的深度时抛出&lt;/li>
&lt;li>OutOfMemoryError：当Java虚拟机动态扩展到无法申请足够内存时抛出&lt;/li>
&lt;/ul>
&lt;h3 id="23-本地方法栈">2.3 本地方法栈&lt;/h3>
&lt;p>本地方法栈则为虚拟机使用到的Native方法提供内存空间，而前面讲的虚拟机栈式为Java方法提供内存空间。有些虚拟机的实现直接把本地方法栈和虚拟机栈合二为一，比如非常典型的Sun HotSpot虚拟机。&lt;/p>
&lt;p>&lt;strong>异常(Exception)&lt;/strong>：Java虚拟机规范规定该区域可抛出StackOverFlowError和OutOfMemoryError。&lt;/p>
&lt;h3 id="24-java堆">2.4 Java堆&lt;/h3>
&lt;p>Java堆，是Java虚拟机管理的最大的一块内存，也是GC的主战场，里面存放的是几乎所有的对象实例和数组数据。JIT编译器有栈上分配、标量替换等优化技术的实现导致部分对象实例数据不存在Java堆，而是栈内存。&lt;/p>
&lt;ul>
&lt;li>从内存回收角度，Java堆被分为新生代和老年代；这样划分的好处是为了更快的回收内存；&lt;/li>
&lt;li>从内存分配角度，Java堆可以划分出线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB)；这样划分的好处是为了更快的分配内存；&lt;/li>
&lt;/ul>
&lt;p>对象创建的过程是在堆上分配着实例对象，那么对象实例的具体结构如下：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200410105400.png" alt="java_object">&lt;/p>
&lt;p>对于填充数据不是一定存在的，仅仅是为了字节对齐。HotSpot VM的自动内存管理要求对象起始地址必须是8字节的整数倍。对象头本身是8的倍数，当对象的实例数据不是8的倍数，便需要填充数据来保证8字节的对齐。该功能类似于高速缓存行的对齐。&lt;/p>
&lt;p>另外，关于在堆上内存分配是并发进行的，虚拟机采用CAS加失败重试保证原子操作，或者是采用每个线程预先分配TLAB内存.&lt;/p>
&lt;p>&lt;strong>异常(Exception)&lt;/strong>：Java虚拟机规范规定该区域可抛出OutOfMemoryError。&lt;/p>
&lt;h3 id="25-方法区">2.5 方法区&lt;/h3>
&lt;p>方法区主要存放的是已被虚拟机加载的类信息、常量、静态变量、编译器编译后的代码等数据。GC在该区域出现的比较少。&lt;/p>
&lt;p>&lt;strong>异常(Exception)&lt;/strong>：Java虚拟机规范规定该区域可抛出OutOfMemoryError。&lt;/p>
&lt;h3 id="26-运行时常量池">2.6 运行时常量池&lt;/h3>
&lt;p>运行时常量池也是方法区的一部分，用于存放编译器生成的各种字面量和符号引用。运行时常量池除了编译期产生的Class文件的常量池，还可以在运行期间，将新的常量加入常量池，比较常见的是String类的intern()方法。&lt;/p>
&lt;ul>
&lt;li>字面量：与Java语言层面的常量概念相近，包含文本字符串、声明为final的常量值等。&lt;/li>
&lt;li>符号引用：编译语言层面的概念，包括以下3类：
&lt;ul>
&lt;li>类和接口的全限定名&lt;/li>
&lt;li>字段的名称和描述符&lt;/li>
&lt;li>方法的名称和描述符&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>但是该区域不会抛出OutOfMemoryError异常。&lt;/p></description></item><item><title>SpringBoot注解大全</title><link>https://blog.itning.top/post/2020/03/31/springboot%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/</link><pubDate>Tue, 31 Mar 2020 10:15:41 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/31/springboot%E6%B3%A8%E8%A7%A3%E5%A4%A7%E5%85%A8/</guid><description>&lt;h2 id="一注解annotations列表">一、注解(annotations)列表&lt;/h2>
&lt;p>&lt;strong>@SpringBootApplication&lt;/strong>：&lt;/p>
&lt;p>包含了@ComponentScan、@Configuration和@EnableAutoConfiguration注解。&lt;/p>
&lt;p>其中@ComponentScan让spring Boot扫描到Configuration类并把它加入到程序上下文。&lt;/p>
&lt;p>&lt;strong>@Configuration&lt;/strong> 等同于spring的XML配置文件；使用Java代码可以检查类型安全。&lt;/p>
&lt;p>&lt;strong>@EnableAutoConfiguration&lt;/strong> 自动配置。&lt;/p>
&lt;p>&lt;strong>@ComponentScan&lt;/strong> 组件扫描，可自动发现和装配一些Bean。&lt;/p>
&lt;p>&lt;strong>@Component&lt;/strong>可配合CommandLineRunner使用，在程序启动后执行一些基础任务。&lt;/p>
&lt;p>&lt;strong>@RestController&lt;/strong>注解是@Controller和@ResponseBody的合集,表示这是个控制器bean,并且是将函数的返回值直 接填入HTTP响应体中,是REST风格的控制器。&lt;/p>
&lt;p>&lt;strong>@Autowired&lt;/strong>自动导入。&lt;/p>
&lt;p>&lt;strong>@PathVariable&lt;/strong>获取参数。&lt;/p>
&lt;p>&lt;strong>@JsonBackReference&lt;/strong>解决嵌套外链问题。&lt;/p>
&lt;p>&lt;strong>@RepositoryRestResourcepublic&lt;/strong>配合spring-boot-starter-data-rest使用。&lt;/p>
&lt;h2 id="二注解annotations详解">二、注解(annotations)详解&lt;/h2>
&lt;p>&lt;strong>@SpringBootApplication&lt;/strong>：申明让spring boot自动给程序进行必要的配置，这个配置等同于：@Configuration ，@EnableAutoConfiguration 和 @ComponentScan 三个配置。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.example.myproject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.SpringApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@SpringBootApplication&lt;/span> &lt;span class="c1">// same as @Configuration @EnableAutoConfiguration @ComponentScan
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Application&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">SpringApplication&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Application&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@ResponseBody&lt;/strong>：表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，用于构建RESTful的api。&lt;/p>
&lt;p>在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。&lt;/p>
&lt;p>比如异步获取json数据，加上@responsebody后，会直接返回json数据。&lt;/p>
&lt;p>该注解一般会配合@RequestMapping一起使用。示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@ResponseBody&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="n">ok&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@Controller&lt;/strong>：用于定义控制器类，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）&lt;/p>
&lt;p>一般这个注解在类中，通常方法需要配合注解@RequestMapping。&lt;/p>
&lt;p>示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Controller&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">demoInfo&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">publicclass&lt;/span> &lt;span class="n">DemoController&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DemoInfoService&lt;/span> &lt;span class="n">demoInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/hello&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">hello&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Map&lt;/span> &lt;span class="n">map&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;DemoController.hello()&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">map&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="s">&amp;#34;from TemplateController.helloHtml&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//会使用hello.html或者hello.ftl模板进行渲染显示.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="s">&amp;#34;/hello&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@RestController&lt;/strong>：用于标注控制层组件(如struts中的action)，@ResponseBody和@Controller的合集。&lt;/p>
&lt;p>示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">com.kfit.demo.web&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RequestMapping&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.bind.annotation.RestController&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@RestController&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">demoInfo2&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">publicclass&lt;/span> &lt;span class="n">DemoController2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/test&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="s">&amp;#34;ok&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@RequestMapping&lt;/strong>：提供路由信息，负责URL到Controller中的具体函数的映射。&lt;/p>
&lt;p>&lt;strong>@EnableAutoConfiguration&lt;/strong>：Spring Boot自动配置（auto-configuration）：尝试根据你添加的jar依赖自动配置你的Spring应用。&lt;/p>
&lt;p>例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。&lt;/p>
&lt;p>你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。&lt;/p>
&lt;p>如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性来禁用它们。&lt;/p>
&lt;p>&lt;strong>@ComponentScan&lt;/strong>：表示将该类自动发现扫描组件。&lt;/p>
&lt;p>个人理解相当于，如果扫描到有@Component、@Controller、@Service等这些注解的类，并注册为Bean，可以自动收集所有的Spring组件，包括@Configuration类。&lt;/p>
&lt;p>我们经常使用@ComponentScan注解搜索beans，并结合@Autowired注解导入。可以自动收集所有的Spring组件，包括@Configuration类。&lt;/p>
&lt;p>如果没有配置的话，Spring Boot会扫描启动类所在包下以及子包下的使用了@Service,@Repository等注解的类。&lt;/p>
&lt;p>&lt;strong>@Configuration&lt;/strong>：相当于传统的xml配置文件，如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。&lt;/p>
&lt;p>&lt;strong>@Import&lt;/strong>：用来导入其他配置类。&lt;/p>
&lt;p>&lt;strong>@ImportResource&lt;/strong>：用来加载xml配置文件。&lt;/p>
&lt;p>&lt;strong>@Autowired&lt;/strong>：自动导入依赖的bean&lt;/p>
&lt;p>&lt;strong>@Service&lt;/strong>：一般用于修饰service层的组件&lt;/p>
&lt;p>&lt;strong>@Repository&lt;/strong>：使用@Repository注解可以确保DAO或者repositories提供异常转译，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。&lt;/p>
&lt;p>&lt;strong>@Bean&lt;/strong>：用@Bean标注方法等价于XML中配置的bean。&lt;/p>
&lt;p>&lt;strong>@Value&lt;/strong>：注入Spring boot application.properties配置的属性的值。示例代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Value&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">“#&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@Inject&lt;/strong>：等价于默认的@Autowired，只是没有required属性；&lt;/p>
&lt;p>&lt;strong>@Component&lt;/strong>：泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。&lt;/p>
&lt;p>&lt;strong>@Bean&lt;/strong>：相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理。&lt;/p>
&lt;p>&lt;strong>@AutoWired&lt;/strong>：自动导入依赖的bean。byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。当加上（required=false）时，就算找不到bean也不报错。&lt;/p>
&lt;p>&lt;strong>@Qualifier&lt;/strong>：当有多个同一类型的Bean时，可以用@Qualifier(“name”)来指定。与@Autowired配合使用。@Qualifier限定描述符除了能根据名字进行注入，但能进行更细粒度的控制如何选择候选者，具体使用方式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Autowired&lt;/span>
&lt;span class="nd">@Qualifier&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="n">demoInfoService&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">DemoInfoService&lt;/span> &lt;span class="n">demoInfoService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>@Resource&lt;/strong>(name=”name”,type=”type”)：没有括号内内容的话，默认byName。与@Autowired干类似的事。&lt;/p>
&lt;h2 id="三jpa注解">三、JPA注解&lt;/h2>
&lt;p>&lt;strong>@Entity&lt;/strong>：@Table(name=”“)：表明这是一个实体类。一般用于jpa这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略&lt;/p>
&lt;p>&lt;strong>@MappedSuperClass&lt;/strong>:用在确定是父类的entity上。父类的属性子类可以继承。&lt;/p>
&lt;p>&lt;strong>@NoRepositoryBean&lt;/strong>:一般用作父类的repository，有这个注解，spring不会去实例化该repository。&lt;/p>
&lt;p>&lt;strong>@Column&lt;/strong>：如果字段名与列名相同，则可以省略。&lt;/p>
&lt;p>&lt;strong>@Id&lt;/strong>：表示该属性为主键。&lt;/p>
&lt;p>&lt;strong>@GeneratedValue&lt;/strong>(strategy=GenerationType.SEQUENCE,generator= “repair_seq”)：表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq。&lt;/p>
&lt;p>&lt;strong>@SequenceGeneretor&lt;/strong>(name = “repair_seq”, sequenceName = “seq_repair”, allocationSize = 1)：name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致。&lt;/p>
&lt;p>&lt;strong>@Transient&lt;/strong>：表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。&lt;/p>
&lt;p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。@Basic(fetch=FetchType.LAZY)：标记可以指定实体属性的加载方式&lt;/p>
&lt;p>&lt;strong>@JsonIgnore&lt;/strong>：作用是json序列化时将Java bean中的一些属性忽略掉,序列化和反序列化都受影响。&lt;/p>
&lt;p>&lt;strong>@JoinColumn&lt;/strong>（name=”loginId”）:一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。&lt;/p>
&lt;p>&lt;strong>@OneToOne、@OneToMany、@ManyToOne&lt;/strong>：对应hibernate配置文件中的一对一，一对多，多对一。&lt;/p>
&lt;h2 id="四springmvc相关注解">四、springMVC相关注解&lt;/h2>
&lt;p>&lt;strong>@RequestMapping&lt;/strong>：@RequestMapping(“/path”)表示该控制器处理所有“/path”的UR L请求。&lt;/p>
&lt;p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。&lt;/p>
&lt;p>用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。该注解有六个属性：&lt;/p>
&lt;p>&lt;strong>params&lt;/strong>:指定request中必须包含某些参数值是，才让该方法处理。&lt;/p>
&lt;p>&lt;strong>headers&lt;/strong>:指定request中必须包含某些指定的header值，才能让该方法处理请求。&lt;/p>
&lt;p>&lt;strong>value&lt;/strong>:指定请求的实际地址，指定的地址可以是URI Template 模式&lt;/p>
&lt;p>&lt;strong>method&lt;/strong>:指定请求的method类型， GET、POST、PUT、DELETE等&lt;/p>
&lt;p>&lt;strong>consumes&lt;/strong>:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;&lt;/p>
&lt;p>&lt;strong>produces&lt;/strong>:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回&lt;/p>
&lt;p>&lt;strong>@RequestParam&lt;/strong>：用在方法的参数前面。
@RequestParam
String a =request.getParameter(“a”)。&lt;/p>
&lt;p>&lt;strong>@PathVariable&lt;/strong>:路径变量。如&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">RequestMapping&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mac&lt;/span>&lt;span class="o">/{&lt;/span>&lt;span class="n">macAddress&lt;/span>&lt;span class="o">}&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">getByMacAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">macAddress&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="c1">//do something;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>参数与大括号里的名字一样要相同。&lt;/p>
&lt;h2 id="五全局异常处理">五、全局异常处理&lt;/h2>
&lt;p>&lt;strong>@ControllerAdvice&lt;/strong>：包含@Component。可以被扫描到。统一处理异常。&lt;/p>
&lt;p>&lt;strong>@ExceptionHandler&lt;/strong>（Exception.class）：用在方法上面表示遇到这个异常就执行以下方法。&lt;/p></description></item><item><title>推荐4款MySQL调优工具，大神都在用</title><link>https://blog.itning.top/post/2020/03/29/%E6%8E%A8%E8%8D%904%E6%AC%BEmysql%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E5%A4%A7%E7%A5%9E%E9%83%BD%E5%9C%A8%E7%94%A8/</link><pubDate>Sun, 29 Mar 2020 13:13:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/29/%E6%8E%A8%E8%8D%904%E6%AC%BEmysql%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7%E5%A4%A7%E7%A5%9E%E9%83%BD%E5%9C%A8%E7%94%A8/</guid><description>&lt;p>对于正在运行的mysql性能如何？参数设置的是否合理？账号设置的是否存在安全隐患是否了然于胸？&lt;/p>
&lt;p>俗话说工欲善其事，必先利其器，定期对你的&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;amp;mid=2247490727&amp;amp;idx=1&amp;amp;sn=4d64de037c0665c57ced6abf12a003ce&amp;amp;chksm=eb539991dc241087c19bd0e70dfda3d03861d00c7536066b09f0723d23d8562551975c44e851&amp;amp;scene=21#wechat_redirect">MYSQL&lt;/a>数据库进行一个体检，是保证数据库安全运行的重要手段。&lt;/p>
&lt;p>今天和大家分享几个mysql 优化的工具，你可以使用它们对你的mysql进行一个体检，生成awr报告，让你从整体上把握你的数据库的性能情况。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200129131600.webp" alt="影响数据库的因素">&lt;/p>
&lt;h3 id="1mysqltuner-pl">1、mysqltuner-pl&lt;/h3>
&lt;p>这是mysql一个常用的数据库性能诊断工具，主要检查参数设置的合理性包括日志文件、存储引擎、安全建议及性能分析。针对潜在的问题，给出改进的建议，是mysql优化的好帮手。&lt;/p>
&lt;p>在上一版本中，MySQLTuner支持MySQL / MariaDB / Percona Server的约300个指标。&lt;/p>
&lt;p>项目地址：https://github.com/major/MySQLTuner-perl&lt;/p>
&lt;p>&lt;strong>1.1 下载&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1">#wget https://raw.githubusercontent.com/major/MySQLTuner-perl/master/mysqltuner.pl&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>1.2 使用&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># ./mysqltuner.pl --socket /var/lib/mysql/mysql.sock &amp;gt;&amp;gt; MySQLTuner 1.7.4 - Major Hayden &amp;lt;major@mhtx.net&amp;gt; &amp;gt;&amp;gt; Bug reports, feature requests, and downloads at http://mysqltuner.com/ &amp;gt;&amp;gt; Run with &amp;#39;--help&amp;#39; for additional options and output filtering\[--\] Skipped version check for MySQLTuner scriptPlease enter your MySQL administrative login: rootPlease enter your MySQL administrative password: \[OK\] Currently running supported MySQL version 5.7.23\[OK\] Operating on 64-bit architecture&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>1.3、报告分析&lt;/strong>&lt;/p>
&lt;p>1）重要关注[!!]（中括号有叹号的项）例如[!!] Maximum possible memory usage: 4.8G (244.13% of installed RAM)，表示内存已经严重用超了。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329131801.png" alt="a">&lt;/p>
&lt;p>2）关注最后给的建议“Recommendations ”。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329131902.png" alt="b">&lt;/p>
&lt;h3 id="2tuning-primersh">2、tuning-primer.sh&lt;/h3>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;amp;mid=2247491744&amp;amp;idx=1&amp;amp;sn=5916fcf89d2f40065728c7c5dd1b258f&amp;amp;chksm=eb506596dc27ec801f487e7d6917e33cbc02eb59cc155fd1aed0cbde5e82d87ddb9bc1026bdb&amp;amp;scene=21#wechat_redirect">这是mysql的另一个优化工具，针于mysql的整体进行一个体检，对潜在的问题，给出优化的建议。&lt;/a>&lt;/p>
&lt;p>项目地址：https://github.com/BMDan/tuning-primer.sh&lt;/p>
&lt;p>目前，支持检测和优化建议的内容如下：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329132003.webp" alt="c">&lt;/p>
&lt;p>&lt;strong>2.1 下载&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1">#wget https://launchpad.net/mysql-tuning-primer/trunk/1.6-r1/+download/tuning-primer.sh&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2.2 使用&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># [root@localhost dba]# ./tuning-primer.sh&lt;/span>
-- MYSQL PERFORMANCE TUNING PRIMER --
- By: Matthew Montgomery -
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2.3 报告分析&lt;/strong>&lt;/p>
&lt;p>重点查看有红色告警的选项，根据建议结合自己系统的实际情况进行修改，例如：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329132104.webp" alt="d">&lt;/p>
&lt;h3 id="3pt-variable-advisor">3、pt-variable-advisor&lt;/h3>
&lt;p>pt-variable-advisor 可以分析MySQL变量并就可能出现的问题提出建议。&lt;/p>
&lt;p>&lt;strong>3.1 安装&lt;/strong>&lt;/p>
&lt;p>&lt;a href="https://www.percona.com/downloads/percona-toolkit/LATEST/">https://www.percona.com/downloads/percona-toolkit/LATEST/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1">#wget https://www.percona.com/downloads/percona-toolkit/3.0.13/binary/redhat/7/x86\_64/percona-toolkit-3.0.13-re85ce15-el7-x86\_64-bundle.tar\[root@localhost ~\]#yum install percona-toolkit-3.0.13-1.el7.x86_64.rpm&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>3.2 使用&lt;/strong>&lt;/p>
&lt;p>pt-variable-advisor是pt工具集的一个子工具，主要用来诊断你的参数设置是否合理。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># pt-variable-advisor localhost --socket /var/lib/mysql/mysql.sock&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>3.3 报告分析&lt;/strong>&lt;/p>
&lt;p>重点关注有WARN的信息的条目，例如：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200329132205.png" alt="e">&lt;/p>
&lt;h3 id="4pt-qurey-digest">4、pt-qurey-digest&lt;/h3>
&lt;p>pt-query-digest 主要功能是从日志、进程列表和tcpdump分析MySQL查询。关注微信公众号：Java技术栈，在后台回复：mysql，可以获取我整理的 N 篇 MySQL 干货。&lt;/p>
&lt;p>&lt;strong>4.1安装&lt;/strong>&lt;/p>
&lt;p>具体参考3.1节&lt;/p>
&lt;p>&lt;strong>4.2使用&lt;/strong>&lt;/p>
&lt;p>pt-query-digest主要用来分析mysql的慢日志，与mysqldumpshow工具相比，py-query_digest 工具的分析结果更具体，更完善。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># pt-query-digest /var/lib/mysql/slowtest-slow.log&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>4.3 常见用法分析&lt;/strong>&lt;/p>
&lt;p>1）直接分析慢查询文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">pt-query-digest /var/lib/mysql/slowtest-slow.log &amp;gt; slow_report.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>2）分析最近12小时内的查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">pt-query-digest --since&lt;span class="o">=&lt;/span>12h /var/lib/mysql/slowtest-slow.log &amp;gt; slow_report2.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>3）分析指定时间范围内的查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="n">pt-query-digest&lt;/span> &lt;span class="p">/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="p">/&lt;/span>&lt;span class="n">slowtest-slow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">log&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-since&lt;/span> &lt;span class="s1">&amp;#39;2017-01-07 09:30:00&amp;#39;&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-until&lt;/span> &lt;span class="s1">&amp;#39;2017-01-07 10:00:00&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">slow_report3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">log&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>4）分析指含有select语句的慢查询&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">pt-query-digest --filter &lt;span class="s1">&amp;#39;$event-&amp;gt;{fingerprint} =~ m/^select/i&amp;#39;&lt;/span> /var/lib/mysql/slowtest-slow.log&amp;gt; slow_report4.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5）针对某个用户的慢查询&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">pt-query-digest --filter &lt;span class="s1">&amp;#39;($event-&amp;gt;{user} || &amp;#34;&amp;#34;) =~ m/^root/i&amp;#39;&lt;/span> /var/lib/mysql/slowtest-slow.log&amp;gt; slow_report5.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>6）查询所有所有的全表扫描或full join的慢查询&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">pt-query-digest --filter &lt;span class="s1">&amp;#39;(($event-&amp;gt;{Full\_scan} || &amp;#34;&amp;#34;) eq &amp;#34;yes&amp;#34;) ||(($event-&amp;gt;{Full\_join} || &amp;#34;&amp;#34;) eq &amp;#34;yes&amp;#34;)&amp;#39;&lt;/span> /var/lib/mysql/slowtest-slow.log&amp;gt; slow_report6.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>4.4 报告分析&lt;/strong>&lt;/p>
&lt;p>第一部分：总体统计结果&lt;/p>
&lt;p>Overall：总共有多少条查询 Time range：查询执行的时间范围 unique：唯一查询数量，即对查询条件进行参数化以后，总共有多少个不同的查询 total：总计 min：最小 max：最大 avg：平均 95%：把所有值从小到大排列，位置位于95%的那个数，这个数一般最具有参考价值 median：中位数，把所有值从小到大排列，位置位于中间那个数&lt;/p>
&lt;p>第二部分：查询分组统计结果&lt;/p>
&lt;p>Rank：所有语句的排名，默认按查询时间降序排列，通过&amp;ndash;order-by指定 Query ID：语句的ID，（去掉多余空格和文本字符，计算hash值） Response：总的响应时间 time：该查询在本次分析中总的时间占比 calls：执行次数，即本次分析总共有多少条这种类型的查询语句 R/Call：平均每次执行的响应时间 V/M：响应时间Variance-to-mean的比率 Item：查询对象&lt;/p>
&lt;p>第三部分：每一种查询的详细统计结果&lt;/p>
&lt;p>ID：查询的ID号，和上图的Query ID对应 Databases：数据库名 Users：各个用户执行的次数（占比） Query_time distribution ：查询时间分布, 长短体现区间占比。Tables：查询中涉及到的表 Explain：SQL语句。&lt;/p></description></item><item><title>JPA级联操作</title><link>https://blog.itning.top/post/2020/03/26/jpa%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 26 Mar 2020 12:36:32 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/26/jpa%E7%BA%A7%E8%81%94%E6%93%8D%E4%BD%9C/</guid><description>&lt;h2 id="级联操作有哪些">级联操作有哪些？&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">package&lt;/span> &lt;span class="nn">javax.persistence&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">CascadeType&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/** Cascade all operations */&lt;/span>
&lt;span class="n">ALL&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade persist operation */&lt;/span>
&lt;span class="n">PERSIST&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade merge operation */&lt;/span>
&lt;span class="n">MERGE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade remove operation */&lt;/span>
&lt;span class="n">REMOVE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/** Cascade refresh operation */&lt;/span>
&lt;span class="n">REFRESH&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * Cascade detach operation
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @since 2.0
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">DETACH&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="测试环境">测试环境&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;parent&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-parent&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.2.5.RELEASE&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;relativePath/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/parent&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.List&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:06
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Father&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@OneToMany&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">PERSIST&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JoinColumn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;father_id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.Column&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.Entity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.Id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.ManyToOne&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:07
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Son&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ManyToOne&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.jpa.repository.JpaRepository&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">top.itning.springboottest.entity.Father&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:22
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">FatherRepository&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">JpaRepository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Father&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.data.jpa.repository.JpaRepository&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">top.itning.springboottest.entity.Son&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:23
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">SonRepository&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">JpaRepository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>​&lt;/p>
&lt;h2 id="all">ALL&lt;/h2>
&lt;p>这个会所有情况下均进行关联操作，即save-update和delete&lt;/p>
&lt;h2 id="persist级联持久化">PERSIST（级联持久化）&lt;/h2>
&lt;p>将&lt;code>Father&lt;/code>类中&lt;code>sons&lt;/code>属性的注解改成&lt;code>@OneToMany(cascade = CascadeType.PERSIST)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试运行后，&lt;strong>会抛出异常&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Caused by: javax.persistence.EntityNotFoundException: Unable to find top.itning.springboottest.entity.Son with id sa
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可知：级联持久化时，&lt;strong>JPA不会新增保存外键&lt;/strong>&lt;/p>
&lt;p>将外键对象注释，重新测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/*ArrayList&amp;lt;Son&amp;gt; sons = Lists.newArrayList(
&lt;/span>&lt;span class="cm"> new Son(&amp;#34;sa&amp;#34;, &amp;#34;sa&amp;#34;),
&lt;/span>&lt;span class="cm"> new Son(&amp;#34;sb&amp;#34;, &amp;#34;sb&amp;#34;)
&lt;/span>&lt;span class="cm"> );*/&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//father.setSons(sons);
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正常保存&lt;code>Father&lt;/code>，SQL如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这时，我们写入&lt;code>Son&lt;/code>表两条数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>取消注释并重新执行刚才出现异常的测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa1&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意：我们把&lt;code>Son&lt;/code>对象的&lt;code>sonName&lt;/code>属性值全部增加了&lt;code>1&lt;/code>，&lt;code>father.setName(&amp;quot;b&amp;quot;);&lt;/code>&lt;/strong>&lt;/p>
&lt;p>测试输出的SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_name2_1_1_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="n">sons0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">=?&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>只发送的两条查询SQL和一条更新&lt;code>Father&lt;/code>的SQL，并没有将&lt;code>Son&lt;/code>表的值进行更改。&lt;/strong>&lt;/p>
&lt;p>接下来看下删除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testDel&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试输出SQL:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">null&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，&lt;strong>只会将&lt;code>father&lt;/code>删除，不会删除&lt;code>son&lt;/code>而会将其外键设为&lt;code>null&lt;/code>&lt;/strong>&lt;/p>
&lt;h3 id="总结">总结&lt;/h3>
&lt;ol>
&lt;li>级联持久化新增时不会将外键对象保存&lt;/li>
&lt;li>级联持久化更新时不会更新外键对象&lt;/li>
&lt;li>级联持久化删除时不会删除外键对象&lt;/li>
&lt;/ol>
&lt;p>我们刚才把&lt;code>CascadeType.PERSIST&lt;/code>放在了&lt;code>father&lt;/code>类中，我们这回放在&lt;code>son&lt;/code>中试试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:07
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Son&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ManyToOne&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">PERSIST&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依照刚才的测试，结果没有区别&lt;/p>
&lt;h2 id="merge级联更新合并">MERGE（级联更新（合并））&lt;/h2>
&lt;p>将所有更改重置，并将&lt;code>father&lt;/code>类更改如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.List&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:06
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Father&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@OneToMany&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MERGE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JoinColumn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;father_id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行以下测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>看到执行的SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_3_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_3_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_name2_1_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">left&lt;/span> &lt;span class="k">outer&lt;/span> &lt;span class="k">join&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="n">sons1_&lt;/span> &lt;span class="k">on&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sons1_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_name2_1_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="n">son0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_name2_1_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="n">son0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">father_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">insert&lt;/span> &lt;span class="k">into&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">father_id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son_name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">values&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到&lt;strong>不仅保存了&lt;code>father&lt;/code>，还保存了&lt;code>son&lt;/code>&lt;/strong>&lt;/p>
&lt;p>我们更新下试试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb2&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将&lt;code>Son&lt;/code>的&lt;code>sonName&lt;/code>全加个&lt;code>2&lt;/code>&lt;/p>
&lt;p>执行后正常修改了&lt;code>sonName&lt;/code>，&lt;strong>但是把外键设置成了&lt;code>null&lt;/code>了&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200326135659.png" alt="database_table">&lt;/p>
&lt;p>我们修改下测试代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个时候&lt;code>son&lt;/code>表的外键就不是&lt;code>null&lt;/code>啦&lt;/p>
&lt;p>接下来测试删除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testDel&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行的SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">update&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">null&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到，&lt;strong>并没有删除&lt;code>son&lt;/code>而只是把其外键设置为&lt;code>null&lt;/code>了&lt;/strong>&lt;/p>
&lt;h3 id="总结-1">总结&lt;/h3>
&lt;ol>
&lt;li>级联更新保存时会保存所有&lt;/li>
&lt;li>级联更新时会更新所有&lt;/li>
&lt;li>级联删除时不会删除多的那方&lt;/li>
&lt;/ol>
&lt;p>将&lt;code>CascadeType.MERGE&lt;/code>放在&lt;code>Son&lt;/code>的情况有所不同：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>新增&lt;code>father&lt;/code>不会新增&lt;code>son&lt;/code>，而是会抛出异常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新增&lt;code>son&lt;/code>会将&lt;code>father&lt;/code>一并新增，&lt;strong>但是&lt;code>son&lt;/code>中外键为&lt;code>null&lt;/code>&lt;/strong>，想不为&lt;code>null&lt;/code>需要设置&lt;code>father.setSons(sons);&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>更新&lt;code>son&lt;/code>也会将&lt;code>father&lt;/code>进行更新&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除&lt;code>son&lt;/code>也时仅仅删除&lt;code>son&lt;/code>不会动&lt;code>father&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="remove级联删除">REMOVE（级联删除）&lt;/h2>
&lt;p>将所有更改重置，并将&lt;code>father&lt;/code>类更改如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.List&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:06
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Father&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@OneToMany&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">REMOVE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JoinColumn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;father_id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行以下测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上两个测试用例都会抛出错误。&lt;/p>
&lt;p>所以&lt;strong>级联删除不会保存外键对象&lt;/strong>&lt;/p>
&lt;p>接下来，我们正常添加数据：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Son&lt;/span> &lt;span class="n">son2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSonName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">son2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFather&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">sonRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">son2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试下更新时会不会更新关联表：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">test&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Lists&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newArrayList&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sa&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sa2&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;sb&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;sb2&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">);&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSons&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">sons&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试发出了两条查询SQL，并没有更新语句&lt;/p>
&lt;p>所以&lt;strong>级联删除不会更新关联表&lt;/strong>&lt;/p>
&lt;p>接下来测试下删除：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testDel&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Father&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">father&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setId&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delete&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">father&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样仅仅删除了&lt;code>father&lt;/code>并不会删除&lt;code>son&lt;/code>&lt;/p>
&lt;p>想要也删除&lt;code>son&lt;/code>表：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.List&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:06
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Father&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@OneToMany&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">REMOVE&lt;/span>&lt;span class="o">},&lt;/span> &lt;span class="n">mappedBy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;father&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Son&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">sons&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">lombok.Data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/26 12:07
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@Data&lt;/span>
&lt;span class="nd">@Entity&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Son&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Id&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@Column&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="nd">@ManyToOne&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">optional&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@JoinColumn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;father_id&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Father&lt;/span> &lt;span class="n">father&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonId&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sonName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sonName&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">father&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">father&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">Son&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>注意&lt;code>mappedBy&lt;/code>和&lt;code>@JoinColumn&lt;/code>的位置&lt;/strong>&lt;/p>
&lt;p>更改测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Test&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">testDel&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">fatherRepository&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">deleteById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行的SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">select&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">id1_0_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">name2_0_0_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="n">father0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">father0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">select&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_0_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_id1_1_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">father_i3_1_1_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">son_name&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">son_name2_1_1_&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="n">sons0_&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">sons0_&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">father_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">son&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">son_id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;span class="k">delete&lt;/span> &lt;span class="k">from&lt;/span> &lt;span class="n">father&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">=?&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="总结-2">总结&lt;/h3>
&lt;ol>
&lt;li>级联删除新增不会新增关联对象&lt;/li>
&lt;li>级联删除修改不会修改关联对象&lt;/li>
&lt;li>级联删除删除会将所关联对象一并删除&lt;/li>
&lt;/ol>
&lt;h2 id="refresh级联刷新">REFRESH（级联刷新）&lt;/h2>
&lt;blockquote>
&lt;p>级联刷新，也就是说，当你刚开始获取到了这条记录，那么在你处理业务过程中，这条记录被另一个业务程序修改了（数据库这条记录被修改了），那么你获取的这条数据就不是最新的数据，那你就要调用实体管理器里面的refresh方法来刷新实体，所谓刷新，大家一定要记住方向，它是获取数据，相当于执行select语句的（但不能用select，select方法返回的是EntityManager缓存中的数据，不是数据库里面最新的数据），也就是重新获取数据。&lt;/p>
&lt;/blockquote>
&lt;h2 id="detach级联脱管游离">DETACH（级联脱管/游离）&lt;/h2>
&lt;blockquote>
&lt;p>如果你要删除一个实体，但是它有外键无法删除，你就需要这个级联权限了。它会撤销所有相关的外键关联。&lt;/p>
&lt;/blockquote></description></item><item><title>HibernateDialect设置</title><link>https://blog.itning.top/post/2020/03/26/hibernatedialect%E8%AE%BE%E7%BD%AE/</link><pubDate>Thu, 26 Mar 2020 12:15:05 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/26/hibernatedialect%E8%AE%BE%E7%BD%AE/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">spring&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>jpa&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">database-platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>org.hibernate.dialect.MySQL8Dialect&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>或：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>常见限流算法 漏桶和令牌桶</title><link>https://blog.itning.top/post/2020/03/25/%E5%B8%B8%E8%A7%81%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95-%E6%BC%8F%E6%A1%B6%E5%92%8C%E4%BB%A4%E7%89%8C%E6%A1%B6/</link><pubDate>Wed, 25 Mar 2020 21:08:38 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/25/%E5%B8%B8%E8%A7%81%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95-%E6%BC%8F%E6%A1%B6%E5%92%8C%E4%BB%A4%E7%89%8C%E6%A1%B6/</guid><description>&lt;h2 id="漏桶算法">漏桶算法&lt;/h2>
&lt;p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200325210400.png" alt="漏桶算法">&lt;/p>
&lt;h2 id="令牌桶算法">令牌桶算法&lt;/h2>
&lt;p>令牌桶算法(Token Bucket)和 Leaky Bucket 效果一样但方向相反的算法,更加容易理解.随着时间流逝,系统会按恒定1/QPS时间间隔(如果QPS=100,则间隔是10ms)往桶里加入Token(想象和漏洞漏水相反,有个水龙头在不断的加水),如果桶已经满了就不再加了.新请求来临时,会各自拿走一个Token,如果没有Token可拿了就阻塞或者拒绝服务.&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200325210500.jpg" alt="令牌桶算法">&lt;/p>
&lt;p>令牌桶算法可以使用Google的&lt;code>guava&lt;/code>工具包来实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.google.common.util.concurrent.RateLimiter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.http.HttpStatus&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.lang.NonNull&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.stereotype.Component&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.web.filter.OncePerRequestFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.servlet.FilterChain&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.servlet.ServletException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.servlet.http.HttpServletRequest&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.servlet.http.HttpServletResponse&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.PrintWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2020/3/25 20:47
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@SuppressWarnings&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;UnstableApiUsage&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@Component&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RateLimitFilter&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OncePerRequestFilter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">RateLimiter&lt;/span> &lt;span class="n">rateLimiter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">RateLimiter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilterInternal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nd">@NonNull&lt;/span> &lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@NonNull&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nd">@NonNull&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">filterChain&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rateLimiter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">tryAcquire&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">filterChain&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setStatus&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TOO_MANY_REQUESTS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">PrintWriter&lt;/span> &lt;span class="n">writer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getWriter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">write&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpStatus&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TOO_MANY_REQUESTS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getReasonPhrase&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flush&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">writer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">close&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>RateLimiter.create(1);&lt;/code>表示一秒钟最多处理一个请求&lt;/p>
&lt;p>&lt;code>rateLimiter.tryAcquire()&lt;/code>返回的布尔值为&lt;code>true&lt;/code>表示获取到了令牌，而&lt;code>false&lt;/code>则表示没有获取到，被限流。&lt;/p>
&lt;p>继承的&lt;code>OncePerRequestFilter&lt;/code>类是&lt;code>Spring&lt;/code>提供的过滤器类，能够保证每个请求只经过一次。&lt;/p></description></item><item><title>FFmpeg使用硬件加速进行视频转码</title><link>https://blog.itning.top/post/2020/03/25/ffmpeg%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</link><pubDate>Wed, 25 Mar 2020 10:57:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/25/ffmpeg%E4%BD%BF%E7%94%A8%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81/</guid><description>&lt;h2 id="获取视频信息">获取视频信息&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ffprobe -v error -show_streams -print_format json &amp;lt;input&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输出JSON格式的视频数据信息&lt;/p>
&lt;h2 id="硬件转码">硬件转码&lt;/h2>
&lt;p>查看支持的编解码器&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ffmpeg -codecs &lt;span class="p">|&lt;/span> sls cuvid
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">DEV.LS h264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part &lt;span class="m">10&lt;/span> &lt;span class="o">(&lt;/span>decoders: h264 h264_qsv h264_cuvid &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders:libx264 libx264rgb h264_amf h264_nvenc h264_qsv nvenc nvenc_h264 &lt;span class="o">)&lt;/span>
DEV.L. hevc H.265 / HEVC &lt;span class="o">(&lt;/span>High Efficiency Video Coding&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: hevc hevc_qsv hevc_cuvid &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libx265 nvenc_hevc hevc_amf hevc_nvenc hevc_qsv &lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ffmpeg -i original.mov -vcodec hevc_nvenc cqx.mp4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>MySQL8手动安装教程</title><link>https://blog.itning.top/post/2020/03/24/mysql8%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link><pubDate>Tue, 24 Mar 2020 19:36:03 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/24/mysql8%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid><description>&lt;h2 id="下载mysql">下载MySQL&lt;/h2>
&lt;p>&lt;a href="https://mirrors.cloud.tencent.com/mysql/downloads/MySQL-8.0/">腾讯软件源下载&lt;/a>&lt;/p>
&lt;p>搜索关键字：&lt;code>mysql-8.0.19-winx64.msi&lt;/code>，其中&lt;code>8.0.19&lt;/code>换成最新版本&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324194128.png" alt="下载页面截图">&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>安装非常简单，一路&lt;code>下一步&lt;/code>即可&lt;/p>
&lt;p>安装完成后找到安装目录（别跟我说你不知道安装到哪了&amp;hellip;）&lt;/p>
&lt;h2 id="配置">配置&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>在&lt;code>MySQL&lt;/code>根目录新建文件夹：&lt;code>data&lt;/code>，新增个文件：&lt;code>my.ini&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324194455.png" alt="根目录">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将·&lt;code>my.ini&lt;/code>文件打开，粘贴以下内容：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="na">[mysql]
&lt;/span>
&lt;span class="na">default-character-set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">utf8mb4
&lt;/span>
&lt;span class="na">[mysqld]
&lt;/span>
&lt;span class="na">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">3306
&lt;/span>
&lt;span class="na">basedir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">D:\MySQL\MySQL Server 8.0
&lt;/span>
&lt;span class="na">datadir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">D:\MySQL\MySQL Server 8.0\data
&lt;/span>
&lt;span class="na">default-storage-engine&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">INNODB
&lt;/span>
&lt;span class="na">character-set-server&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">utf8mb4
&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>你需要将上边的&lt;code>basedir&lt;/code>和&lt;code>datadir&lt;/code>换成你自己的路径&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保存文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在开始菜单上按右键，打开&lt;code>Windows PowerShell(管理员)&lt;/code>&lt;/p>
&lt;p>注意是&lt;strong>管理员&lt;/strong>，不是上边那个&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324_195151.gif" alt="第四步动图">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你正确打开，标题应该有&lt;code>管理员&lt;/code>字样&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324195417.png" alt="管理员powershell">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入&lt;code>MySQL&lt;/code>根目录，注意路径上的&lt;strong>英文&lt;/strong>双引号&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;D:\MySQL\MySQL Server 8.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>cd 后边的双引号包裹的字符串换成自己的&lt;code>MySQL&lt;/code>路径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行初始化&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./bin/mysqld --initialize --console
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里由于我安装过了所以放一张网上的图：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/20200324200100.jpg" alt="初始化">&lt;/p>
&lt;p>注意看箭头指向的字符串，那个是&lt;code>MySQL&lt;/code>初始化生成的密码&lt;/p>
&lt;p>&lt;strong>你必须复制下来&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装并运行服务&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./bin/mysqld --install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个命令是将&lt;code>MySQL&lt;/code>作为服务安装到系统中&lt;/p>
&lt;p>安装成功会有&lt;code>successfully&lt;/code>提示&lt;/p>
&lt;p>接下来启动服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">net start mysql
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>修改MySQL密码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">./bin/mysql -u root -p
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回车后输入刚才让你复制的密码&lt;/p>
&lt;p>输入以下SQL：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">ALTER&lt;/span> &lt;span class="k">USER&lt;/span> &lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="s1">&amp;#39;localhost&amp;#39;&lt;/span> &lt;span class="n">IDENTIFIED&lt;/span> &lt;span class="k">BY&lt;/span> &lt;span class="s1">&amp;#39;新密码&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中&lt;code>新密码&lt;/code>改成你要设置的&lt;code>MySQL&lt;/code>密码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果有其它疑问，也可以看这篇教程&lt;/p>
&lt;p>&lt;a href="https://www.jb51.net/article/173105.htm?tdsourcetag=s_pctim_aiomsg">mysql 8.0.18.zip安装配置方法图文教程(windows 64位)&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>音视频常见格式</title><link>https://blog.itning.top/post/2020/03/24/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/</link><pubDate>Tue, 24 Mar 2020 18:34:11 +0800</pubDate><guid>https://blog.itning.top/post/2020/03/24/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%B8%B8%E8%A7%81%E6%A0%BC%E5%BC%8F/</guid><description>&lt;p>&lt;strong>音视频编码封装&lt;/strong>&lt;/p>
&lt;h2 id="封装格式">封装格式&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>封装&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>avi&lt;/td>
&lt;td>AVI视频格式的优点是图像质量好，可以跨多个平台使用，但是其缺点是体积过于庞大。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3gp&lt;/td>
&lt;td>淘汰&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wmv&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mp4&lt;/td>
&lt;td>MPEG-4第14部分的扩展名为.mp4。仅有音频的MPEG-4文件会使用.m4a扩展名。原始的MPEG-4视频流会使用.m4v扩展名，但该扩展名也被用于仅有视频流的MPEG-4文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mkv&lt;/td>
&lt;td>这个封装格式可把多种不同编码的影像及16条或以上不同格式的音频和语言不同的字幕封装到一个Matroska Media档内。它也是其中一种开放源代码的多媒体封装格式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rm/rmvb&lt;/td>
&lt;td>淘汰&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mov&lt;/td>
&lt;td>MOV 格式是 QuickTime 的一种容器，不光包括视频音频，还可以包含Java，脚本，Skin，图片等，是一种很复杂的封装格式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="视频编码">视频编码&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>编码&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>h264&lt;/td>
&lt;td>H.264 bitstream with start codes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>avc1&lt;/td>
&lt;td>H.264 bitstream without start codes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="音频编码">音频编码&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>编码&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>aac&lt;/td>
&lt;td>AAC（Advanced Audio Coding），中文名：高级音频编码，出现于1997年，基于MPEG-2的音频编码技术。由Fraunhofer IIS、杜比实验室、AT&amp;amp;T、Sony等公司共同开发，目的是取代MP3格式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ac3&lt;/td>
&lt;td>AC3(全称Audio Coding3音频编码3)是杜比数码的同义词，杜比数码是一种高级音频压缩技术，它最多可以对6个比特率最高为448kbps的单独声道进行编码。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>flac&lt;/td>
&lt;td>FLAC是一款的自由音频压缩编码，其特点是可以对音频文件无损压缩。不同于其他有损压缩编码（如MP3、AAC等），压缩后不会有任何音质损失，现在已被很多软件及硬件音频产品所支持&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="ffmpeg-support">ffmpeg support&lt;/h2>
&lt;h3 id="codec">codec&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;span class="lnt">281
&lt;/span>&lt;span class="lnt">282
&lt;/span>&lt;span class="lnt">283
&lt;/span>&lt;span class="lnt">284
&lt;/span>&lt;span class="lnt">285
&lt;/span>&lt;span class="lnt">286
&lt;/span>&lt;span class="lnt">287
&lt;/span>&lt;span class="lnt">288
&lt;/span>&lt;span class="lnt">289
&lt;/span>&lt;span class="lnt">290
&lt;/span>&lt;span class="lnt">291
&lt;/span>&lt;span class="lnt">292
&lt;/span>&lt;span class="lnt">293
&lt;/span>&lt;span class="lnt">294
&lt;/span>&lt;span class="lnt">295
&lt;/span>&lt;span class="lnt">296
&lt;/span>&lt;span class="lnt">297
&lt;/span>&lt;span class="lnt">298
&lt;/span>&lt;span class="lnt">299
&lt;/span>&lt;span class="lnt">300
&lt;/span>&lt;span class="lnt">301
&lt;/span>&lt;span class="lnt">302
&lt;/span>&lt;span class="lnt">303
&lt;/span>&lt;span class="lnt">304
&lt;/span>&lt;span class="lnt">305
&lt;/span>&lt;span class="lnt">306
&lt;/span>&lt;span class="lnt">307
&lt;/span>&lt;span class="lnt">308
&lt;/span>&lt;span class="lnt">309
&lt;/span>&lt;span class="lnt">310
&lt;/span>&lt;span class="lnt">311
&lt;/span>&lt;span class="lnt">312
&lt;/span>&lt;span class="lnt">313
&lt;/span>&lt;span class="lnt">314
&lt;/span>&lt;span class="lnt">315
&lt;/span>&lt;span class="lnt">316
&lt;/span>&lt;span class="lnt">317
&lt;/span>&lt;span class="lnt">318
&lt;/span>&lt;span class="lnt">319
&lt;/span>&lt;span class="lnt">320
&lt;/span>&lt;span class="lnt">321
&lt;/span>&lt;span class="lnt">322
&lt;/span>&lt;span class="lnt">323
&lt;/span>&lt;span class="lnt">324
&lt;/span>&lt;span class="lnt">325
&lt;/span>&lt;span class="lnt">326
&lt;/span>&lt;span class="lnt">327
&lt;/span>&lt;span class="lnt">328
&lt;/span>&lt;span class="lnt">329
&lt;/span>&lt;span class="lnt">330
&lt;/span>&lt;span class="lnt">331
&lt;/span>&lt;span class="lnt">332
&lt;/span>&lt;span class="lnt">333
&lt;/span>&lt;span class="lnt">334
&lt;/span>&lt;span class="lnt">335
&lt;/span>&lt;span class="lnt">336
&lt;/span>&lt;span class="lnt">337
&lt;/span>&lt;span class="lnt">338
&lt;/span>&lt;span class="lnt">339
&lt;/span>&lt;span class="lnt">340
&lt;/span>&lt;span class="lnt">341
&lt;/span>&lt;span class="lnt">342
&lt;/span>&lt;span class="lnt">343
&lt;/span>&lt;span class="lnt">344
&lt;/span>&lt;span class="lnt">345
&lt;/span>&lt;span class="lnt">346
&lt;/span>&lt;span class="lnt">347
&lt;/span>&lt;span class="lnt">348
&lt;/span>&lt;span class="lnt">349
&lt;/span>&lt;span class="lnt">350
&lt;/span>&lt;span class="lnt">351
&lt;/span>&lt;span class="lnt">352
&lt;/span>&lt;span class="lnt">353
&lt;/span>&lt;span class="lnt">354
&lt;/span>&lt;span class="lnt">355
&lt;/span>&lt;span class="lnt">356
&lt;/span>&lt;span class="lnt">357
&lt;/span>&lt;span class="lnt">358
&lt;/span>&lt;span class="lnt">359
&lt;/span>&lt;span class="lnt">360
&lt;/span>&lt;span class="lnt">361
&lt;/span>&lt;span class="lnt">362
&lt;/span>&lt;span class="lnt">363
&lt;/span>&lt;span class="lnt">364
&lt;/span>&lt;span class="lnt">365
&lt;/span>&lt;span class="lnt">366
&lt;/span>&lt;span class="lnt">367
&lt;/span>&lt;span class="lnt">368
&lt;/span>&lt;span class="lnt">369
&lt;/span>&lt;span class="lnt">370
&lt;/span>&lt;span class="lnt">371
&lt;/span>&lt;span class="lnt">372
&lt;/span>&lt;span class="lnt">373
&lt;/span>&lt;span class="lnt">374
&lt;/span>&lt;span class="lnt">375
&lt;/span>&lt;span class="lnt">376
&lt;/span>&lt;span class="lnt">377
&lt;/span>&lt;span class="lnt">378
&lt;/span>&lt;span class="lnt">379
&lt;/span>&lt;span class="lnt">380
&lt;/span>&lt;span class="lnt">381
&lt;/span>&lt;span class="lnt">382
&lt;/span>&lt;span class="lnt">383
&lt;/span>&lt;span class="lnt">384
&lt;/span>&lt;span class="lnt">385
&lt;/span>&lt;span class="lnt">386
&lt;/span>&lt;span class="lnt">387
&lt;/span>&lt;span class="lnt">388
&lt;/span>&lt;span class="lnt">389
&lt;/span>&lt;span class="lnt">390
&lt;/span>&lt;span class="lnt">391
&lt;/span>&lt;span class="lnt">392
&lt;/span>&lt;span class="lnt">393
&lt;/span>&lt;span class="lnt">394
&lt;/span>&lt;span class="lnt">395
&lt;/span>&lt;span class="lnt">396
&lt;/span>&lt;span class="lnt">397
&lt;/span>&lt;span class="lnt">398
&lt;/span>&lt;span class="lnt">399
&lt;/span>&lt;span class="lnt">400
&lt;/span>&lt;span class="lnt">401
&lt;/span>&lt;span class="lnt">402
&lt;/span>&lt;span class="lnt">403
&lt;/span>&lt;span class="lnt">404
&lt;/span>&lt;span class="lnt">405
&lt;/span>&lt;span class="lnt">406
&lt;/span>&lt;span class="lnt">407
&lt;/span>&lt;span class="lnt">408
&lt;/span>&lt;span class="lnt">409
&lt;/span>&lt;span class="lnt">410
&lt;/span>&lt;span class="lnt">411
&lt;/span>&lt;span class="lnt">412
&lt;/span>&lt;span class="lnt">413
&lt;/span>&lt;span class="lnt">414
&lt;/span>&lt;span class="lnt">415
&lt;/span>&lt;span class="lnt">416
&lt;/span>&lt;span class="lnt">417
&lt;/span>&lt;span class="lnt">418
&lt;/span>&lt;span class="lnt">419
&lt;/span>&lt;span class="lnt">420
&lt;/span>&lt;span class="lnt">421
&lt;/span>&lt;span class="lnt">422
&lt;/span>&lt;span class="lnt">423
&lt;/span>&lt;span class="lnt">424
&lt;/span>&lt;span class="lnt">425
&lt;/span>&lt;span class="lnt">426
&lt;/span>&lt;span class="lnt">427
&lt;/span>&lt;span class="lnt">428
&lt;/span>&lt;span class="lnt">429
&lt;/span>&lt;span class="lnt">430
&lt;/span>&lt;span class="lnt">431
&lt;/span>&lt;span class="lnt">432
&lt;/span>&lt;span class="lnt">433
&lt;/span>&lt;span class="lnt">434
&lt;/span>&lt;span class="lnt">435
&lt;/span>&lt;span class="lnt">436
&lt;/span>&lt;span class="lnt">437
&lt;/span>&lt;span class="lnt">438
&lt;/span>&lt;span class="lnt">439
&lt;/span>&lt;span class="lnt">440
&lt;/span>&lt;span class="lnt">441
&lt;/span>&lt;span class="lnt">442
&lt;/span>&lt;span class="lnt">443
&lt;/span>&lt;span class="lnt">444
&lt;/span>&lt;span class="lnt">445
&lt;/span>&lt;span class="lnt">446
&lt;/span>&lt;span class="lnt">447
&lt;/span>&lt;span class="lnt">448
&lt;/span>&lt;span class="lnt">449
&lt;/span>&lt;span class="lnt">450
&lt;/span>&lt;span class="lnt">451
&lt;/span>&lt;span class="lnt">452
&lt;/span>&lt;span class="lnt">453
&lt;/span>&lt;span class="lnt">454
&lt;/span>&lt;span class="lnt">455
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">Codecs:
D..... &lt;span class="o">=&lt;/span> Decoding supported
.E.... &lt;span class="o">=&lt;/span> Encoding supported
..V... &lt;span class="o">=&lt;/span> Video codec
..A... &lt;span class="o">=&lt;/span> Audio codec
..S... &lt;span class="o">=&lt;/span> Subtitle codec
...I.. &lt;span class="o">=&lt;/span> Intra frame-only codec
....L. &lt;span class="o">=&lt;/span> Lossy compression
.....S &lt;span class="o">=&lt;/span> Lossless compression
-------
D.VI.S 012v Uncompressed 4:2:2 10-bit
D.V.L. 4xm 4X Movie
D.VI.S 8bps QuickTime 8BPS video
.EVIL. a64_multi Multicolor charset &lt;span class="k">for&lt;/span> Commodore &lt;span class="m">64&lt;/span> &lt;span class="o">(&lt;/span>encoders: a64multi &lt;span class="o">)&lt;/span>
.EVIL. a64_multi5 Multicolor charset &lt;span class="k">for&lt;/span> Commodore 64, extended with 5th color &lt;span class="o">(&lt;/span>colram&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: a64multi5 &lt;span class="o">)&lt;/span>
D.V..S aasc Autodesk RLE
D.VIL. aic Apple Intermediate Codec
DEVI.S alias_pix Alias/Wavefront PIX image
DEVIL. amv AMV Video
D.V.L. anm Deluxe Paint Animation
D.V.L. ansi ASCII/ANSI art
DEV..S apng APNG &lt;span class="o">(&lt;/span>Animated Portable Network Graphics&lt;span class="o">)&lt;/span> image
DEVIL. asv1 ASUS V1
DEVIL. asv2 ASUS V2
D.VIL. aura Auravision AURA
D.VIL. aura2 Auravision Aura &lt;span class="m">2&lt;/span>
DEV.L. av1 Alliance &lt;span class="k">for&lt;/span> Open Media AV1 &lt;span class="o">(&lt;/span>decoders: libaom-av1 &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libaom-av1 &lt;span class="o">)&lt;/span>
D.V... avrn Avid AVI Codec
DEVI.S avrp Avid 1:1 10-bit RGB Packer
D.V.L. avs AVS &lt;span class="o">(&lt;/span>Audio Video Standard&lt;span class="o">)&lt;/span> video
..V.L. avs2 AVS2-P2/IEEE1857.4
DEVI.S avui Avid Meridien Uncompressed
DEVI.S ayuv Uncompressed packed MS 4:4:4:4
D.V.L. bethsoftvid Bethesda VID video
D.V.L. bfi Brute Force &lt;span class="p">&amp;amp;&lt;/span> Ignorance
D.V.L. binkvideo Bink video
D.VI.. bintext Binary text
D.VI.S bitpacked Bitpacked
DEVI.S bmp BMP &lt;span class="o">(&lt;/span>Windows and OS/2 bitmap&lt;span class="o">)&lt;/span>
D.V..S bmv_video Discworld II BMV video
D.VI.S brender_pix BRender PIX image
D.V.L. c93 Interplay C93
D.V.L. cavs Chinese AVS &lt;span class="o">(&lt;/span>Audio Video Standard&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>AVS1-P2, JiZhun profile&lt;span class="o">)&lt;/span>
D.V.L. cdgraphics CD Graphics video
D.VIL. cdxl Commodore CDXL video
D.V.L. cfhd Cineform HD
DEV.L. cinepak Cinepak
D.V.L. clearvideo Iterated Systems ClearVideo
DEVIL. cljr Cirrus Logic AccuPak
D.VI.S cllc Canopus Lossless Codec
D.V.L. cmv Electronic Arts CMV video &lt;span class="o">(&lt;/span>decoders: eacmv &lt;span class="o">)&lt;/span>
D.V... cpia CPiA video format
D.V..S cscd CamStudio &lt;span class="o">(&lt;/span>decoders: camstudio &lt;span class="o">)&lt;/span>
D.VIL. cyuv Creative YUV &lt;span class="o">(&lt;/span>CYUV&lt;span class="o">)&lt;/span>
..V.LS daala Daala
D.VILS dds DirectDraw Surface image decoder
D.V.L. dfa Chronomaster DFA
DEV.LS dirac Dirac &lt;span class="o">(&lt;/span>encoders: vc2 &lt;span class="o">)&lt;/span>
DEVIL. dnxhd VC3/DNxHD
DEVI.S dpx DPX &lt;span class="o">(&lt;/span>Digital Picture Exchange&lt;span class="o">)&lt;/span> image
D.V.L. dsicinvideo Delphine Software International CIN video
DEVIL. dvvideo DV &lt;span class="o">(&lt;/span>Digital Video&lt;span class="o">)&lt;/span>
D.V..S dxa Feeble Files/ScummVM DXA
D.VI.S dxtory Dxtory
D.VIL. dxv Resolume DXV
D.V.L. escape124 Escape &lt;span class="m">124&lt;/span>
D.V.L. escape130 Escape &lt;span class="m">130&lt;/span>
D.VILS exr OpenEXR image
DEV..S ffv1 FFmpeg video codec &lt;span class="c1">#1&lt;/span>
DEVI.S ffvhuff Huffyuv FFmpeg variant
D.V.L. fic Mirillis FIC
DEVI.S fits FITS &lt;span class="o">(&lt;/span>Flexible Image Transport System&lt;span class="o">)&lt;/span>
DEV..S flashsv Flash Screen Video v1
DEV.L. flashsv2 Flash Screen Video v2
D.V..S flic Autodesk Animator Flic video
DEV.L. flv1 FLV / Sorenson Spark / Sorenson H.263 &lt;span class="o">(&lt;/span>Flash Video&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: flv &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: flv &lt;span class="o">)&lt;/span>
D.V..S fmvc FM Screen Capture Codec
D.VI.S fraps Fraps
D.VI.S frwu Forward Uncompressed
D.V.L. g2m Go2Meeting
D.V.L. gdv Gremlin Digital Video
DEV..S gif GIF &lt;span class="o">(&lt;/span>Graphics Interchange Format&lt;span class="o">)&lt;/span>
DEV.L. h261 H.261
DEV.L. h263 H.263 / H.263-1996, H.263+ / H.263-1998 / H.263 version &lt;span class="m">2&lt;/span>
D.V.L. h263i Intel H.263
DEV.L. h263p H.263+ / H.263-1998 / H.263 version &lt;span class="m">2&lt;/span>
DEV.LS h264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part &lt;span class="m">10&lt;/span> &lt;span class="o">(&lt;/span>decoders: h264 h264_qsv h264_cuvid &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libx264 libx264rgb h264_amf h264_nvenc h264_qsv nvenc nvenc_h264 &lt;span class="o">)&lt;/span>
DEVIL. hap Vidvox Hap
DEV.L. hevc H.265 / HEVC &lt;span class="o">(&lt;/span>High Efficiency Video Coding&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: hevc hevc_qsv hevc_cuvid &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libx265 nvenc_hevc hevc_amf hevc_nvenc hevc_qsv &lt;span class="o">)&lt;/span>
D.V.L. hnm4video HNM &lt;span class="m">4&lt;/span> video
D.VIL. hq_hqa Canopus HQ/HQA
D.VIL. hqx Canopus HQX
DEVI.S huffyuv HuffYUV
D.V.L. idcin id Quake II CIN video &lt;span class="o">(&lt;/span>decoders: idcinvideo &lt;span class="o">)&lt;/span>
D.VI.. idf iCEDraw text
D.V.L. iff_ilbm IFF ACBM/ANIM/DEEP/ILBM/PBM/RGB8/RGBN &lt;span class="o">(&lt;/span>decoders: iff &lt;span class="o">)&lt;/span>
D.V.L. imm4 Infinity IMM4
D.V.L. indeo2 Intel Indeo &lt;span class="m">2&lt;/span>
D.V.L. indeo3 Intel Indeo &lt;span class="m">3&lt;/span>
D.V.L. indeo4 Intel Indeo Video Interactive &lt;span class="m">4&lt;/span>
D.V.L. indeo5 Intel Indeo Video Interactive &lt;span class="m">5&lt;/span>
D.V.L. interplayvideo Interplay MVE video
DEVILS jpeg2000 JPEG &lt;span class="m">2000&lt;/span> &lt;span class="o">(&lt;/span>decoders: jpeg2000 libopenjpeg &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: jpeg2000 libopenjpeg &lt;span class="o">)&lt;/span>
DEVILS jpegls JPEG-LS
D.VIL. jv Bitmap Brothers JV video
D.V.L. kgv1 Kega Game Video
D.V.L. kmvc Karl Morton&lt;span class="s1">&amp;#39;s video codec
&lt;/span>&lt;span class="s1"> D.VI.S lagarith Lagarith lossless
&lt;/span>&lt;span class="s1"> .EVI.S ljpeg Lossless JPEG
&lt;/span>&lt;span class="s1"> D.VI.S loco LOCO
&lt;/span>&lt;span class="s1"> D.VI.S m101 Matrox Uncompressed SD
&lt;/span>&lt;span class="s1"> D.V.L. mad Electronic Arts Madcow Video (decoders: eamad )
&lt;/span>&lt;span class="s1"> DEVI.S magicyuv MagicYUV video
&lt;/span>&lt;span class="s1"> D.VIL. mdec Sony PlayStation MDEC (Motion DECoder)
&lt;/span>&lt;span class="s1"> D.V.L. mimic Mimic
&lt;/span>&lt;span class="s1"> DEVIL. mjpeg Motion JPEG (decoders: mjpeg mjpeg_cuvid ) (encoders: mjpeg mjpeg_qsv )
&lt;/span>&lt;span class="s1"> D.VIL. mjpegb Apple MJPEG-B
&lt;/span>&lt;span class="s1"> D.V.L. mmvideo American Laser Games MM Video
&lt;/span>&lt;span class="s1"> D.V.L. motionpixels Motion Pixels video
&lt;/span>&lt;span class="s1"> DEV.L. mpeg1video MPEG-1 video (decoders: mpeg1video mpeg1_cuvid )
&lt;/span>&lt;span class="s1"> DEV.L. mpeg2video MPEG-2 video (decoders: mpeg2video mpegvideo mpeg2_qsv mpeg2_cuvid ) (encoders: mpeg2video mpeg2_qsv )
&lt;/span>&lt;span class="s1"> DEV.L. mpeg4 MPEG-4 part 2 (decoders: mpeg4 mpeg4_cuvid ) (encoders: mpeg4 libxvid )
&lt;/span>&lt;span class="s1"> D.V.L. msa1 MS ATC Screen
&lt;/span>&lt;span class="s1"> D.VI.S mscc Mandsoft Screen Capture Codec
&lt;/span>&lt;span class="s1"> D.V.L. msmpeg4v1 MPEG-4 part 2 Microsoft variant version 1
&lt;/span>&lt;span class="s1"> DEV.L. msmpeg4v2 MPEG-4 part 2 Microsoft variant version 2
&lt;/span>&lt;span class="s1"> DEV.L. msmpeg4v3 MPEG-4 part 2 Microsoft variant version 3 (decoders: msmpeg4 ) (encoders: msmpeg4 )
&lt;/span>&lt;span class="s1"> D.V..S msrle Microsoft RLE
&lt;/span>&lt;span class="s1"> D.V.L. mss1 MS Screen 1
&lt;/span>&lt;span class="s1"> D.VIL. mss2 MS Windows Media Video V9 Screen
&lt;/span>&lt;span class="s1"> DEV.L. msvideo1 Microsoft Video 1
&lt;/span>&lt;span class="s1"> D.VI.S mszh LCL (LossLess Codec Library) MSZH
&lt;/span>&lt;span class="s1"> D.V.L. mts2 MS Expression Encoder Screen
&lt;/span>&lt;span class="s1"> D.VIL. mvc1 Silicon Graphics Motion Video Compressor 1
&lt;/span>&lt;span class="s1"> D.VIL. mvc2 Silicon Graphics Motion Video Compressor 2
&lt;/span>&lt;span class="s1"> D.V..S mwsc MatchWare Screen Capture Codec
&lt;/span>&lt;span class="s1"> D.V.L. mxpeg Mobotix MxPEG video
&lt;/span>&lt;span class="s1"> D.V.L. nuv NuppelVideo/RTJPEG
&lt;/span>&lt;span class="s1"> D.V.L. paf_video Amazing Studio Packed Animation File Video
&lt;/span>&lt;span class="s1"> DEVI.S pam PAM (Portable AnyMap) image
&lt;/span>&lt;span class="s1"> DEVI.S pbm PBM (Portable BitMap) image
&lt;/span>&lt;span class="s1"> DEVI.S pcx PC Paintbrush PCX image
&lt;/span>&lt;span class="s1"> DEVI.S pgm PGM (Portable GrayMap) image
&lt;/span>&lt;span class="s1"> DEVI.S pgmyuv PGMYUV (Portable GrayMap YUV) image
&lt;/span>&lt;span class="s1"> D.VIL. pictor Pictor/PC Paint
&lt;/span>&lt;span class="s1"> D.VIL. pixlet Apple Pixlet
&lt;/span>&lt;span class="s1"> DEV..S png PNG (Portable Network Graphics) image
&lt;/span>&lt;span class="s1"> DEVI.S ppm PPM (Portable PixelMap) image
&lt;/span>&lt;span class="s1"> DEVIL. prores Apple ProRes (iCodec Pro) (encoders: prores prores_aw prores_ks )
&lt;/span>&lt;span class="s1"> D.VIL. prosumer Brooktree ProSumer Video
&lt;/span>&lt;span class="s1"> D.VI.S psd Photoshop PSD file
&lt;/span>&lt;span class="s1"> D.VIL. ptx V.Flash PTX image
&lt;/span>&lt;span class="s1"> D.VI.S qdraw Apple QuickDraw
&lt;/span>&lt;span class="s1"> D.V.L. qpeg Q-team QPEG
&lt;/span>&lt;span class="s1"> DEV..S qtrle QuickTime Animation (RLE) video
&lt;/span>&lt;span class="s1"> DEVI.S r10k AJA Kona 10-bit RGB Codec
&lt;/span>&lt;span class="s1"> DEVI.S r210 Uncompressed RGB 10-bit
&lt;/span>&lt;span class="s1"> D.V.L. rasc RemotelyAnywhere Screen Capture
&lt;/span>&lt;span class="s1"> DEVI.S rawvideo raw video
&lt;/span>&lt;span class="s1"> D.VIL. rl2 RL2 video
&lt;/span>&lt;span class="s1"> DEV.L. roq id RoQ video (decoders: roqvideo ) (encoders: roqvideo )
&lt;/span>&lt;span class="s1"> D.V.L. rpza QuickTime video (RPZA)
&lt;/span>&lt;span class="s1"> D.V..S rscc innoHeim/Rsupport Screen Capture Codec
&lt;/span>&lt;span class="s1"> DEV.L. rv10 RealVideo 1.0
&lt;/span>&lt;span class="s1"> DEV.L. rv20 RealVideo 2.0
&lt;/span>&lt;span class="s1"> D.V.L. rv30 RealVideo 3.0
&lt;/span>&lt;span class="s1"> D.V.L. rv40 RealVideo 4.0
&lt;/span>&lt;span class="s1"> D.V.L. sanm LucasArts SANM/SMUSH video
&lt;/span>&lt;span class="s1"> D.V.LS scpr ScreenPressor
&lt;/span>&lt;span class="s1"> D.V..S screenpresso Screenpresso
&lt;/span>&lt;span class="s1"> DEVI.S sgi SGI image
&lt;/span>&lt;span class="s1"> D.VI.S sgirle SGI RLE 8-bit
&lt;/span>&lt;span class="s1"> D.VI.S sheervideo BitJazz SheerVideo
&lt;/span>&lt;span class="s1"> D.V.L. smackvideo Smacker video (decoders: smackvid )
&lt;/span>&lt;span class="s1"> D.V.L. smc QuickTime Graphics (SMC)
&lt;/span>&lt;span class="s1"> D.V... smvjpeg Sigmatel Motion Video
&lt;/span>&lt;span class="s1"> DEV.LS snow Snow
&lt;/span>&lt;span class="s1"> D.VIL. sp5x Sunplus JPEG (SP5X)
&lt;/span>&lt;span class="s1"> D.VIL. speedhq NewTek SpeedHQ
&lt;/span>&lt;span class="s1"> D.VI.S srgc Screen Recorder Gold Codec
&lt;/span>&lt;span class="s1"> DEVI.S sunrast Sun Rasterfile image
&lt;/span>&lt;span class="s1"> ..V..S svg Scalable Vector Graphics
&lt;/span>&lt;span class="s1"> DEV.L. svq1 Sorenson Vector Quantizer 1 / Sorenson Video 1 / SVQ1
&lt;/span>&lt;span class="s1"> D.V.L. svq3 Sorenson Vector Quantizer 3 / Sorenson Video 3 / SVQ3
&lt;/span>&lt;span class="s1"> DEVI.S targa Truevision Targa image
&lt;/span>&lt;span class="s1"> D.VI.S targa_y216 Pinnacle TARGA CineWave YUV16
&lt;/span>&lt;span class="s1"> D.V.L. tdsc TDSC
&lt;/span>&lt;span class="s1"> D.V.L. tgq Electronic Arts TGQ video (decoders: eatgq )
&lt;/span>&lt;span class="s1"> D.V.L. tgv Electronic Arts TGV video (decoders: eatgv )
&lt;/span>&lt;span class="s1"> DEV.L. theora Theora (encoders: libtheora )
&lt;/span>&lt;span class="s1"> D.VIL. thp Nintendo Gamecube THP video
&lt;/span>&lt;span class="s1"> D.V.L. tiertexseqvideo Tiertex Limited SEQ video
&lt;/span>&lt;span class="s1"> DEVI.S tiff TIFF image
&lt;/span>&lt;span class="s1"> D.VIL. tmv 8088flex TMV
&lt;/span>&lt;span class="s1"> D.V.L. tqi Electronic Arts TQI video (decoders: eatqi )
&lt;/span>&lt;span class="s1"> D.V.L. truemotion1 Duck TrueMotion 1.0
&lt;/span>&lt;span class="s1"> D.V.L. truemotion2 Duck TrueMotion 2.0
&lt;/span>&lt;span class="s1"> D.VIL. truemotion2rt Duck TrueMotion 2.0 Real Time
&lt;/span>&lt;span class="s1"> D.V..S tscc TechSmith Screen Capture Codec (decoders: camtasia )
&lt;/span>&lt;span class="s1"> D.V.L. tscc2 TechSmith Screen Codec 2
&lt;/span>&lt;span class="s1"> D.VIL. txd Renderware TXD (TeXture Dictionary) image
&lt;/span>&lt;span class="s1"> D.V.L. ulti IBM UltiMotion (decoders: ultimotion )
&lt;/span>&lt;span class="s1"> DEVI.S utvideo Ut Video
&lt;/span>&lt;span class="s1"> DEVI.S v210 Uncompressed 4:2:2 10-bit
&lt;/span>&lt;span class="s1"> D.VI.S v210x Uncompressed 4:2:2 10-bit
&lt;/span>&lt;span class="s1"> DEVI.S v308 Uncompressed packed 4:4:4
&lt;/span>&lt;span class="s1"> DEVI.S v408 Uncompressed packed QT 4:4:4:4
&lt;/span>&lt;span class="s1"> DEVI.S v410 Uncompressed 4:4:4 10-bit
&lt;/span>&lt;span class="s1"> D.V.L. vb Beam Software VB
&lt;/span>&lt;span class="s1"> D.VI.S vble VBLE Lossless Codec
&lt;/span>&lt;span class="s1"> D.V.L. vc1 SMPTE VC-1 (decoders: vc1 vc1_qsv vc1_cuvid )
&lt;/span>&lt;span class="s1"> D.V.L. vc1image Windows Media Video 9 Image v2
&lt;/span>&lt;span class="s1"> D.VIL. vcr1 ATI VCR1
&lt;/span>&lt;span class="s1"> D.VIL. vixl Miro VideoXL (decoders: xl )
&lt;/span>&lt;span class="s1"> D.V.L. vmdvideo Sierra VMD video
&lt;/span>&lt;span class="s1"> D.V..S vmnc VMware Screen Codec / VMware Video
&lt;/span>&lt;span class="s1"> D.V.L. vp3 On2 VP3
&lt;/span>&lt;span class="s1"> D.V.L. vp5 On2 VP5
&lt;/span>&lt;span class="s1"> D.V.L. vp6 On2 VP6
&lt;/span>&lt;span class="s1"> D.V.L. vp6a On2 VP6 (Flash version, with alpha channel)
&lt;/span>&lt;span class="s1"> D.V.L. vp6f On2 VP6 (Flash version)
&lt;/span>&lt;span class="s1"> D.V.L. vp7 On2 VP7
&lt;/span>&lt;span class="s1"> DEV.L. vp8 On2 VP8 (decoders: vp8 libvpx vp8_cuvid vp8_qsv ) (encoders: libvpx )
&lt;/span>&lt;span class="s1"> DEV.L. vp9 Google VP9 (decoders: vp9 libvpx-vp9 vp9_cuvid ) (encoders: libvpx-vp9 )
&lt;/span>&lt;span class="s1"> D.V..S wcmv WinCAM Motion Video
&lt;/span>&lt;span class="s1"> DEVILS webp WebP (encoders: libwebp )
&lt;/span>&lt;span class="s1"> DEV.L. wmv1 Windows Media Video 7
&lt;/span>&lt;span class="s1"> DEV.L. wmv2 Windows Media Video 8
&lt;/span>&lt;span class="s1"> D.V.L. wmv3 Windows Media Video 9
&lt;/span>&lt;span class="s1"> D.V.L. wmv3image Windows Media Video 9 Image
&lt;/span>&lt;span class="s1"> D.VIL. wnv1 Winnov WNV1
&lt;/span>&lt;span class="s1"> DEV..S wrapped_avframe AVFrame to AVPacket passthrough
&lt;/span>&lt;span class="s1"> D.V.L. ws_vqa Westwood Studios VQA (Vector Quantized Animation) video (decoders: vqavideo )
&lt;/span>&lt;span class="s1"> D.V.L. xan_wc3 Wing Commander III / Xan
&lt;/span>&lt;span class="s1"> D.V.L. xan_wc4 Wing Commander IV / Xxan
&lt;/span>&lt;span class="s1"> D.VI.. xbin eXtended BINary text
&lt;/span>&lt;span class="s1"> DEVI.S xbm XBM (X BitMap) image
&lt;/span>&lt;span class="s1"> DEVIL. xface X-face image
&lt;/span>&lt;span class="s1"> D.VI.S xpm XPM (X PixMap) image
&lt;/span>&lt;span class="s1"> DEVI.S xwd XWD (X Window Dump) image
&lt;/span>&lt;span class="s1"> DEVI.S y41p Uncompressed YUV 4:1:1 12-bit
&lt;/span>&lt;span class="s1"> D.VI.S ylc YUY2 Lossless Codec
&lt;/span>&lt;span class="s1"> D.V.L. yop Psygnosis YOP Video
&lt;/span>&lt;span class="s1"> DEVI.S yuv4 Uncompressed packed 4:2:0
&lt;/span>&lt;span class="s1"> D.V..S zerocodec ZeroCodec Lossless Video
&lt;/span>&lt;span class="s1"> DEVI.S zlib LCL (LossLess Codec Library) ZLIB
&lt;/span>&lt;span class="s1"> DEV..S zmbv Zip Motion Blocks Video
&lt;/span>&lt;span class="s1"> ..A.L. 4gv 4GV (Fourth Generation Vocoder)
&lt;/span>&lt;span class="s1"> D.A.L. 8svx_exp 8SVX exponential
&lt;/span>&lt;span class="s1"> D.A.L. 8svx_fib 8SVX fibonacci
&lt;/span>&lt;span class="s1"> DEA.L. aac AAC (Advanced Audio Coding) (decoders: aac aac_fixed )
&lt;/span>&lt;span class="s1"> D.A.L. aac_latm AAC LATM (Advanced Audio Coding LATM syntax)
&lt;/span>&lt;span class="s1"> DEA.L. ac3 ATSC A/52A (AC-3) (decoders: ac3 ac3_fixed ) (encoders: ac3 ac3_fixed )
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_4xm ADPCM 4X Movie
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_adx SEGA CRI ADX ADPCM
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_afc ADPCM Nintendo Gamecube AFC
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_aica ADPCM Yamaha AICA
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ct ADPCM Creative Technology
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_dtk ADPCM Nintendo Gamecube DTK
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea ADPCM Electronic Arts
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea_maxis_xa ADPCM Electronic Arts Maxis CDROM XA
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea_r1 ADPCM Electronic Arts R1
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea_r2 ADPCM Electronic Arts R2
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea_r3 ADPCM Electronic Arts R3
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ea_xas ADPCM Electronic Arts XAS
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_g722 G.722 ADPCM (decoders: g722 ) (encoders: g722 )
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_g726 G.726 ADPCM (decoders: g726 ) (encoders: g726 )
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_g726le G.726 ADPCM little-endian (decoders: g726le ) (encoders: g726le )
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_amv ADPCM IMA AMV
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_apc ADPCM IMA CRYO APC
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_dat4 ADPCM IMA Eurocom DAT4
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_dk3 ADPCM IMA Duck DK3
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_dk4 ADPCM IMA Duck DK4
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_ea_eacs ADPCM IMA Electronic Arts EACS
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_ea_sead ADPCM IMA Electronic Arts SEAD
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_iss ADPCM IMA Funcom ISS
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_oki ADPCM IMA Dialogic OKI
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_ima_qt ADPCM IMA QuickTime
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_rad ADPCM IMA Radical
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_smjpeg ADPCM IMA Loki SDL MJPEG
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_ima_wav ADPCM IMA WAV
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_ima_ws ADPCM IMA Westwood
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_ms ADPCM Microsoft
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_mtaf ADPCM MTAF
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_psx ADPCM Playstation
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_sbpro_2 ADPCM Sound Blaster Pro 2-bit
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_sbpro_3 ADPCM Sound Blaster Pro 2.6-bit
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_sbpro_4 ADPCM Sound Blaster Pro 4-bit
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_swf ADPCM Shockwave Flash
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_thp ADPCM Nintendo THP
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_thp_le ADPCM Nintendo THP (Little-Endian)
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_vima LucasArts VIMA audio
&lt;/span>&lt;span class="s1"> D.A.L. adpcm_xa ADPCM CDROM XA
&lt;/span>&lt;span class="s1"> DEA.L. adpcm_yamaha ADPCM Yamaha
&lt;/span>&lt;span class="s1"> DEAI.S alac ALAC (Apple Lossless Audio Codec)
&lt;/span>&lt;span class="s1"> DEA.L. amr_nb AMR-NB (Adaptive Multi-Rate NarrowBand) (decoders: amrnb libopencore_amrnb ) (encoders: libopencore_amrnb )
&lt;/span>&lt;span class="s1"> DEA.L. amr_wb AMR-WB (Adaptive Multi-Rate WideBand) (decoders: amrwb libopencore_amrwb ) (encoders: libvo_amrwbenc )
&lt;/span>&lt;span class="s1"> D.A..S ape Monkey&amp;#39;&lt;/span>s Audio
DEA.L. aptx aptX &lt;span class="o">(&lt;/span>Audio Processing Technology &lt;span class="k">for&lt;/span> Bluetooth&lt;span class="o">)&lt;/span>
DEA.L. aptx_hd aptX HD &lt;span class="o">(&lt;/span>Audio Processing Technology &lt;span class="k">for&lt;/span> Bluetooth&lt;span class="o">)&lt;/span>
D.A.L. atrac1 ATRAC1 &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding&lt;span class="o">)&lt;/span>
D.A.L. atrac3 ATRAC3 &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding 3&lt;span class="o">)&lt;/span>
D.A..S atrac3al ATRAC3 AL &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding &lt;span class="m">3&lt;/span> Advanced Lossless&lt;span class="o">)&lt;/span>
D.A.L. atrac3p ATRAC3+ &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding 3+&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: atrac3plus &lt;span class="o">)&lt;/span>
D.A..S atrac3pal ATRAC3+ AL &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding 3+ Advanced Lossless&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: atrac3plusal &lt;span class="o">)&lt;/span>
D.A.L. atrac9 ATRAC9 &lt;span class="o">(&lt;/span>Adaptive TRansform Acoustic Coding 9&lt;span class="o">)&lt;/span>
D.A.L. avc On2 Audio &lt;span class="k">for&lt;/span> Video Codec &lt;span class="o">(&lt;/span>decoders: on2avc &lt;span class="o">)&lt;/span>
D.A.L. binkaudio_dct Bink Audio &lt;span class="o">(&lt;/span>DCT&lt;span class="o">)&lt;/span>
D.A.L. binkaudio_rdft Bink Audio &lt;span class="o">(&lt;/span>RDFT&lt;span class="o">)&lt;/span>
D.A.L. bmv_audio Discworld II BMV audio
..A.L. celt Constrained Energy Lapped Transform &lt;span class="o">(&lt;/span>CELT&lt;span class="o">)&lt;/span>
..A.L. codec2 codec2 &lt;span class="o">(&lt;/span>very low bitrate speech codec&lt;span class="o">)&lt;/span>
DEA.L. comfortnoise RFC &lt;span class="m">3389&lt;/span> Comfort Noise
D.A.L. cook Cook / Cooker / Gecko &lt;span class="o">(&lt;/span>RealAudio G2&lt;span class="o">)&lt;/span>
D.A.L. dolby_e Dolby E
D.A.L. dsd_lsbf DSD &lt;span class="o">(&lt;/span>Direct Stream Digital&lt;span class="o">)&lt;/span>, least significant bit first
D.A.L. dsd_lsbf_planar DSD &lt;span class="o">(&lt;/span>Direct Stream Digital&lt;span class="o">)&lt;/span>, least significant bit first, planar
D.A.L. dsd_msbf DSD &lt;span class="o">(&lt;/span>Direct Stream Digital&lt;span class="o">)&lt;/span>, most significant bit first
D.A.L. dsd_msbf_planar DSD &lt;span class="o">(&lt;/span>Direct Stream Digital&lt;span class="o">)&lt;/span>, most significant bit first, planar
D.A.L. dsicinaudio Delphine Software International CIN audio
D.A.L. dss_sp Digital Speech Standard - Standard Play mode &lt;span class="o">(&lt;/span>DSS SP&lt;span class="o">)&lt;/span>
D.A..S dst DST &lt;span class="o">(&lt;/span>Direct Stream Transfer&lt;span class="o">)&lt;/span>
DEA.LS dts DCA &lt;span class="o">(&lt;/span>DTS Coherent Acoustics&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: dca &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: dca &lt;span class="o">)&lt;/span>
D.A.L. dvaudio DV audio
DEA.L. eac3 ATSC A/52B &lt;span class="o">(&lt;/span>AC-3, E-AC-3&lt;span class="o">)&lt;/span>
D.A.L. evrc EVRC &lt;span class="o">(&lt;/span>Enhanced Variable Rate Codec&lt;span class="o">)&lt;/span>
DEAI.S flac FLAC &lt;span class="o">(&lt;/span>Free Lossless Audio Codec&lt;span class="o">)&lt;/span>
DEA.L. g723_1 G.723.1
D.A.L. g729 G.729
D.A.L. gremlin_dpcm DPCM Gremlin
D.A.L. gsm GSM
D.A.L. gsm_ms GSM Microsoft variant
D.A.L. iac IAC &lt;span class="o">(&lt;/span>Indeo Audio Coder&lt;span class="o">)&lt;/span>
D.A.L. ilbc iLBC &lt;span class="o">(&lt;/span>Internet Low Bitrate Codec&lt;span class="o">)&lt;/span>
D.A.L. imc IMC &lt;span class="o">(&lt;/span>Intel Music Coder&lt;span class="o">)&lt;/span>
D.A.L. interplay_dpcm DPCM Interplay
D.A.L. interplayacm Interplay ACM
D.A.L. mace3 MACE &lt;span class="o">(&lt;/span>Macintosh Audio Compression/Expansion&lt;span class="o">)&lt;/span> 3:1
D.A.L. mace6 MACE &lt;span class="o">(&lt;/span>Macintosh Audio Compression/Expansion&lt;span class="o">)&lt;/span> 6:1
D.A.L. metasound Voxware MetaSound
DEA..S mlp MLP &lt;span class="o">(&lt;/span>Meridian Lossless Packing&lt;span class="o">)&lt;/span>
D.A.L. mp1 MP1 &lt;span class="o">(&lt;/span>MPEG audio layer 1&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: mp1 mp1float &lt;span class="o">)&lt;/span>
DEA.L. mp2 MP2 &lt;span class="o">(&lt;/span>MPEG audio layer 2&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: mp2 mp2float &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: mp2 mp2fixed libtwolame &lt;span class="o">)&lt;/span>
DEA.L. mp3 MP3 &lt;span class="o">(&lt;/span>MPEG audio layer 3&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: mp3float mp3 &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libmp3lame libshine &lt;span class="o">)&lt;/span>
D.A.L. mp3adu ADU &lt;span class="o">(&lt;/span>Application Data Unit&lt;span class="o">)&lt;/span> MP3 &lt;span class="o">(&lt;/span>MPEG audio layer 3&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: mp3adufloat mp3adu &lt;span class="o">)&lt;/span>
D.A.L. mp3on4 MP3onMP4 &lt;span class="o">(&lt;/span>decoders: mp3on4float mp3on4 &lt;span class="o">)&lt;/span>
D.A..S mp4als MPEG-4 Audio Lossless Coding &lt;span class="o">(&lt;/span>ALS&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: als &lt;span class="o">)&lt;/span>
D.A.L. musepack7 Musepack SV7 &lt;span class="o">(&lt;/span>decoders: mpc7 &lt;span class="o">)&lt;/span>
D.A.L. musepack8 Musepack SV8 &lt;span class="o">(&lt;/span>decoders: mpc8 &lt;span class="o">)&lt;/span>
DEA.L. nellymoser Nellymoser Asao
DEA.L. opus Opus &lt;span class="o">(&lt;/span>Opus Interactive Audio Codec&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: opus libopus &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: opus libopus &lt;span class="o">)&lt;/span>
D.A.L. paf_audio Amazing Studio Packed Animation File Audio
DEA.L. pcm_alaw PCM A-law / G.711 A-law
D.A..S pcm_bluray PCM signed 16&lt;span class="p">|&lt;/span>20&lt;span class="p">|&lt;/span>24-bit big-endian &lt;span class="k">for&lt;/span> Blu-ray media
D.A..S pcm_dvd PCM signed 20&lt;span class="p">|&lt;/span>24-bit big-endian
D.A..S pcm_f16le PCM 16.8 floating point little-endian
D.A..S pcm_f24le PCM 24.0 floating point little-endian
DEA..S pcm_f32be PCM 32-bit floating point big-endian
DEA..S pcm_f32le PCM 32-bit floating point little-endian
DEA..S pcm_f64be PCM 64-bit floating point big-endian
DEA..S pcm_f64le PCM 64-bit floating point little-endian
D.A..S pcm_lxf PCM signed 20-bit little-endian planar
DEA.L. pcm_mulaw PCM mu-law / G.711 mu-law
DEA..S pcm_s16be PCM signed 16-bit big-endian
DEA..S pcm_s16be_planar PCM signed 16-bit big-endian planar
DEA..S pcm_s16le PCM signed 16-bit little-endian
DEA..S pcm_s16le_planar PCM signed 16-bit little-endian planar
DEA..S pcm_s24be PCM signed 24-bit big-endian
DEA..S pcm_s24daud PCM D-Cinema audio signed 24-bit
DEA..S pcm_s24le PCM signed 24-bit little-endian
DEA..S pcm_s24le_planar PCM signed 24-bit little-endian planar
DEA..S pcm_s32be PCM signed 32-bit big-endian
DEA..S pcm_s32le PCM signed 32-bit little-endian
DEA..S pcm_s32le_planar PCM signed 32-bit little-endian planar
DEA..S pcm_s64be PCM signed 64-bit big-endian
DEA..S pcm_s64le PCM signed 64-bit little-endian
DEA..S pcm_s8 PCM signed 8-bit
DEA..S pcm_s8_planar PCM signed 8-bit planar
DEA..S pcm_u16be PCM unsigned 16-bit big-endian
DEA..S pcm_u16le PCM unsigned 16-bit little-endian
DEA..S pcm_u24be PCM unsigned 24-bit big-endian
DEA..S pcm_u24le PCM unsigned 24-bit little-endian
DEA..S pcm_u32be PCM unsigned 32-bit big-endian
DEA..S pcm_u32le PCM unsigned 32-bit little-endian
DEA..S pcm_u8 PCM unsigned 8-bit
DEA.L. pcm_vidc PCM Archimedes VIDC
D.A.L. pcm_zork PCM Zork
D.A.L. qcelp QCELP / PureVoice
D.A.L. qdm2 QDesign Music Codec &lt;span class="m">2&lt;/span>
D.A.L. qdmc QDesign Music
DEA.L. ra_144 RealAudio 1.0 &lt;span class="o">(&lt;/span>14.4K&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: real_144 &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: real_144 &lt;span class="o">)&lt;/span>
D.A.L. ra_288 RealAudio 2.0 &lt;span class="o">(&lt;/span>28.8K&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: real_288 &lt;span class="o">)&lt;/span>
D.A..S ralf RealAudio Lossless
DEA.L. roq_dpcm DPCM id RoQ
DEA..S s302m SMPTE 302M
DEA.L. sbc SBC &lt;span class="o">(&lt;/span>low-complexity subband codec&lt;span class="o">)&lt;/span>
D.A.L. sdx2_dpcm DPCM Squareroot-Delta-Exact
D.A..S shorten Shorten
D.A.L. sipr RealAudio SIPR / ACELP.NET
D.A.L. smackaudio Smacker audio &lt;span class="o">(&lt;/span>decoders: smackaud &lt;span class="o">)&lt;/span>
..A.L. smv SMV &lt;span class="o">(&lt;/span>Selectable Mode Vocoder&lt;span class="o">)&lt;/span>
D.A.L. sol_dpcm DPCM Sol
DEA... sonic Sonic
.EA... sonicls Sonic lossless
DEA.L. speex Speex &lt;span class="o">(&lt;/span>decoders: libspeex &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: libspeex &lt;span class="o">)&lt;/span>
D.AI.S tak TAK &lt;span class="o">(&lt;/span>Tom&lt;span class="err">&amp;#39;&lt;/span>s lossless Audio Kompressor&lt;span class="o">)&lt;/span>
DEA..S truehd TrueHD
D.A.L. truespeech DSP Group TrueSpeech
DEAI.S tta TTA &lt;span class="o">(&lt;/span>True Audio&lt;span class="o">)&lt;/span>
D.A.L. twinvq VQF TwinVQ
D.A.L. vmdaudio Sierra VMD audio
DEA.L. vorbis Vorbis &lt;span class="o">(&lt;/span>decoders: vorbis libvorbis &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: vorbis libvorbis &lt;span class="o">)&lt;/span>
D.A... wavesynth Wave synthesis pseudo-codec
DEAILS wavpack WavPack &lt;span class="o">(&lt;/span>encoders: wavpack libwavpack &lt;span class="o">)&lt;/span>
D.A.L. westwood_snd1 Westwood Audio &lt;span class="o">(&lt;/span>SND1&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>decoders: ws_snd1 &lt;span class="o">)&lt;/span>
D.A..S wmalossless Windows Media Audio Lossless
D.A.L. wmapro Windows Media Audio &lt;span class="m">9&lt;/span> Professional
DEA.L. wmav1 Windows Media Audio &lt;span class="m">1&lt;/span>
DEA.L. wmav2 Windows Media Audio &lt;span class="m">2&lt;/span>
D.A.L. wmavoice Windows Media Audio Voice
D.A.L. xan_dpcm DPCM Xan
D.A.L. xma1 Xbox Media Audio &lt;span class="m">1&lt;/span>
D.A.L. xma2 Xbox Media Audio &lt;span class="m">2&lt;/span>
..D... bin_data binary data
..D... dvd_nav_packet DVD Nav packet
..D... klv SMPTE 336M Key-Length-Value &lt;span class="o">(&lt;/span>KLV&lt;span class="o">)&lt;/span> metadata
..D... otf OpenType font
..D... scte_35 SCTE &lt;span class="m">35&lt;/span> Message Queue
..D... timed_id3 timed ID3 metadata
..D... ttf TrueType font
DES... ass ASS &lt;span class="o">(&lt;/span>Advanced SSA&lt;span class="o">)&lt;/span> subtitle &lt;span class="o">(&lt;/span>decoders: ssa ass &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: ssa ass &lt;span class="o">)&lt;/span>
DES... dvb_subtitle DVB subtitles &lt;span class="o">(&lt;/span>decoders: dvbsub &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: dvbsub &lt;span class="o">)&lt;/span>
..S... dvb_teletext DVB teletext
DES... dvd_subtitle DVD subtitles &lt;span class="o">(&lt;/span>decoders: dvdsub &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: dvdsub &lt;span class="o">)&lt;/span>
D.S... eia_608 EIA-608 closed captions &lt;span class="o">(&lt;/span>decoders: cc_dec &lt;span class="o">)&lt;/span>
D.S... hdmv_pgs_subtitle HDMV Presentation Graphic Stream subtitles &lt;span class="o">(&lt;/span>decoders: pgssub &lt;span class="o">)&lt;/span>
..S... hdmv_text_subtitle HDMV Text subtitle
D.S... jacosub JACOsub subtitle
D.S... microdvd MicroDVD subtitle
DES... mov_text MOV text
D.S... mpl2 MPL2 subtitle
D.S... pjs PJS &lt;span class="o">(&lt;/span>Phoenix Japanimation Society&lt;span class="o">)&lt;/span> subtitle
D.S... realtext RealText subtitle
D.S... sami SAMI subtitle
..S... srt SubRip subtitle with embedded timing
..S... ssa SSA &lt;span class="o">(&lt;/span>SubStation Alpha&lt;span class="o">)&lt;/span> subtitle
D.S... stl Spruce subtitle format
DES... subrip SubRip subtitle &lt;span class="o">(&lt;/span>decoders: srt subrip &lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>encoders: srt subrip &lt;span class="o">)&lt;/span>
D.S... subviewer SubViewer subtitle
D.S... subviewer1 SubViewer v1 subtitle
DES... text raw UTF-8 text
..S... ttml Timed Text Markup Language
D.S... vplayer VPlayer subtitle
DES... webvtt WebVTT subtitle
DES... xsub XSUB
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="formats">formats&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;span class="lnt">281
&lt;/span>&lt;span class="lnt">282
&lt;/span>&lt;span class="lnt">283
&lt;/span>&lt;span class="lnt">284
&lt;/span>&lt;span class="lnt">285
&lt;/span>&lt;span class="lnt">286
&lt;/span>&lt;span class="lnt">287
&lt;/span>&lt;span class="lnt">288
&lt;/span>&lt;span class="lnt">289
&lt;/span>&lt;span class="lnt">290
&lt;/span>&lt;span class="lnt">291
&lt;/span>&lt;span class="lnt">292
&lt;/span>&lt;span class="lnt">293
&lt;/span>&lt;span class="lnt">294
&lt;/span>&lt;span class="lnt">295
&lt;/span>&lt;span class="lnt">296
&lt;/span>&lt;span class="lnt">297
&lt;/span>&lt;span class="lnt">298
&lt;/span>&lt;span class="lnt">299
&lt;/span>&lt;span class="lnt">300
&lt;/span>&lt;span class="lnt">301
&lt;/span>&lt;span class="lnt">302
&lt;/span>&lt;span class="lnt">303
&lt;/span>&lt;span class="lnt">304
&lt;/span>&lt;span class="lnt">305
&lt;/span>&lt;span class="lnt">306
&lt;/span>&lt;span class="lnt">307
&lt;/span>&lt;span class="lnt">308
&lt;/span>&lt;span class="lnt">309
&lt;/span>&lt;span class="lnt">310
&lt;/span>&lt;span class="lnt">311
&lt;/span>&lt;span class="lnt">312
&lt;/span>&lt;span class="lnt">313
&lt;/span>&lt;span class="lnt">314
&lt;/span>&lt;span class="lnt">315
&lt;/span>&lt;span class="lnt">316
&lt;/span>&lt;span class="lnt">317
&lt;/span>&lt;span class="lnt">318
&lt;/span>&lt;span class="lnt">319
&lt;/span>&lt;span class="lnt">320
&lt;/span>&lt;span class="lnt">321
&lt;/span>&lt;span class="lnt">322
&lt;/span>&lt;span class="lnt">323
&lt;/span>&lt;span class="lnt">324
&lt;/span>&lt;span class="lnt">325
&lt;/span>&lt;span class="lnt">326
&lt;/span>&lt;span class="lnt">327
&lt;/span>&lt;span class="lnt">328
&lt;/span>&lt;span class="lnt">329
&lt;/span>&lt;span class="lnt">330
&lt;/span>&lt;span class="lnt">331
&lt;/span>&lt;span class="lnt">332
&lt;/span>&lt;span class="lnt">333
&lt;/span>&lt;span class="lnt">334
&lt;/span>&lt;span class="lnt">335
&lt;/span>&lt;span class="lnt">336
&lt;/span>&lt;span class="lnt">337
&lt;/span>&lt;span class="lnt">338
&lt;/span>&lt;span class="lnt">339
&lt;/span>&lt;span class="lnt">340
&lt;/span>&lt;span class="lnt">341
&lt;/span>&lt;span class="lnt">342
&lt;/span>&lt;span class="lnt">343
&lt;/span>&lt;span class="lnt">344
&lt;/span>&lt;span class="lnt">345
&lt;/span>&lt;span class="lnt">346
&lt;/span>&lt;span class="lnt">347
&lt;/span>&lt;span class="lnt">348
&lt;/span>&lt;span class="lnt">349
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">File formats:
D. &lt;span class="o">=&lt;/span> Demuxing supported
.E &lt;span class="o">=&lt;/span> Muxing supported
--
D 3dostr 3DO STR
E 3g2 3GP2 &lt;span class="o">(&lt;/span>3GPP2 file format&lt;span class="o">)&lt;/span>
E 3gp 3GP &lt;span class="o">(&lt;/span>3GPP file format&lt;span class="o">)&lt;/span>
D 4xm 4X Technologies
E a64 a64 - video &lt;span class="k">for&lt;/span> Commodore &lt;span class="m">64&lt;/span>
D aa Audible AA format files
D aac raw ADTS AAC &lt;span class="o">(&lt;/span>Advanced Audio Coding&lt;span class="o">)&lt;/span>
DE ac3 raw AC-3
D acm Interplay ACM
D act ACT Voice file format
D adf Artworx Data Format
D adp ADP
D ads Sony PS2 ADS
E adts ADTS AAC &lt;span class="o">(&lt;/span>Advanced Audio Coding&lt;span class="o">)&lt;/span>
DE adx CRI ADX
D aea MD STUDIO audio
D afc AFC
DE aiff Audio IFF
D aix CRI AIX
DE alaw PCM A-law
D alias_pix Alias/Wavefront PIX image
DE amr 3GPP AMR
D amrnb raw AMR-NB
D amrwb raw AMR-WB
D anm Deluxe Paint Animation
D apc CRYO APC
D ape Monkey&lt;span class="err">&amp;#39;&lt;/span>s Audio
DE apng Animated Portable Network Graphics
DE aptx raw aptX &lt;span class="o">(&lt;/span>Audio Processing Technology &lt;span class="k">for&lt;/span> Bluetooth&lt;span class="o">)&lt;/span>
DE aptx_hd raw aptX HD &lt;span class="o">(&lt;/span>Audio Processing Technology &lt;span class="k">for&lt;/span> Bluetooth&lt;span class="o">)&lt;/span>
D aqtitle AQTitle subtitles
DE asf ASF &lt;span class="o">(&lt;/span>Advanced / Active Streaming Format&lt;span class="o">)&lt;/span>
D asf_o ASF &lt;span class="o">(&lt;/span>Advanced / Active Streaming Format&lt;span class="o">)&lt;/span>
E asf_stream ASF &lt;span class="o">(&lt;/span>Advanced / Active Streaming Format&lt;span class="o">)&lt;/span>
DE ass SSA &lt;span class="o">(&lt;/span>SubStation Alpha&lt;span class="o">)&lt;/span> subtitle
DE ast AST &lt;span class="o">(&lt;/span>Audio Stream&lt;span class="o">)&lt;/span>
DE au Sun AU
DE avi AVI &lt;span class="o">(&lt;/span>Audio Video Interleaved&lt;span class="o">)&lt;/span>
D avisynth AviSynth script
E avm2 SWF &lt;span class="o">(&lt;/span>ShockWave Flash&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>AVM2&lt;span class="o">)&lt;/span>
D avr AVR &lt;span class="o">(&lt;/span>Audio Visual Research&lt;span class="o">)&lt;/span>
D avs Argonaut Games Creature Shock
DE avs2 raw AVS2-P2/IEEE1857.4 video
D bethsoftvid Bethesda Softworks VID
D bfi Brute Force &lt;span class="p">&amp;amp;&lt;/span> Ignorance
D bfstm BFSTM &lt;span class="o">(&lt;/span>Binary Cafe Stream&lt;span class="o">)&lt;/span>
D bin Binary text
D bink Bink
DE bit G.729 BIT file format
D bmp_pipe piped bmp sequence
D bmv Discworld II BMV
D boa Black Ops Audio
D brender_pix BRender PIX image
D brstm BRSTM &lt;span class="o">(&lt;/span>Binary Revolution Stream&lt;span class="o">)&lt;/span>
D c93 Interplay C93
DE caf Apple CAF &lt;span class="o">(&lt;/span>Core Audio Format&lt;span class="o">)&lt;/span>
DE cavsvideo raw Chinese AVS &lt;span class="o">(&lt;/span>Audio Video Standard&lt;span class="o">)&lt;/span> video
D cdg CD Graphics
D cdxl Commodore CDXL video
D cine Phantom Cine
DE codec2 codec2 .c2 muxer
DE codec2raw raw codec2 muxer
D concat Virtual concatenation script
E crc CRC testing
DE dash DASH Muxer
DE data raw data
DE daud D-Cinema audio
D dcstr Sega DC STR
D dds_pipe piped dds sequence
D dfa Chronomaster DFA
DE dirac raw Dirac
DE dnxhd raw DNxHD &lt;span class="o">(&lt;/span>SMPTE VC-3&lt;span class="o">)&lt;/span>
D dpx_pipe piped dpx sequence
D dsf DSD Stream File &lt;span class="o">(&lt;/span>DSF&lt;span class="o">)&lt;/span>
D dshow DirectShow capture
D dsicin Delphine Software International CIN
D dss Digital Speech Standard &lt;span class="o">(&lt;/span>DSS&lt;span class="o">)&lt;/span>
DE dts raw DTS
D dtshd raw DTS-HD
DE dv DV &lt;span class="o">(&lt;/span>Digital Video&lt;span class="o">)&lt;/span>
D dvbsub raw dvbsub
D dvbtxt dvbtxt
E dvd MPEG-2 PS &lt;span class="o">(&lt;/span>DVD VOB&lt;span class="o">)&lt;/span>
D dxa DXA
D ea Electronic Arts Multimedia
D ea_cdata Electronic Arts cdata
DE eac3 raw E-AC-3
D epaf Ensoniq Paris Audio File
D exr_pipe piped exr sequence
DE f32be PCM 32-bit floating-point big-endian
DE f32le PCM 32-bit floating-point little-endian
E f4v F4V Adobe Flash Video
DE f64be PCM 64-bit floating-point big-endian
DE f64le PCM 64-bit floating-point little-endian
DE ffmetadata FFmpeg metadata in text
E fifo FIFO queue pseudo-muxer
E fifo_test Fifo &lt;span class="nb">test&lt;/span> muxer
DE film_cpk Sega FILM / CPK
DE filmstrip Adobe Filmstrip
DE fits Flexible Image Transport System
DE flac raw FLAC
D flic FLI/FLC/FLX animation
DE flv FLV &lt;span class="o">(&lt;/span>Flash Video&lt;span class="o">)&lt;/span>
E framecrc framecrc testing
E framehash Per-frame &lt;span class="nb">hash&lt;/span> testing
E framemd5 Per-frame MD5 testing
D frm Megalux Frame
D fsb FMOD Sample Bank
DE g722 raw G.722
DE g723_1 raw G.723.1
DE g726 raw big-endian G.726 &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;left-justified&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
DE g726le raw little-endian G.726 &lt;span class="o">(&lt;/span>&lt;span class="s2">&amp;#34;right-justified&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
D g729 G.729 raw format demuxer
D gdigrab GDI API Windows frame grabber
D gdv Gremlin Digital Video
D genh GENeric Header
DE gif GIF Animation
DE gsm raw GSM
DE gxf GXF &lt;span class="o">(&lt;/span>General eXchange Format&lt;span class="o">)&lt;/span>
DE h261 raw H.261
DE h263 raw H.263
DE h264 raw H.264 video
E &lt;span class="nb">hash&lt;/span> Hash testing
E hds HDS Muxer
DE hevc raw HEVC video
E hls Apple HTTP Live Streaming
D hls,applehttp Apple HTTP Live Streaming
D hnm Cryo HNM v4
DE ico Microsoft Windows ICO
D idcin id Cinematic
D idf iCE Draw File
D iff IFF &lt;span class="o">(&lt;/span>Interchange File Format&lt;span class="o">)&lt;/span>
DE ilbc iLBC storage
DE image2 image2 sequence
DE image2pipe piped image2 sequence
D ingenient raw Ingenient MJPEG
D ipmovie Interplay MVE
E ipod iPod H.264 MP4 &lt;span class="o">(&lt;/span>MPEG-4 Part 14&lt;span class="o">)&lt;/span>
DE ircam Berkeley/IRCAM/CARL Sound Format
E ismv ISMV/ISMA &lt;span class="o">(&lt;/span>Smooth Streaming&lt;span class="o">)&lt;/span>
D iss Funcom ISS
D iv8 IndigoVision &lt;span class="m">8000&lt;/span> video
DE ivf On2 IVF
D ivr IVR &lt;span class="o">(&lt;/span>Internet Video Recording&lt;span class="o">)&lt;/span>
D j2k_pipe piped j2k sequence
DE jacosub JACOsub subtitle format
D jpeg_pipe piped jpeg sequence
D jpegls_pipe piped jpegls sequence
D jv Bitmap Brothers JV
E latm LOAS/LATM
D lavfi Libavfilter virtual input device
D live_flv live RTMP FLV &lt;span class="o">(&lt;/span>Flash Video&lt;span class="o">)&lt;/span>
D lmlm4 raw lmlm4
D loas LOAS AudioSyncStream
DE lrc LRC lyrics
D lvf LVF
D lxf VR native stream &lt;span class="o">(&lt;/span>LXF&lt;span class="o">)&lt;/span>
DE m4v raw MPEG-4 video
E matroska Matroska
D matroska,webm Matroska / WebM
E md5 MD5 testing
D mgsts Metal Gear Solid: The Twin Snakes
DE microdvd MicroDVD subtitle format
DE mjpeg raw MJPEG video
D mjpeg_2000 raw MJPEG &lt;span class="m">2000&lt;/span> video
E mkvtimestamp_v2 extract pts as timecode v2 format, as defined by mkvtoolnix
DE mlp raw MLP
D mlv Magic Lantern Video &lt;span class="o">(&lt;/span>MLV&lt;span class="o">)&lt;/span>
D mm American Laser Games MM
DE mmf Yamaha SMAF
E mov QuickTime / MOV
D mov,mp4,m4a,3gp,3g2,mj2 QuickTime / MOV
E mp2 MP2 &lt;span class="o">(&lt;/span>MPEG audio layer 2&lt;span class="o">)&lt;/span>
DE mp3 MP3 &lt;span class="o">(&lt;/span>MPEG audio layer 3&lt;span class="o">)&lt;/span>
E mp4 MP4 &lt;span class="o">(&lt;/span>MPEG-4 Part 14&lt;span class="o">)&lt;/span>
D mpc Musepack
D mpc8 Musepack SV8
DE mpeg MPEG-1 Systems / MPEG program stream
E mpeg1video raw MPEG-1 video
E mpeg2video raw MPEG-2 video
DE mpegts MPEG-TS &lt;span class="o">(&lt;/span>MPEG-2 Transport Stream&lt;span class="o">)&lt;/span>
D mpegtsraw raw MPEG-TS &lt;span class="o">(&lt;/span>MPEG-2 Transport Stream&lt;span class="o">)&lt;/span>
D mpegvideo raw MPEG video
DE mpjpeg MIME multipart JPEG
D mpl2 MPL2 subtitles
D mpsub MPlayer subtitles
D msf Sony PS3 MSF
D msnwctcp MSN TCP Webcam stream
D mtaf Konami PS2 MTAF
D mtv MTV
DE mulaw PCM mu-law
D musx Eurocom MUSX
D mv Silicon Graphics Movie
D mvi Motion Pixels MVI
DE mxf MXF &lt;span class="o">(&lt;/span>Material eXchange Format&lt;span class="o">)&lt;/span>
E mxf_d10 MXF &lt;span class="o">(&lt;/span>Material eXchange Format&lt;span class="o">)&lt;/span> D-10 Mapping
E mxf_opatom MXF &lt;span class="o">(&lt;/span>Material eXchange Format&lt;span class="o">)&lt;/span> Operational Pattern Atom
D mxg MxPEG clip
D nc NC camera feed
D nistsphere NIST SPeech HEader REsources
D nsp Computerized Speech Lab NSP
D nsv Nullsoft Streaming Video
E null raw null video
DE nut NUT
D nuv NuppelVideo
E oga Ogg Audio
DE ogg Ogg
E ogv Ogg Video
DE oma Sony OpenMG audio
E opus Ogg Opus
D paf Amazing Studio Packed Animation File
D pam_pipe piped pam sequence
D pbm_pipe piped pbm sequence
D pcx_pipe piped pcx sequence
D pgm_pipe piped pgm sequence
D pgmyuv_pipe piped pgmyuv sequence
D pictor_pipe piped pictor sequence
D pjs PJS &lt;span class="o">(&lt;/span>Phoenix Japanimation Society&lt;span class="o">)&lt;/span> subtitles
D pmp Playstation Portable PMP
D png_pipe piped png sequence
D ppm_pipe piped ppm sequence
D psd_pipe piped psd sequence
E psp PSP MP4 &lt;span class="o">(&lt;/span>MPEG-4 Part 14&lt;span class="o">)&lt;/span>
D psxstr Sony Playstation STR
D pva TechnoTrend PVA
D pvf PVF &lt;span class="o">(&lt;/span>Portable Voice Format&lt;span class="o">)&lt;/span>
D qcp QCP
D qdraw_pipe piped qdraw sequence
D r3d REDCODE R3D
DE rawvideo raw video
D realtext RealText subtitle format
D redspark RedSpark
D rl2 RL2
DE rm RealMedia
DE roq raw id RoQ
D rpl RPL / ARMovie
D rsd GameCube RSD
DE rso Lego Mindstorms RSO
DE rtp RTP output
E rtp_mpegts RTP/mpegts output format
DE rtsp RTSP output
DE s16be PCM signed 16-bit big-endian
DE s16le PCM signed 16-bit little-endian
DE s24be PCM signed 24-bit big-endian
DE s24le PCM signed 24-bit little-endian
DE s32be PCM signed 32-bit big-endian
DE s32le PCM signed 32-bit little-endian
D s337m SMPTE 337M
DE s8 PCM signed 8-bit
D sami SAMI subtitle format
DE sap SAP output
DE sbc raw SBC
D sbg SBaGen binaural beats script
DE scc Scenarist Closed Captions
E sdl,sdl2 SDL2 output device
D sdp SDP
D sdr2 SDR2
D sds MIDI Sample Dump Standard
D sdx Sample Dump eXchange
E segment segment
D ser SER &lt;span class="o">(&lt;/span>Simple uncompressed video format &lt;span class="k">for&lt;/span> astronomical capturing&lt;span class="o">)&lt;/span>
D sgi_pipe piped sgi sequence
D shn raw Shorten
D siff Beam Software SIFF
E singlejpeg JPEG single image
D sln Asterisk raw pcm
DE smjpeg Loki SDL MJPEG
D smk Smacker
E smoothstreaming Smooth Streaming Muxer
D smush LucasArts Smush
D sol Sierra SOL
DE sox SoX native
DE spdif IEC &lt;span class="m">61937&lt;/span> &lt;span class="o">(&lt;/span>used on S/PDIF - IEC958&lt;span class="o">)&lt;/span>
E spx Ogg Speex
DE srt SubRip subtitle
D stl Spruce subtitle format
E stream_segment,ssegment streaming segment muxer
D subviewer SubViewer subtitle format
D subviewer1 SubViewer v1 subtitle format
D sunrast_pipe piped sunrast sequence
DE sup raw HDMV Presentation Graphic Stream subtitles
D svag Konami PS2 SVAG
E svcd MPEG-2 PS &lt;span class="o">(&lt;/span>SVCD&lt;span class="o">)&lt;/span>
D svg_pipe piped svg sequence
DE swf SWF &lt;span class="o">(&lt;/span>ShockWave Flash&lt;span class="o">)&lt;/span>
D tak raw TAK
D tedcaptions TED Talks captions
E tee Multiple muxer tee
D thp THP
D tiertexseq Tiertex Limited SEQ
D tiff_pipe piped tiff sequence
D tmv 8088flex TMV
DE truehd raw TrueHD
DE tta TTA &lt;span class="o">(&lt;/span>True Audio&lt;span class="o">)&lt;/span>
D tty Tele-typewriter
D txd Renderware TeXture Dictionary
D ty TiVo TY Stream
DE u16be PCM unsigned 16-bit big-endian
DE u16le PCM unsigned 16-bit little-endian
DE u24be PCM unsigned 24-bit big-endian
DE u24le PCM unsigned 24-bit little-endian
DE u32be PCM unsigned 32-bit big-endian
DE u32le PCM unsigned 32-bit little-endian
DE u8 PCM unsigned 8-bit
E uncodedframecrc uncoded framecrc testing
D v210 Uncompressed 4:2:2 10-bit
D v210x Uncompressed 4:2:2 10-bit
D vag Sony PS2 VAG
DE vc1 raw VC-1 video
DE vc1test VC-1 &lt;span class="nb">test&lt;/span> bitstream
E vcd MPEG-1 Systems / MPEG program stream &lt;span class="o">(&lt;/span>VCD&lt;span class="o">)&lt;/span>
D vfwcap VfW video capture
DE vidc PCM Archimedes VIDC
D vivo Vivo
D vmd Sierra VMD
E vob MPEG-2 PS &lt;span class="o">(&lt;/span>VOB&lt;span class="o">)&lt;/span>
D vobsub VobSub subtitle format
DE voc Creative Voice
D vpk Sony PS2 VPK
D vplayer VPlayer subtitles
D vqf Nippon Telegraph and Telephone Corporation &lt;span class="o">(&lt;/span>NTT&lt;span class="o">)&lt;/span> TwinVQ
DE w64 Sony Wave64
DE wav WAV / WAVE &lt;span class="o">(&lt;/span>Waveform Audio&lt;span class="o">)&lt;/span>
D wc3movie Wing Commander III movie
E webm WebM
E webm_chunk WebM Chunk Muxer
DE webm_dash_manifest WebM DASH Manifest
E webp WebP
D webp_pipe piped webp sequence
DE webvtt WebVTT subtitle
D wsaud Westwood Studios audio
D wsd Wideband Single-bit Data &lt;span class="o">(&lt;/span>WSD&lt;span class="o">)&lt;/span>
D wsvqa Westwood Studios VQA
DE wtv Windows Television &lt;span class="o">(&lt;/span>WTV&lt;span class="o">)&lt;/span>
DE wv raw WavPack
D wve Psion &lt;span class="m">3&lt;/span> audio
D xa Maxis XA
D xbin eXtended BINary text &lt;span class="o">(&lt;/span>XBIN&lt;span class="o">)&lt;/span>
D xmv Microsoft XMV
D xpm_pipe piped xpm sequence
D xvag Sony PS3 XVAG
D xwd_pipe piped xwd sequence
D xwma Microsoft xWMA
D yop Psygnosis YOP
DE yuv4mpegpipe YUV4MPEG pipe
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>我的秋招面试问题集</title><link>https://blog.itning.top/post/2019/12/02/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86/</link><pubDate>Mon, 02 Dec 2019 16:33:56 +0800</pubDate><guid>https://blog.itning.top/post/2019/12/02/%E6%88%91%E7%9A%84%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E9%9B%86/</guid><description>&lt;h2 id="第一家">第一家&lt;/h2>
&lt;ol>
&lt;li>说说你怎么理解threadlocal的？&lt;/li>
&lt;li>ReentrantLock原理？&lt;/li>
&lt;li>[1，2，3，4，4，5] 数组找出4所在的所有下标？&lt;/li>
&lt;/ol>
&lt;h2 id="第二家">第二家&lt;/h2>
&lt;p>（一面）&lt;/p>
&lt;ol>
&lt;li>BIO,NIO,AIO 具体实现原理？&lt;/li>
&lt;li>NIO 有哪些类，怎么实现的？&lt;/li>
&lt;li>JVM有哪些区域，都做什么的？&lt;/li>
&lt;li>说一下G1垃圾回收器？&lt;/li>
&lt;li>可重入锁（ReentrantLock）和同步锁（synchronized）区别？（底层原理）&lt;/li>
&lt;li>AQS框架原理？&lt;/li>
&lt;li>你知道Condition吗？说一下怎么使用。&lt;/li>
&lt;li>你用过什么数据库？&lt;/li>
&lt;li>说一下mysql有哪些引擎？&lt;/li>
&lt;li>myisam和innodb有哪些区别？&lt;/li>
&lt;li>mysql你用的怎么样？&lt;/li>
&lt;li>mysql索引怎么实现的？&lt;/li>
&lt;li>redis都支持哪些数据类型？&lt;/li>
&lt;li>redis你都干什么用？&lt;/li>
&lt;li>spring cloud都有哪些组件，干什么用？&lt;/li>
&lt;li>spring aop 实现原理？&lt;/li>
&lt;li>说一下单点登录怎么做的？原理？&lt;/li>
&lt;li>你有什么问题要问我？
（二面）&lt;/li>
&lt;li>自我介绍&lt;/li>
&lt;li>介绍你的项目&lt;/li>
&lt;li>项目研发过程中你遇到最大的困难是什么？怎么解决的？&lt;/li>
&lt;li>你为什么选择我们公司？&lt;/li>
&lt;li>你有什么问题要问我？&lt;/li>
&lt;/ol>
&lt;h2 id="第三家">第三家&lt;/h2>
&lt;ol>
&lt;li>你觉得你做的对吗（拿着我的笔试卷）？&lt;/li>
&lt;li>哪不对怎么改？&lt;/li>
&lt;li>介绍下你的项目&lt;/li>
&lt;/ol>
&lt;h2 id="第四家">第四家&lt;/h2>
&lt;ol>
&lt;li>自我介绍&lt;/li>
&lt;li>介绍你的项目&lt;/li>
&lt;li>可重入锁（ReentrantLock）和同步锁（synchronized）区别？&lt;/li>
&lt;li>你对J.U.C知道多少？&lt;/li>
&lt;li>CyclicBarrier循环栅栏怎么实现的？&lt;/li>
&lt;li>CountDownLatch倒计时器怎么实现的？&lt;/li>
&lt;li>AQS怎么实现的？里边用了什么算法？&lt;/li>
&lt;li>B+树有哪些特点？&lt;/li>
&lt;li>myisam和innodb有哪些区别？&lt;/li>
&lt;li>SQL怎么优化？&lt;/li>
&lt;li>线上CPU 100% 你觉得会是什么问题？&lt;/li>
&lt;li>JVM内存模型？&lt;/li>
&lt;li>新生代，老年代 各区域比例是多少？&lt;/li>
&lt;li>垃圾回收算法有哪些？&lt;/li>
&lt;li>标记清除会产生什么问题？&lt;/li>
&lt;li>你用过哪些JVM调优工具？&lt;/li>
&lt;li>CyclicBarrier和CountDownLatch有哪些应用场景？&lt;/li>
&lt;li>你有什么问题要问我？&lt;/li>
&lt;/ol>
&lt;h2 id="第五家">第五家&lt;/h2>
&lt;ol>
&lt;li>自我介绍&lt;/li>
&lt;li>volatile实现原理？&lt;/li>
&lt;li>myisam和innodb有哪些区别？&lt;/li>
&lt;li>CAP定理你知道吗？&lt;/li>
&lt;li>a b c d &amp;hellip; z aa ab ac &amp;hellip; az aaa aab aac &amp;hellip; aaz &amp;hellip;. dddd &amp;hellip;. zzzz &amp;hellip;. zzzzzz &amp;hellip;.
现在给定一个字符串（例如 abcd）找出所在的下标？&lt;/li>
&lt;li>36匹马，6个赛道，没有计时器，找出跑的最快的3匹马，至少需要几次？&lt;/li>
&lt;li>kafka和rocketmq区别？&lt;/li>
&lt;li>你有多少代码量？&lt;/li>
&lt;li>TCP 滑动窗口有什么用？&lt;/li>
&lt;li>三次握手，四次挥手说下？&lt;/li>
&lt;li>从浏览器发请求到服务器再到浏览器中间发生了什么？&lt;/li>
&lt;li>线程池怎么实现的，有哪些参数？&lt;/li>
&lt;li>阻塞队列满了会发生什么？&lt;/li>
&lt;li>说一下B树与B+树区别？&lt;/li>
&lt;li>ConcurrentHashMap和HashMap有什么区别，底层原理？&lt;/li>
&lt;li>你有什么问题要问我？&lt;/li>
&lt;/ol></description></item><item><title>Synchronized</title><link>https://blog.itning.top/post/2019/09/15/synchronized/</link><pubDate>Sun, 15 Sep 2019 18:32:13 +0800</pubDate><guid>https://blog.itning.top/post/2019/09/15/synchronized/</guid><description>&lt;p>&lt;strong>偏向锁 01&lt;/strong>&lt;/p>
&lt;p>&lt;strong>轻量级锁 00&lt;/strong>&lt;/p>
&lt;p>&lt;strong>重量级锁 10&lt;/strong>&lt;/p>
&lt;p>对象在内存中的布局分为三块区域：&lt;strong>对象头，实例数据，填充数据&lt;/strong>&lt;/p>
&lt;p>·实例对象·&lt;/p>
&lt;p>—————&lt;/p>
&lt;p>|对象头 |&lt;/p>
&lt;p>|实例变量|&lt;/p>
&lt;p>|填充数据|&lt;/p>
&lt;p>—————&lt;/p>
&lt;p>&lt;strong>对象头主要结构是由Mark Word 和 Class Metadata Address 组成&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Mark Word&lt;/strong> &lt;strong>存储对象的hashCode、锁信息或分代年龄或GC标志等信息&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Class Metadata Address 类型指针指向对象的类元数据，JVM通过这个指针确定该对象是哪个类的实例。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Mark Word&lt;/strong>存储结构：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>锁状态&lt;/th>
&lt;th>25bit&lt;/th>
&lt;th>4bit&lt;/th>
&lt;th>1bit是否是偏向锁&lt;/th>
&lt;th>2bit 锁标志位&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>无锁状态&lt;/td>
&lt;td>对象HashCode&lt;/td>
&lt;td>对象分代年龄&lt;/td>
&lt;td>0&lt;/td>
&lt;td>01&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>对象头中包含了锁状态，重量级锁标识为10，其中指针指向的是monitor对象（也称为管程或监视器锁）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个对象都存在着一个monitor与之关联&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当一个monitor被某个线程持有后，便处于锁定状态&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在JAVA虚拟机（&lt;strong>HotSpot&lt;/strong>）中，monitor是由&lt;strong>ObjectMonitor&lt;/strong>实现的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个&lt;strong>等待锁的线程&lt;/strong>都会被封装成&lt;strong>ObjectWaiter&lt;/strong>对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ObjectMonitor中有两个队列，&lt;strong>_WaitSet&lt;/strong> 和 &lt;strong>_EntryList&lt;/strong>，用来保存&lt;strong>ObjectWaiter&lt;/strong>对象列表&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="n">ObjectMonitor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">_header&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//记录个数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_waiters&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">_recursions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">_object&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">_owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//指向持有ObjectMonitor对象的线程
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_WaitSet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//处于wait状态的线程，会被加入到_WaitSet
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_WaitSetLock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">_Responsible&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">_succ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">_cxq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">FreeNext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">_EntryList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="c1">//处于等待锁block状态的线程，会被加入到该列表
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">_SpinFreq&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">_SpinClock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="n">OwnerIsThread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>当&lt;strong>多个线程同时访问一段同步代码&lt;/strong>时，首先会&lt;strong>进入 _EntryList 集合&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当&lt;strong>线程获取到对象的monitor&lt;/strong> 后进入 &lt;strong>_Owner&lt;/strong> 区域并把monitor中的owner变量&lt;strong>设置为当前线程&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同时monitor中的计数器&lt;strong>count&lt;/strong>加1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若线程调用 &lt;strong>wait()&lt;/strong> 方法，将&lt;strong>释放当前持有的monitor&lt;/strong>，&lt;strong>owner变量恢复为null&lt;/strong>，&lt;strong>count自减1&lt;/strong>，同时&lt;strong>该线程进入 WaitSet集合中&lt;/strong>等待被唤醒。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-09-15-synchronized/a.png" alt="synchronized">&lt;/p>
&lt;p>锁的状态总共有四种，&lt;strong>无锁状态&lt;/strong>、&lt;strong>偏向锁&lt;/strong>、&lt;strong>轻量级锁&lt;/strong>和&lt;strong>重量级锁&lt;/strong>。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>偏向锁&lt;/p>
&lt;p>Java 6 之后加入的。&lt;/p>
&lt;p>在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，因此&lt;strong>为了减少同一线程获取锁(会涉及到一些CAS操作,耗时)的代价而引入偏向锁&lt;/strong>。&lt;/p>
&lt;p>核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，&lt;strong>此时Mark Word 的结构也变为偏向锁结构&lt;/strong>，当这个线程再次请求锁时，无需再做任何同步操作，即获取锁的过程，这样就省去了大量有关锁申请的操作，从而也就提供程序的性能。&lt;/p>
&lt;p>偏向锁失败后，并不会立即膨胀为重量级锁，而是先升级为轻量级锁。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>轻量级锁&lt;/p>
&lt;p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，&lt;strong>此时Mark Word 的结构也变为轻量级锁的结构&lt;/strong>。轻量级锁能够提升程序性能的依据是**“对绝大部分的锁，在整个同步周期内都不存在竞争”**，注意这是经验数据。需要了解的是，**轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁**。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自旋锁&lt;/p>
&lt;p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时&lt;strong>需要从用户态转换到核心态&lt;/strong>，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此&lt;strong>自旋锁会假设在不久将来，当前的线程可以获得锁&lt;/strong>，因此虚拟机会&lt;strong>让当前想要获取锁的线程做几个空循环&lt;/strong>(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>锁清除&lt;/p>
&lt;p>Java虚拟机在JIT编译时(可以简单理解为当某段代码即将第一次被执行时进行编译，又称即时编译)，&lt;strong>通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁&lt;/strong>，通过这种方式消除没有必要的锁，可以节省毫无意义的请求锁时间&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>偏向锁，轻量级锁都是乐观锁，重量级锁是悲观锁。&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>一个对象刚开始实例化的时候，没有任何线程来访问它的时候。它是可偏向的，意味着，它现在认为只可能有一个线程来访问它，所以当第一个线程来访问它的时候，它会偏向这个线程，此时，对象持有偏向锁。偏向第一个线程，这个线程在修改对象头成为偏向锁的时候使用CAS操作，并将对象头中的ThreadID改成自己的ID，之后再次访问这个对象时，只需要对比ID，不需要再使用CAS在进行操作。&lt;/li>
&lt;li>一旦有第二个线程访问这个对象，因为偏向锁不会主动释放，所以第二个线程可以看到对象时偏向状态，这时表明在这个对象上已经存在竞争了。检查原来持有该对象锁的线程是否依然存活，如果挂了，则可以将对象变为无锁状态，然后重新偏向新的线程。如果原来的线程依然存活，则马上执行那个线程的操作栈，检查该对象的使用情况，如果仍然需要持有偏向锁，则偏向锁升级为轻量级锁，（&lt;strong>偏向锁就是这个时候升级为轻量级锁的&lt;/strong>），此时轻量级锁由原持有偏向锁的线程持有，继续执行其同步代码，而正在竞争的线程会进入自旋等待获得该轻量级锁；如果不存在使用了，则可以将对象回复成无锁状态，然后重新偏向。&lt;/li>
&lt;li>轻量级锁认为竞争存在，但是竞争的程度很轻，一般两个线程对于同一个锁的操作都会错开，或者说稍微等待一下（自旋），另一个线程就会释放锁。 但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，&lt;strong>轻量级锁膨胀为重量级锁&lt;/strong>，重量级锁使除了拥有锁的线程以外的线程都阻塞，防止CPU空转。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://blog.csdn.net/javazejian/article/details/72828483">https://blog.csdn.net/javazejian/article/details/72828483&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/29866981">https://zhuanlan.zhihu.com/p/29866981&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>SpringBoot中如何发送邮件</title><link>https://blog.itning.top/post/2019/06/25/springboot%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</link><pubDate>Tue, 25 Jun 2019 16:36:22 +0800</pubDate><guid>https://blog.itning.top/post/2019/06/25/springboot%E4%B8%AD%E5%A6%82%E4%BD%95%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</guid><description>&lt;h2 id="邮件发送">邮件发送&lt;/h2>
&lt;h3 id="引入maven-dependency">引入maven dependency&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>javax.mail&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>mail&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.4.7&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.freemarker&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>freemarker&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>2.3.28&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="新建工具类emailhelper">新建工具类：&lt;code>EmailHelper&lt;/code>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;span class="lnt">182
&lt;/span>&lt;span class="lnt">183
&lt;/span>&lt;span class="lnt">184
&lt;/span>&lt;span class="lnt">185
&lt;/span>&lt;span class="lnt">186
&lt;/span>&lt;span class="lnt">187
&lt;/span>&lt;span class="lnt">188
&lt;/span>&lt;span class="lnt">189
&lt;/span>&lt;span class="lnt">190
&lt;/span>&lt;span class="lnt">191
&lt;/span>&lt;span class="lnt">192
&lt;/span>&lt;span class="lnt">193
&lt;/span>&lt;span class="lnt">194
&lt;/span>&lt;span class="lnt">195
&lt;/span>&lt;span class="lnt">196
&lt;/span>&lt;span class="lnt">197
&lt;/span>&lt;span class="lnt">198
&lt;/span>&lt;span class="lnt">199
&lt;/span>&lt;span class="lnt">200
&lt;/span>&lt;span class="lnt">201
&lt;/span>&lt;span class="lnt">202
&lt;/span>&lt;span class="lnt">203
&lt;/span>&lt;span class="lnt">204
&lt;/span>&lt;span class="lnt">205
&lt;/span>&lt;span class="lnt">206
&lt;/span>&lt;span class="lnt">207
&lt;/span>&lt;span class="lnt">208
&lt;/span>&lt;span class="lnt">209
&lt;/span>&lt;span class="lnt">210
&lt;/span>&lt;span class="lnt">211
&lt;/span>&lt;span class="lnt">212
&lt;/span>&lt;span class="lnt">213
&lt;/span>&lt;span class="lnt">214
&lt;/span>&lt;span class="lnt">215
&lt;/span>&lt;span class="lnt">216
&lt;/span>&lt;span class="lnt">217
&lt;/span>&lt;span class="lnt">218
&lt;/span>&lt;span class="lnt">219
&lt;/span>&lt;span class="lnt">220
&lt;/span>&lt;span class="lnt">221
&lt;/span>&lt;span class="lnt">222
&lt;/span>&lt;span class="lnt">223
&lt;/span>&lt;span class="lnt">224
&lt;/span>&lt;span class="lnt">225
&lt;/span>&lt;span class="lnt">226
&lt;/span>&lt;span class="lnt">227
&lt;/span>&lt;span class="lnt">228
&lt;/span>&lt;span class="lnt">229
&lt;/span>&lt;span class="lnt">230
&lt;/span>&lt;span class="lnt">231
&lt;/span>&lt;span class="lnt">232
&lt;/span>&lt;span class="lnt">233
&lt;/span>&lt;span class="lnt">234
&lt;/span>&lt;span class="lnt">235
&lt;/span>&lt;span class="lnt">236
&lt;/span>&lt;span class="lnt">237
&lt;/span>&lt;span class="lnt">238
&lt;/span>&lt;span class="lnt">239
&lt;/span>&lt;span class="lnt">240
&lt;/span>&lt;span class="lnt">241
&lt;/span>&lt;span class="lnt">242
&lt;/span>&lt;span class="lnt">243
&lt;/span>&lt;span class="lnt">244
&lt;/span>&lt;span class="lnt">245
&lt;/span>&lt;span class="lnt">246
&lt;/span>&lt;span class="lnt">247
&lt;/span>&lt;span class="lnt">248
&lt;/span>&lt;span class="lnt">249
&lt;/span>&lt;span class="lnt">250
&lt;/span>&lt;span class="lnt">251
&lt;/span>&lt;span class="lnt">252
&lt;/span>&lt;span class="lnt">253
&lt;/span>&lt;span class="lnt">254
&lt;/span>&lt;span class="lnt">255
&lt;/span>&lt;span class="lnt">256
&lt;/span>&lt;span class="lnt">257
&lt;/span>&lt;span class="lnt">258
&lt;/span>&lt;span class="lnt">259
&lt;/span>&lt;span class="lnt">260
&lt;/span>&lt;span class="lnt">261
&lt;/span>&lt;span class="lnt">262
&lt;/span>&lt;span class="lnt">263
&lt;/span>&lt;span class="lnt">264
&lt;/span>&lt;span class="lnt">265
&lt;/span>&lt;span class="lnt">266
&lt;/span>&lt;span class="lnt">267
&lt;/span>&lt;span class="lnt">268
&lt;/span>&lt;span class="lnt">269
&lt;/span>&lt;span class="lnt">270
&lt;/span>&lt;span class="lnt">271
&lt;/span>&lt;span class="lnt">272
&lt;/span>&lt;span class="lnt">273
&lt;/span>&lt;span class="lnt">274
&lt;/span>&lt;span class="lnt">275
&lt;/span>&lt;span class="lnt">276
&lt;/span>&lt;span class="lnt">277
&lt;/span>&lt;span class="lnt">278
&lt;/span>&lt;span class="lnt">279
&lt;/span>&lt;span class="lnt">280
&lt;/span>&lt;span class="lnt">281
&lt;/span>&lt;span class="lnt">282
&lt;/span>&lt;span class="lnt">283
&lt;/span>&lt;span class="lnt">284
&lt;/span>&lt;span class="lnt">285
&lt;/span>&lt;span class="lnt">286
&lt;/span>&lt;span class="lnt">287
&lt;/span>&lt;span class="lnt">288
&lt;/span>&lt;span class="lnt">289
&lt;/span>&lt;span class="lnt">290
&lt;/span>&lt;span class="lnt">291
&lt;/span>&lt;span class="lnt">292
&lt;/span>&lt;span class="lnt">293
&lt;/span>&lt;span class="lnt">294
&lt;/span>&lt;span class="lnt">295
&lt;/span>&lt;span class="lnt">296
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">freemarker.template.Configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">freemarker.template.Template&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">freemarker.template.TemplateException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.activation.DataHandler&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.activation.DataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.activation.FileDataSource&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.mail.internet.*&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.File&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.StringWriter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.UnsupportedEncodingException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Properties&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2019/6/25 15:58
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EmailHelper&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">CHECK_EMAIL_STR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;@&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Configuration&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">EmailHelper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Builder&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">builder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configuration&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Configuration&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">VERSION_2_3_28&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDirectoryForTemplateLoading&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">templateDir&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDefaultEncoding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Builder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 邮件发送者账户（必须设置）
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">emailSenderUser&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 邮件发送者密码（必须设置）
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">emailSenderPwd&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * HTML模板目录（必须设置）
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">templateDir&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 抄送者
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">carbonCopyAddress&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * SMTP服务器地址
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">SMTPServer&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 设置发送者邮箱（必须设置）
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param emailSenderUser 发送者邮箱
&lt;/span>&lt;span class="cm"> * @return this
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">setEmailSenderUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">emailSenderUser&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">emailSenderUser&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 设置发送者邮箱密码（必须设置）
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param emailSenderPwd 发送者邮箱密码
&lt;/span>&lt;span class="cm"> * @return this
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">setEmailSenderPwd&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">emailSenderPwd&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderPwd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">emailSenderPwd&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 设置模板目录（必须设置）
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param templateDir 模板目录
&lt;/span>&lt;span class="cm"> * @return this
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">setTemplateDir&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">templateDir&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">templateDir&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">templateDir&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 设置抄送者，不设置则没有抄送者
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param carbonCopyAddress 抄送者邮箱
&lt;/span>&lt;span class="cm"> * @return this
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">setCarbonCopy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">carbonCopyAddress&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">carbonCopyAddress&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">carbonCopyAddress&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 设置SMTP服务器地址
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param smtpServer SMTP服务器地址
&lt;/span>&lt;span class="cm"> * @return this
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Builder&lt;/span> &lt;span class="nf">setSmtpServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SMTPServer&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">smtpServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 构建
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @return EmailHelper
&lt;/span>&lt;span class="cm"> * @throws IOException IOException
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">EmailHelper&lt;/span> &lt;span class="nf">build&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmailHelper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * SMTP服务器地址
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">SMTPServer&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * QQ发送邮件的服务器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">QQ&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;smtp.qq.com&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 阿里云邮箱发送邮件的服务器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">ALIYUN&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;smtp.mxhichina.com&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 网易邮箱发送邮件的服务器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">NTES&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;smtp.163.com&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * google邮箱发送邮件的服务器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">GMAIL&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;smtp.gmail.com&amp;#34;&lt;/span>&lt;span class="o">),&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 新浪邮箱发送邮件的服务器
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="n">SINA&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;smtp.sina.com&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">SMTPServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">server&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 1、创建连接对象
&lt;/span>&lt;span class="cm"> * 设置邮件发送的协议
&lt;/span>&lt;span class="cm"> * 设置发送邮件的服务器
&lt;/span>&lt;span class="cm"> * 填写自己的密钥
&lt;/span>&lt;span class="cm"> * 2、创建邮件对象
&lt;/span>&lt;span class="cm"> * 设置发件人
&lt;/span>&lt;span class="cm"> * 设置收件人
&lt;/span>&lt;span class="cm"> * 设置抄送者
&lt;/span>&lt;span class="cm"> * 设置邮件主题
&lt;/span>&lt;span class="cm"> * 设置邮件内容
&lt;/span>&lt;span class="cm"> * 3、发送邮件
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param to 邮件接收者邮箱
&lt;/span>&lt;span class="cm"> * @param subject 主题
&lt;/span>&lt;span class="cm"> * @param content 内容
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">MessagingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CHECK_EMAIL_STR&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;接收者邮箱非法,请检查!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Message&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//2.1设置发件人
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderUser&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//2.2设置收件人
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TO&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//2.3设置抄送者（PS:没有这一条网易会认为这是一条垃圾短信，而发不出去）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">carbonCopyAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">carbonCopyAddress&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//2.4设置邮件的主题
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSubject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//2.5设置邮件的内容
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">content&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;text/html;charset=utf-8&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 3、发送邮件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Transport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 发送邮件带附件
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param to 邮件接收者邮箱
&lt;/span>&lt;span class="cm"> * @param subject 主题
&lt;/span>&lt;span class="cm"> * @param content 内容
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">content&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">annexFile&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">MessagingException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">UnsupportedEncodingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">CHECK_EMAIL_STR&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;接收者邮箱非法,请检查!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Message&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">getMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">// 发件人
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">InternetAddress&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderUser&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">from&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// 收件人
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">InternetAddress&lt;/span> &lt;span class="n">re&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">TO&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">carbonCopyAddress&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setRecipient&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RecipientType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">CC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternetAddress&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">carbonCopyAddress&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// 邮件主题
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSubject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">subject&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Multipart&lt;/span> &lt;span class="n">multipart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeMultipart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//添加邮件正文
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BodyPart&lt;/span> &lt;span class="n">contentPart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeBodyPart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">contentPart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;text/html;charset=UTF-8&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">multipart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">contentPart&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//添加邮件附件
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">BodyPart&lt;/span> &lt;span class="n">attachmentBodyPart&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeBodyPart&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">DataSource&lt;/span> &lt;span class="n">source&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FileDataSource&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">annexFile&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">attachmentBodyPart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDataHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">DataHandler&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">source&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="c1">//MimeUtility.encodeWord可以避免文件名乱码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">attachmentBodyPart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFileName&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MimeUtility&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">encodeWord&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">annexFile&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()));&lt;/span>
&lt;span class="n">multipart&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addBodyPart&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">attachmentBodyPart&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setContent&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">multipart&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">Transport&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 发送HTML模板邮件
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param templateName 模板名
&lt;/span>&lt;span class="cm"> * @param dataMap 数据
&lt;/span>&lt;span class="cm"> * @param to 邮件接收者邮箱
&lt;/span>&lt;span class="cm"> * @param subject 主题
&lt;/span>&lt;span class="cm"> * @throws TemplateException if an exception occurs during template processing
&lt;/span>&lt;span class="cm"> * @throws IOException if an I/O exception occurs during writing to the writer.
&lt;/span>&lt;span class="cm"> * @throws MessagingException 邮件发送异常
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendHtmlEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">templateName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataMap&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TemplateException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessagingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取模板
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Template&lt;/span> &lt;span class="n">template&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">templateName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">StringWriter&lt;/span> &lt;span class="n">stringWriter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringWriter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//生成HTML
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">process&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">stringWriter&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stringWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flush&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">sendEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">stringWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 发送HTML模板邮件带附件
&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="cm"> * @param templateName 模板名
&lt;/span>&lt;span class="cm"> * @param dataMap 数据
&lt;/span>&lt;span class="cm"> * @param to 邮件接收者邮箱
&lt;/span>&lt;span class="cm"> * @param subject 主题
&lt;/span>&lt;span class="cm"> * @throws TemplateException if an exception occurs during template processing
&lt;/span>&lt;span class="cm"> * @throws IOException if an I/O exception occurs during writing to the writer.
&lt;/span>&lt;span class="cm"> * @throws MessagingException 邮件发送异常
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendHtmlEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">templateName&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">File&lt;/span> &lt;span class="n">annexFile&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TemplateException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessagingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//获取模板
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Template&lt;/span> &lt;span class="n">template&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">configuration&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">templateName&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">StringWriter&lt;/span> &lt;span class="n">stringWriter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">StringWriter&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//生成HTML
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">template&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">process&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">dataMap&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">stringWriter&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">stringWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">flush&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">sendEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">subject&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">stringWriter&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">(),&lt;/span> &lt;span class="n">annexFile&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Message&lt;/span> &lt;span class="nf">getMessage&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">//1、创建连接对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Properties&lt;/span> &lt;span class="n">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Properties&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//1.1设置邮件发送的协议
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.transport.protocol&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;smtp&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//1.2设置发送邮件的服务器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.host&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">smtpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">server&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//1.3需要经过授权，也就是有户名和密码的校验，这样才能通过验证（一定要有这一条）
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.auth&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//1.4下面一串是发送邮件用465端口，如果不写就是以25端口发送，阿里云已经关闭了25端口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.socketFactory.class&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;javax.net.ssl.SSLSocketFactory&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.socketFactory.fallback&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.port&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;465&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">props&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;mail.smtp.socketFactory.port&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;465&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//1.5认证信息
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Session&lt;/span> &lt;span class="n">session&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Session&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">props&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Authenticator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">protected&lt;/span> &lt;span class="n">PasswordAuthentication&lt;/span> &lt;span class="nf">getPasswordAuthentication&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PasswordAuthentication&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderUser&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">builder&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">emailSenderPwd&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">});&lt;/span>
&lt;span class="c1">//2、创建邮件对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="发送邮件">发送邮件&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2019/6/25 14:53
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TemplateException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">MessagingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">EmailHelper&lt;/span> &lt;span class="n">emailHelper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EmailHelper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">Builder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">//发送者邮箱
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">setEmailSenderUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;xxx@qq.com&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//密码
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">setEmailSenderPwd&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//HTML模板目录
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">setTemplateDir&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;G:\\ProjectData\\IdeaProjects\\Test\\src\\main\\resources&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//抄送邮箱
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">setCarbonCopy&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//发信邮箱服务器
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">.&lt;/span>&lt;span class="na">setSmtpServer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">EmailHelper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SMTPServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">QQ&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">dataMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Collections&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">singletonMap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;模板生成的字符串&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">emailHelper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendHtmlEmail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;itning@itning.top&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;这是主题&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;temp.ftl&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">dataMap&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>发送普通邮件：&lt;code>sendEmail(String to, String subject, String content)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发送普通带附件邮件：&lt;code>sendEmail(String to, String subject, String content, File annexFile)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发送HTML邮件：&lt;code>sendHtmlEmail(String to, String subject, String templateName, Map&amp;lt;String, Object&amp;gt; dataMap)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>发送HTML带附件邮件：&lt;code>sendHtmlEmail(String to, String subject, String templateName, Map&amp;lt;String, Object&amp;gt; dataMap, File annexFile)&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>模板内容：&lt;code>temp.ftl&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;zh-CN&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>模板&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
展示HTML邮件能力
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://blog.itning.top&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>超链接&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://avatars1.githubusercontent.com/u/19759891?s=460&amp;amp;v=4&amp;#34;&lt;/span> &lt;span class="na">alt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;图片&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
以下文字模板生成：
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>${name}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="http://freemarker.foofun.cn/">FreeMarker 模板中文官方参考手册&lt;/a>&lt;/p>
&lt;p>&lt;strong>已接收：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-06-25-%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/email.png" alt="email">&lt;/p></description></item><item><title>SpringBean生命周期方法</title><link>https://blog.itning.top/post/2019/06/22/springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Jun 2019 10:29:01 +0800</pubDate><guid>https://blog.itning.top/post/2019/06/22/springbean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B9%E6%B3%95/</guid><description>&lt;p>对Spring Bean 生命周期方法的总结&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="nd">@Bean&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">initMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;initMethod&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">destroyMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;destroyMethod&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">BeanTest&lt;/span> &lt;span class="nf">beanTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BeanTest&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;span class="lnt">76
&lt;/span>&lt;span class="lnt">77
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.BeansException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.DisposableBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.InitializingBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.config.BeanPostProcessor&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.beans.factory.support.DefaultListableBeanFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.ApplicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">org.springframework.context.ApplicationContextAware&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.annotation.PostConstruct&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">javax.annotation.PreDestroy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * @author itning
&lt;/span>&lt;span class="cm"> * @date 2019/6/22 10:04
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BeanTest&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">InitializingBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DisposableBean&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">BeanPostProcessor&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ApplicationContextAware&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">BeanTest&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;1.constructor&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@PostConstruct&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postConstruct&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;2.PostConstruct&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterPropertiesSet&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3.InitializingBean:afterPropertiesSet&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">initMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;4.initMethod&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@PreDestroy&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">annDestroy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;1.PreDestroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">destroy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;2.DisposableBean:destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">destroyMethod&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3.destroyMethod&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="cm">/*@Override
&lt;/span>&lt;span class="cm"> public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
&lt;/span>&lt;span class="cm"> System.out.println(&amp;#34;postProcessBeforeInitialization:&amp;#34; + beanName + &amp;#34; &amp;#34; + bean);
&lt;/span>&lt;span class="cm"> return bean;
&lt;/span>&lt;span class="cm"> }
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm"> @Override
&lt;/span>&lt;span class="cm"> public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
&lt;/span>&lt;span class="cm"> System.out.println(&amp;#34;postProcessAfterInitialization:&amp;#34; + beanName + &amp;#34; &amp;#34; + bean);
&lt;/span>&lt;span class="cm"> return bean;
&lt;/span>&lt;span class="cm"> }*/&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setApplicationContext&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ApplicationContext&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">BeansException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">AnnotationConfigServletWebServerApplicationContext&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">AnnotationConfigServletWebServerApplicationContext&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">applicationContext&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">DefaultListableBeanFactory&lt;/span> &lt;span class="n">beanFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">DefaultListableBeanFactory&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getBeanFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">beanFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeBeanDefinition&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;beanTest&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化：&lt;/p>
&lt;ol>
&lt;li>constructor&lt;/li>
&lt;li>PostConstruct&lt;/li>
&lt;li>InitializingBean:afterPropertiesSet&lt;/li>
&lt;li>initMethod&lt;/li>
&lt;/ol>
&lt;p>销毁：&lt;/p>
&lt;ol>
&lt;li>PreDestroy&lt;/li>
&lt;li>DisposableBean:destroy&lt;/li>
&lt;li>destroyMethod&lt;/li>
&lt;/ol></description></item><item><title>分布式事务解决方案</title><link>https://blog.itning.top/post/2019/05/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Sun, 12 May 2019 20:29:53 +0800</pubDate><guid>https://blog.itning.top/post/2019/05/12/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;h2 id="两阶段提交方案xa方案">两阶段提交方案/XA方案&lt;/h2>
&lt;p>也叫做两阶段提交事务方案，这个举个例子，比如说咱们公司里经常tb是吧（就是团建），然后一般会有个tb主席（就是负责组织团建的那个人）。&lt;/p>
&lt;p>tb，team building，团建&lt;/p>
&lt;p>第一个阶段，一般tb主席会提前一周问一下团队里的每个人，说，大家伙，下周六我们去滑雪+烧烤，去吗？这个时候tb主席开始等待每个人的回答，如果所有人都说ok，那么就可以决定一起去这次tb。如果这个阶段里，任何一个人回答说，我有事不去了，那么tb主席就会取消这次活动。&lt;/p>
&lt;p>第二个阶段，那下周六大家就一起去滑雪+烧烤了&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-05-12-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/a.png" alt="XA">&lt;/p>
&lt;p>所以这个就是所谓的XA事务，两阶段提交，有一个事务管理器的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？如果每个数据库都回复ok，那么就正式提交事务，在各个数据库上执行操作；如果任何一个数据库回答不ok，那么就回滚事务。&lt;/p>
&lt;p>这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。如果要玩儿，那么基于spring + JTA就可以搞定，自己随便搜个demo看看就知道了。&lt;/p>
&lt;p>这个方案，我们很少用，一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。我可以给大家介绍一下， 现在微服务，一个大的系统分成几百个服务，几十个服务。一般来说，我们的规定和规范，是要求说每个服务只能操作自己对应的一个数据库。&lt;/p>
&lt;p>如果你要操作别的服务对应的库，不允许直连别的服务的库，违反微服务架构的规范，你随便交叉胡乱访问，几百个服务的话，全体乱套，这样的一套服务是没法管理的，没法治理的，经常数据被别人改错，自己的库被别人写挂。&lt;/p>
&lt;p>如果你要操作别人的服务的库，你必须是通过调用别的服务的接口来实现，绝对不允许你交叉访问别人的数据库！&lt;/p>
&lt;h2 id="tcc方案">TCC方案&lt;/h2>
&lt;p>TCC的全程是：Try、Confirm、Cancel。&lt;/p>
&lt;p>这个其实是用到了补偿的概念，分为了三个阶段：&lt;/p>
&lt;p>1）Try阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行锁定或者预留&lt;/p>
&lt;p>2）Confirm阶段：这个阶段说的是在各个服务中执行实际的操作&lt;/p>
&lt;p>3）Cancel阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作&lt;/p>
&lt;p>给大家举个例子吧，比如说跨银行转账的时候，要涉及到两个银行的分布式事务，如果用TCC方案来实现，思路是这样的：&lt;/p>
&lt;p>1）Try阶段：先把两个银行账户中的资金给它冻结住就不让操作了&lt;/p>
&lt;p>2）Confirm阶段：执行实际的转账操作，A银行账户的资金扣减，B银行账户的资金增加&lt;/p>
&lt;p>3）Cancel阶段：如果任何一个银行的操作执行失败，那么就需要回滚进行补偿，就是比如A银行账户如果已经扣减了，但是B银行账户资金增加失败了，那么就得把A银行账户资金给加回去&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-05-12-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/b.png" alt="TCC">&lt;/p>
&lt;p>这种方案说实话几乎很少用人使用，我们用的也比较少，但是也有使用的场景。因为这个事务回滚实际上是严重依赖于你自己写代码来回滚和补偿了，会造成补偿代码巨大，非常之恶心。&lt;/p>
&lt;p>比如说我们，一般来说跟钱相关的，跟钱打交道的，支付、交易相关的场景，我们会用TCC，严格严格保证分布式事务要么全部成功，要么全部自动回滚，严格保证资金的正确性，在资金上出现问题&lt;/p>
&lt;p>比较适合的场景：这个就是除非你是真的一致性要求太高，是你系统中核心之核心的场景，比如常见的就是资金类的场景，那你可以用TCC方案了，自己编写大量的业务逻辑，自己判断一个事务中的各个环节是否ok，不ok就执行补偿/回滚代码。&lt;/p>
&lt;p>而且最好是你的各个业务执行的时间都比较短。&lt;/p>
&lt;p>但是说实话，一般尽量别这么搞，自己手写回滚逻辑，或者是补偿逻辑，实在太恶心了，那个业务代码很难维护。&lt;/p>
&lt;h2 id="本地消息表">本地消息表&lt;/h2>
&lt;p>国外的ebay搞出来的这么一套思想&lt;/p>
&lt;p>这个大概意思是这样的&lt;/p>
&lt;p>1）A系统在自己本地一个事务里操作同时，插入一条数据到消息表&lt;/p>
&lt;p>2）接着A系统将这个消息发送到MQ中去&lt;/p>
&lt;p>3）B系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，那么此时这个事务会回滚，这样保证不会重复处理消息&lt;/p>
&lt;p>4）B系统执行成功之后，就会更新自己本地消息表的状态以及A系统消息表的状态&lt;/p>
&lt;p>5）如果B系统处理失败了，那么就不会更新消息表状态，那么此时A系统会定时扫描自己的消息表，如果有没处理的消息，会再次发送到MQ中去，让B再次处理&lt;/p>
&lt;p>6）这个方案保证了最终一致性，哪怕B事务失败了，但是A会不断重发消息，直到B那边成功为止&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-05-12-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/c.png" alt="c">&lt;/p>
&lt;p>这个方案说实话最大的问题就在于严重依赖于数据库的消息表来管理事务啥的？？？这个会导致如果是高并发场景咋办呢？咋扩展呢？所以一般确实很少用&lt;/p>
&lt;h2 id="可靠消息最终一致性方案">可靠消息最终一致性方案&lt;/h2>
&lt;p>这个的意思，就是干脆不要用本地的消息表了，直接基于MQ来实现事务。比如阿里的RocketMQ就支持消息事务。&lt;/p>
&lt;p>大概的意思就是：&lt;/p>
&lt;p>1）A系统先发送一个prepared消息到mq，如果这个prepared消息发送失败那么就直接取消操作别执行了&lt;/p>
&lt;p>2）如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉mq发送确认消息，如果失败就告诉mq回滚消息&lt;/p>
&lt;p>3）如果发送了确认消息，那么此时B系统会接收到确认消息，然后执行本地的事务&lt;/p>
&lt;p>4）mq会自动定时轮询所有prepared消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认消息？那是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，别确认消息发送失败了。&lt;/p>
&lt;p>5）这个方案里，要是系统B的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如B系统本地回滚后，想办法通知系统A也回滚；或者是发送报警由人工来手工回滚和补偿&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-05-12-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/d.png" alt="d">&lt;/p>
&lt;p>这个还是比较合适的，目前国内互联网公司大都是这么玩儿的，要不你举用RocketMQ支持的，要不你就自己基于类似ActiveMQ？RabbitMQ？自己封装一套类似的逻辑出来，总之思路就是这样子的&lt;/p>
&lt;h2 id="最大努力通知方案">最大努力通知方案&lt;/h2>
&lt;p>这个方案的大致意思就是：&lt;/p>
&lt;p>1）系统A本地事务执行完之后，发送个消息到MQ&lt;/p>
&lt;p>2）这里会有个专门消费MQ的最大努力通知服务，这个服务会消费MQ然后写入数据库中记录下来，或者是放入个内存队列也可以，接着调用系统B的接口&lt;/p>
&lt;p>3）要是系统B执行成功就ok了；要是系统B执行失败了，那么最大努力通知服务就定时尝试重新调用系统B，反复N次，最后还是不行就放弃&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-05-12-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/e.png" alt="e">&lt;/p>
&lt;h2 id="你们公司是如何处理分布式事务的">你们公司是如何处理分布式事务的？&lt;/h2>
&lt;p>这个，说真的，确实我们这个课程没法带着大家来实战，因为定位不是这个。但是如果你真的被问到，你可以这么说，我们某某特别严格的场景，用的是TCC来保证强一致性；然后其他的一些场景基于了阿里的RocketMQ来实现了分布式事务。&lt;/p>
&lt;p>你找一个严格资金要求绝对不能错的场景，你可以说你是用的TCC方案；如果是一般的分布式事务场景，订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案&lt;/p>
&lt;p>友情提示一下，rocketmq 3.2.6之前的版本，是可以按照上面的思路来的，但是之后接口做了一些改变，我这里不再赘述了。&lt;/p>
&lt;p>当然如果你愿意，你可以参考可靠消息最终一致性方案来自己实现一套分布式事务，比如基于rabbitmq来玩儿。&lt;/p>
&lt;h3 id="昨天学员给我提的一个问题">昨天学员给我提的一个问题&lt;/h3>
&lt;p>老师，我们现在想保证我们的某个系统非常的可靠，任何一个数据都不能错，我们用的是微服务架构，几十个服务。结果我们一盘点，发现，如果到处都要搞的话，一个系统要做几十个分布式事务出来。&lt;/p>
&lt;p>我们的经验，我带几十人的team，最大的一个项目，起码几百个服务，复杂的分布式大型系统，里面其实也没几个分布式事务。&lt;/p>
&lt;p>你其实用任何一个分布式事务的这么一个方案，都会导致你那块儿代码会复杂10倍。很多情况下，系统A调用系统B、系统C、系统D，我们可能根本就不做分布式事务。如果调用报错会打印异常日志。&lt;/p>
&lt;p>每个月也就那么几个bug，很多bug是功能性的，体验性的，真的是涉及到数据层面的一些bug，一个月就几个，两三个？如果你为了确保系统自动保证数据100%不能错，上了几十个分布式事务，代码太复杂；性能太差，系统吞吐量、性能大幅度下跌。&lt;/p>
&lt;p>99%的分布式接口调用，不要做分布式事务，直接就是监控（发邮件、发短信）、记录日志（一旦出错，完整的日志）、事后快速的定位、排查和出解决方案、修复数据。&lt;/p>
&lt;p>每个月，每隔几个月，都会对少量的因为代码bug，导致出错的数据，进行人工的修复数据，自己临时动手写个程序，可能要补一些数据，可能要删除一些数据，可能要修改一些字段的值。&lt;/p>
&lt;p>比你做50个分布式事务，成本要来的低上百倍，低几十倍&lt;/p>
&lt;p>trade off，权衡，要用分布式事务的时候，一定是有成本，代码会很复杂，开发很长时间，性能和吞吐量下跌，系统更加复杂更加脆弱反而更加容易出bug；好处，如果做好了，TCC、可靠消息最终一致性方案，一定可以100%保证你那快数据不会出错。&lt;/p>
&lt;p>1%，0.1%，0.01%的业务，资金、交易、订单，我们会用分布式事务方案来保证，会员积分、优惠券、商品信息，其实不要这么搞了&lt;/p></description></item><item><title>Java生产环境下性能监控与调优详解</title><link>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 23 Apr 2019 11:36:10 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="基于jdk命令行工具的监控">基于JDK命令行工具的监控&lt;/h2>
&lt;h3 id="x参数">X参数&lt;/h3>
&lt;p>非标准化参数 有可能会变 但变化比较小&lt;/p>
&lt;ul>
&lt;li>
&lt;p>-Xint&lt;/p>
&lt;p>解释执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xcomp&lt;/p>
&lt;p>第一次使用就编译成本地代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xmixed&lt;/p>
&lt;p>混合模式，JVM自己来决定是否编译成本地代码&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="xx参数">XX参数&lt;/h3>
&lt;p>非标准化参数 相对不稳定 主要用于JVM调优和Debug&lt;/p>
&lt;h4 id="boolean类型">Boolean类型&lt;/h4>
&lt;p>格式：&lt;code>-XX:[+-]&amp;lt;name&amp;gt;&lt;/code>表示启用或者禁用name属性&lt;/p>
&lt;p>比如：&lt;/p>
&lt;p>&lt;code>-XX:+UseConcMarkSweepGC&lt;/code> 启用CMS垃圾回收器&lt;/p>
&lt;p>&lt;code>-XX:+UseG1GC&lt;/code> 启用G1垃圾回收器&lt;/p>
&lt;h4 id="非boolean类型">非Boolean类型&lt;/h4>
&lt;p>格式：&lt;code>-XX:&amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;&lt;/code>表示name属性的值是value&lt;/p>
&lt;p>比如：&lt;/p>
&lt;p>&lt;code>-XX:MaxGCPauseMillis=500&lt;/code> GC最大停顿时间500ms&lt;/p>
&lt;p>&lt;code>-XX:GCTimeRatio=19&lt;/code> Ratio为19&lt;/p>
&lt;p>&lt;code>-Xms&lt;/code>等价于&lt;code>-XX:InitialHeapSize&lt;/code>&lt;/p>
&lt;p>&lt;code>-Xmx&lt;/code>等价于&lt;code>-XX:MaxHeapSize&lt;/code>&lt;/p>
&lt;h3 id="查看jvm运行时参数">查看JVM运行时参数&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-XX:+PrintFlagsInitial&lt;/code> 查看初始值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-XX:+PrintFlagsFinal&lt;/code> 查看最终值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-XX:+UnlockExperimentalVMOptions&lt;/code> 解锁实验参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-XX:+UnlockDiagnosticVMOptions&lt;/code> 解锁诊断参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-XX:+PrintCommandLineFlags&lt;/code> 打印命令行参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>=&lt;/code>表示默认值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>:=&lt;/code>被用户或者JVM修改后的值&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>jps&lt;/code>命令用于查看JAVA进程（&lt;code>-l&lt;/code>参数完全类名）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>jinfo&lt;/code>命令查看java进程参数信息&lt;/p>
&lt;p>&lt;code>jinfo -flag MaxHeapSize 12188&lt;/code> 查看进程号为12188的最大堆大小&lt;/p>
&lt;p>&lt;code>-flags&lt;/code>查看手动更改过值的JVM参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>jstat&lt;/code>命令用于查看JVM统计信息&lt;/p>
&lt;p>类装载 垃圾收集 JIT编译&lt;/p>
&lt;p>&lt;code>jstat -class 6666 1000 10&lt;/code>查看进程6666的类装载信息 每隔1000ms打印一次共打印10次&lt;/p>
&lt;p>&lt;code>-gc 6666 1000 10&lt;/code>查看垃圾回收信息&lt;/p>
&lt;p>&lt;code>-compiler&lt;/code> &lt;code>-printcompilation&lt;/code> 查看JNI编译情况&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="导出内存映像文件">导出内存映像文件&lt;/h3>
&lt;h4 id="内存溢出自动导出">内存溢出自动导出&lt;/h4>
&lt;p>&lt;code>-XX:+HeapDumpOnOutOfMemoryError&lt;/code> 内存溢出时自动导出Dump&lt;/p>
&lt;p>&lt;code>-XX:HeapDumpPath=./&lt;/code> 导出路径&lt;/p>
&lt;h4 id="使用jmap命令手动导出">使用jmap命令手动导出&lt;/h4>
&lt;p>&lt;code>jmap -dump:format=b,file=heap.hprof 16940&lt;/code>&lt;/p>
&lt;h3 id="使用mat分析内存溢出">使用MAT分析内存溢出&lt;/h3>
&lt;p>工具下载地址：&lt;a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/&lt;/a>&lt;/p>
&lt;h3 id="jstack查看线程状态">jstack查看线程状态&lt;/h3>
&lt;p>&lt;code>jstack 进程ID &amp;gt; xx.txt&lt;/code>&lt;/p>
&lt;h3 id="btrace-修改字节码">Btrace 修改字节码&lt;/h3>
&lt;ul>
&lt;li>在JVisualVM中添加Btrace插件，添加classpath&lt;/li>
&lt;li>使用命令行&lt;code>btrace &amp;lt;pid&amp;gt; &amp;lt;trace_script&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="tomcat">Tomcat&lt;/h2>
&lt;h3 id="psi-probe监控">psi-probe监控&lt;/h3>
&lt;p>该工具用来监控tomcat的状态&lt;/p>
&lt;h3 id="线程优化">线程优化&lt;/h3>
&lt;p>..&lt;/p>
&lt;h2 id="nginx">Nginx&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ngx_http_stub_status&lt;/code>监控连接信息&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">server &lt;span class="o">{&lt;/span>
listen 10061&lt;span class="p">;&lt;/span>
location /nginx_status &lt;span class="o">{&lt;/span>
stub_status on&lt;span class="p">;&lt;/span>
access_log off&lt;span class="p">;&lt;/span>
allow 127.0.0.1&lt;span class="p">;&lt;/span>
deny all&lt;span class="p">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>ngxtop&lt;/code>监控请求信息&lt;/p>
&lt;p>&lt;a href="https://github.com/lebinh/ngxtop">https://github.com/lebinh/ngxtop&lt;/a>&lt;/p>
&lt;p>&lt;code>pip install ngxtop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ngxtop -c /usr/local/nginx/conf/nginx.conf -l /home/shw/app/log/shw_access.log
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>nginx-rrd&lt;/code>图形化监控&lt;/p>
&lt;p>&lt;a href="https://www.nginx.com/resources/wiki/modules/rrd_graph/">https://www.nginx.com/resources/wiki/modules/rrd_graph/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="gc">GC&lt;/h2>
&lt;h3 id="可视化gc日志分析工具">可视化GC日志分析工具&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://gceasy.io">gceasy&lt;/a>&lt;/li>
&lt;li>GCViewer&lt;/li>
&lt;/ul>
&lt;h3 id="parallelgc调优">ParallelGC调优&lt;/h3>
&lt;blockquote>
&lt;p>GC调优步骤&lt;/p>
&lt;ol>
&lt;li>打印GC日志&lt;/li>
&lt;li>根据日志得到关键性指标&lt;/li>
&lt;li>分析GC原因，调优JVM参数&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;ul>
&lt;li>除非确定，否则不要设置最大堆内存&lt;/li>
&lt;li>优先设置吞吐量目标&lt;/li>
&lt;li>如果吞吐量目标达不到，调大最大内存，不能让OS使用Swap，如果仍然达不到，降低目标。&lt;/li>
&lt;li>吞吐量能达到，GC时间太长，设置停顿时间的目标。&lt;/li>
&lt;/ul>
&lt;h3 id="g1-gc调优">G1 GC调优&lt;/h3>
&lt;ul>
&lt;li>年轻代大小：避免使用&lt;code>-Xmn&lt;/code>,&lt;code>XX:NewRatio&lt;/code>等显式设置Young区大小，会覆盖暂停时间目标。&lt;/li>
&lt;li>暂停时间目标：暂停时间不要太苛刻，其吞吐量目标是90%的应用程序时间和10%的垃圾回收时间，太严苛会直接影响吞吐量。&lt;/li>
&lt;/ul></description></item><item><title>单点登录SSO和集中式认证服务CAS和开放授权OAuth的简要解释</title><link>https://blog.itning.top/post/2019/04/08/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1cas%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83oauth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/</link><pubDate>Mon, 08 Apr 2019 14:15:42 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/08/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1cas%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83oauth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/</guid><description>&lt;h2 id="什么是sso">什么是SSO？&lt;/h2>
&lt;blockquote>
&lt;p>维基百科中对&lt;a href="https://zh.wikipedia.org/wiki/%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5">SSO&lt;/a>的解释：&lt;/p>
&lt;p>&lt;strong>单点登录&lt;/strong>（英语：Single sign-on，缩写为 SSO），又译为&lt;strong>单一签入&lt;/strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供&lt;a href="https://zh.wikipedia.org/wiki/%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6">访问控制&lt;/a>的属性。当拥有这项属性时，当用户&lt;a href="https://zh.wikipedia.org/wiki/%E7%99%BB%E5%85%A5">登录&lt;/a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以&lt;a href="https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE">轻型目录访问协议&lt;/a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，&lt;strong>单一退出&lt;/strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，单点登陆就是用户登陆过一个系统后访问其它需要认证的系统，不用用户再重复输入用户名和密码。&lt;/p>
&lt;p>单点登陆包含 单点登陆 单点登出&lt;/p>
&lt;p>可以看下单点登陆图解：&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-08-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1CAS%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83OAuth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/dandiandenglu.png" alt="单点登陆图解">&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/ywlaker/p/6113927.html">单点登录原理与简单实现&lt;/a>&lt;/p>
&lt;p>那么CAS又是什么呢？&lt;/p>
&lt;h2 id="什么是cas">什么是CAS？&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>集中式认证服务&lt;/strong>（英语：Central Authentication Service，缩写&lt;strong>CAS&lt;/strong>）是一种针对&lt;a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">万维网&lt;/a>的&lt;a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95">单点登录&lt;/a>协议。它的目的是允许一个用户访问多个应用程序，而只需提供一次凭证（如用户名和密码）。它还允许web应用程序在没有获得用户的安全凭据（如密码）的情况下对用户进行身份验证。“CAS”也指实现了该协议的软件包。&lt;/p>
&lt;/blockquote>
&lt;p>可以说CAS实现了SSO。&lt;/p>
&lt;p>其中CAS定义了一些规范：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">定义&lt;/th>
&lt;th align="center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">Client&lt;/td>
&lt;td align="center">终端用户或者是 WEB 浏览器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">Server&lt;/td>
&lt;td align="center">统一认证服务所在的服务器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">Service&lt;/td>
&lt;td align="center">终端用户或者 WEB 浏览器试图访问的应用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">Proxy&lt;/td>
&lt;td align="center">作为代理的服务，用户通过该服务（代理）访问Back-end service（后端应用）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">Back-end service&lt;/td>
&lt;td align="center">用户通过代理访问的应用，这个应用就被称为后端服务（Back-end service） 。它也被称作“target service”目标服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">TGT&lt;/td>
&lt;td align="center">Ticket Grangting Ticket 。TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以证明自己在CAS成功登录过。TGT封装了Cookie值以及此Cookie值对应的用户信息。当HTTP请求到来时，CAS以此Cookie值为key查询缓存中有无TGT ，如果有的话，则相信用户已登录过。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">ST&lt;/td>
&lt;td align="center">Service Ticket 。ST是CAS为用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取ST。用户向CAS发出获取ST的请求，CAS发现用户有TGT，则签发一个ST，返回给用户。用户拿着ST去访问service，service拿ST去CAS验证，验证通过后，允许用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">TGC&lt;/td>
&lt;td align="center">Ticket Grangting Cookies 保持TGT信息的cookies，保存在使用浏览器的客户端&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">PGT&lt;/td>
&lt;td align="center">Proxy TicketGranting Ticket。Proxy Service认证成功后，CAS会生成PGT，并将值回传给Proxy Service 。Proxy Service拿到PGT后，就可以为Target Service做代理，为其申请PT。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">PGTIOU&lt;/td>
&lt;td align="center">Proxy TicketGranting Ticket IOU。PGTIOU是CAS协议中定义的一种附加票据，它增强了传输、获取PGT的安全性。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">PT&lt;/td>
&lt;td align="center">Proxy Ticket。PT是用户访问Target Serivce的票据。用户经由Proxy Service去CAS获取到PT后，再访问Target Serivce，Target Serivce去CAS验证PT成功后，才允许用户访问。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>CAS作为一个规范，规定了一系列需要暴露的服务端:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">地址&lt;/th>
&lt;th align="center">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">/login&lt;/td>
&lt;td align="center">登录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/logout&lt;/td>
&lt;td align="center">登出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/validate&lt;/td>
&lt;td align="center">验证ST&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/serviceValidate&lt;/td>
&lt;td align="center">验证ST [CAS 2.0]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/proxyValidate&lt;/td>
&lt;td align="center">验证PT [CAS 2.0]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/p3/serviceValidate&lt;/td>
&lt;td align="center">ST验证 [CAS 3.0]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="center">/p3/proxyValidate&lt;/td>
&lt;td align="center">PT验证 [CAS 3.0]&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-08-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1CAS%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83OAuth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/cas.png" alt="CAS时序图">&lt;/p>
&lt;p>CAS标准：&lt;a href="https://apereo.github.io/cas/4.2.x/protocol/CAS-Protocol-Specification.html">https://apereo.github.io/cas/4.2.x/protocol/CAS-Protocol-Specification.html&lt;/a>&lt;/p>
&lt;p>CAS实现：&lt;a href="https://www.apereo.org/projects/cas">https://www.apereo.org/projects/cas&lt;/a>&lt;/p>
&lt;h2 id="oauth-oauth2-又是什么">OAuth OAuth2 又是什么？&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>开放授权&lt;/strong>（OAuth）是一个&lt;a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%A0%87%E5%87%86">开放标准&lt;/a>，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和&lt;a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81">密码&lt;/a>提供给第三方应用。&lt;/p>
&lt;p>OAuth 2.0是OAuth协议的下一版本，但不向下兼容OAuth 1.0。OAuth 2.0关注客户端开发者的简易性，同时为Web应用、桌面应用、手机和智能设备提供专门的认证流程。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> +--------+ +---------------+
| |--(A)- Authorization Request -&amp;gt;| Resource |
| | | Owner |
| |&amp;lt;-(B)-- Authorization Grant ---| |
| | +---------------+
| |
| | +---------------+
| |--(C)-- Authorization Grant --&amp;gt;| Authorization |
| Client | | Server |
| |&amp;lt;-(D)----- Access Token -------| |
| | +---------------+
| |
| | +---------------+
| |--(E)----- Access Token ------&amp;gt;| Resource |
| | | Server |
| |&amp;lt;-(F)--- Protected Resource ---| |
+--------+ +---------------+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>（A）用户打开客户端以后，客户端请求资源所有者（用户）的授权。&lt;/li>
&lt;li>（B）用户同意给予客户端授权。&lt;/li>
&lt;li>（C）客户端使用上一步获得的授权，向认证服务器申请访问令牌。&lt;/li>
&lt;li>（D）认证服务器对客户端进行认证以后，确认无误，同意发放访问令牌。&lt;/li>
&lt;li>（E）客户端使用访问令牌，向资源服务器申请获取资源。&lt;/li>
&lt;li>（F）资源服务器确认令牌无误，同意向客户端开放资源。&lt;/li>
&lt;/ul>
&lt;p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。&lt;/p>
&lt;ul>
&lt;li>授权码模式（authorization code）&lt;/li>
&lt;li>简化模式（implicit）&lt;/li>
&lt;li>密码模式（resource owner password credentials）&lt;/li>
&lt;li>客户端模式（client credentials）&lt;/li>
&lt;/ul>
&lt;p>使用GitHub的OAuth2的一个例子:&lt;/p>
&lt;p>访问&lt;a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new&lt;/a>申请 Client ID 和 Client Secret&lt;/p>
&lt;p>&lt;a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/">GitHub的OAuth2文档&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用浏览器访问&lt;/p>
&lt;p>&lt;code>GET https://github.com/login/oauth/authorize&lt;/code>&lt;/p>
&lt;p>请求参数:&lt;/p>
&lt;ul>
&lt;li>response_type：表示授权类型，必选项，此处的值固定为&amp;quot;code&amp;rdquo;&lt;/li>
&lt;li>client_id：表示客户端的ID，必选项&lt;/li>
&lt;li>redirect_uri：表示重定向URI，可选项&lt;/li>
&lt;li>scope：表示申请的权限范围，可选项&lt;/li>
&lt;li>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。&lt;/li>
&lt;/ul>
&lt;p>例如:&lt;code>https://github.com/login/oauth/authorize?response_type=code&amp;amp;client_id=f240fa1fb1eb47037def&amp;amp;redirect_uri=http://localhost:8080/&amp;amp;state=suijizifuchuan&lt;/code>&lt;/p>
&lt;p>访问后浏览器会返回一个授权页面:&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-08-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1CAS%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83OAuth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/diyibu.png" alt="授权页面">&lt;/p>
&lt;p>我们授权后浏览器会重定向到如下地址:&lt;/p>
&lt;p>&lt;code>http://localhost:8080/?code=d83761f6f1297179075a&amp;amp;state=suijizifuchuan&lt;/code>&lt;/p>
&lt;ul>
&lt;li>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。&lt;/li>
&lt;li>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>发送POST请求获取令牌&lt;/p>
&lt;p>&lt;code>POST https://github.com/login/oauth/access_token&lt;/code>&lt;/p>
&lt;p>请求参数:&lt;/p>
&lt;ul>
&lt;li>grant_type：表示使用的授权模式，必选项，此处的值固定为&amp;quot;authorization_code&amp;rdquo;。&lt;/li>
&lt;li>code：表示上一步获得的授权码，必选项。&lt;/li>
&lt;li>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。&lt;/li>
&lt;li>client_id：表示客户端ID，必选项。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意:GitHub的参数与以上参数有些不同&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>l类型&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>client_secret&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>**需要。**您从GitHub收到的GitHub应用程序的客户机密。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>**需要。**您收到的代码作为对第1步的回复。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>redirect_uri&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>应用程序中的URL，用于在授权后发送用户。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>state&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>您在步骤1中提供的不可思议的随机字符串。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>client_id&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>**需要。**您从GitHub收到的GitHub应用程序的客户端ID。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-08-%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95SSO%E5%92%8C%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1CAS%E5%92%8C%E5%BC%80%E6%94%BE%E6%8E%88%E6%9D%83OAuth%E7%9A%84%E7%AE%80%E8%A6%81%E8%A7%A3%E9%87%8A/dierbu.png" alt="令牌">&lt;/p>
&lt;p>其中:&lt;/p>
&lt;p>&lt;code>1a4800d2903cab1e18b65d6489aadf407c06776e&lt;/code>就是你获取到的令牌&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用访问令牌访问API&lt;/p>
&lt;p>&lt;code>GET https://api.github.com/user?access_token=...&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://waylau.com/principle-and-practice-of-oauth2/">OAuth 2.0 认证的原理与实践&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0&lt;/a>&lt;/p></description></item><item><title>Redis缓存相关面试题</title><link>https://blog.itning.top/post/2019/04/01/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Mon, 01 Apr 2019 14:30:38 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/01/redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;h2 id="怎么保证redis是高并发以及高可用的">怎么保证redis是高并发以及高可用的？&lt;/h2>
&lt;h3 id="redis如何通过读写分离来承载读请求qps超过10万">Redis如何通过读写分离来承载读请求QPS超过10万+？&lt;/h3>
&lt;p>一般来说 读高并发 而不是 写高并发 （读多写少）（写多读少最好用异步【消息队列】）&lt;/p>
&lt;p>所以读写分离：主从架构 主负责写 从节点负责读&lt;/p>
&lt;p>QPS太高可以直接增加从节点即可&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a1.png" alt="主从分离">&lt;/p>
&lt;h3 id="redis-replication以及master持久化对主从架构的安全意义">Redis replication以及master持久化对主从架构的安全意义&lt;/h3>
&lt;p>如果master不做持久化（关闭RDB和AOF）当master宕机重启的时候，master没有任何数据可以恢复，那么它会将空数据同步到slave节点中，相当于清空了slave节点。&lt;/p>
&lt;p>所以必须要使用持久化机制&lt;/p>
&lt;h3 id="redis主从复制原理断点续传无磁盘化复制过期key处理">Redis主从复制原理、断点续传、无磁盘化复制、过期key处理&lt;/h3>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a2.png" alt="RedisReplica最最基本的原理">&lt;/p>
&lt;p>1、主从架构的核心原理&lt;/p>
&lt;p>当启动一个slave node的时候，它会发送一个PSYNC命令给master node&lt;/p>
&lt;p>如果这是slave node重新连接master node，那么master node仅仅会复制给slave部分缺少的数据; 否则如果是slave node第一次连接master node，那么会触发一次full resynchronization&lt;/p>
&lt;p>开始full resynchronization的时候，master会启动一个后台线程，开始生成一份RDB快照文件，同时还会将从客户端收到的所有写命令缓存在内存中。RDB文件生成完毕之后，master会将这个RDB发送给slave，slave会先写入本地磁盘，然后再从本地磁盘加载到内存中。然后master会将内存中缓存的写命令发送给slave，slave也会同步这些数据。&lt;/p>
&lt;p>slave node如果跟master node有网络故障，断开了连接，会自动重连。master如果发现有多个slave node都来重新连接，仅仅会启动一个rdb save操作，用一份数据服务所有slave node。&lt;/p>
&lt;p>2、主从复制的断点续传&lt;/p>
&lt;p>从redis 2.8开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份&lt;/p>
&lt;p>master node会在内存中常见一个backlog，master和slave都会保存一个replica offset还有一个master id，offset就是保存在backlog中的。如果master和slave网络连接断掉了，slave会让master从上次的replica offset开始继续复制&lt;/p>
&lt;p>但是如果没有找到对应的offset，那么就会执行一次resynchronization&lt;/p>
&lt;p>3、无磁盘化复制&lt;/p>
&lt;p>master在内存中直接创建rdb，然后发送给slave，不会在自己本地落地磁盘了&lt;/p>
&lt;p>repl-diskless-sync
repl-diskless-sync-delay，等待一定时长再开始复制，因为要等更多slave重新连接过来&lt;/p>
&lt;p>4、过期key处理&lt;/p>
&lt;p>slave不会过期key，只会等待master过期key。如果master过期了一个key，或者通过LRU淘汰了一个key，那么会模拟一条del命令发送给slave。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a3.png" alt="Redis主从复制的原理">&lt;/p>
&lt;h3 id="redis-replication的完整流运行程和原理的再次深入剖析">Redis Replication的完整流运行程和原理的再次深入剖析&lt;/h3>
&lt;p>1、复制的完整流程&lt;/p>
&lt;p>（1）slave node启动，仅仅保存master node的信息，包括master node的host和ip，但是复制流程没开始&lt;/p>
&lt;p>master host和ip是从哪儿来的，redis.conf里面的slaveof配置的&lt;/p>
&lt;p>（2）slave node内部有个定时任务，每秒检查是否有新的master node要连接和复制，如果发现，就跟master node建立socket网络连接
（3）slave node发送ping命令给master node
（4）口令认证，如果master设置了requirepass，那么salve node必须发送masterauth的口令过去进行认证
（5）master node第一次执行全量复制，将所有数据发给slave node
（6）master node后续持续将写命令，异步复制给slave node&lt;/p>
&lt;p>2、数据同步相关的核心机制&lt;/p>
&lt;p>指的就是第一次slave连接msater的时候，执行的全量复制，那个过程里面你的一些细节的机制&lt;/p>
&lt;p>（1）master和slave都会维护一个offset&lt;/p>
&lt;p>master会在自身不断累加offset，slave也会在自身不断累加offset
slave每秒都会上报自己的offset给master，同时master也会保存每个slave的offset&lt;/p>
&lt;p>这个倒不是说特定就用在全量复制的，主要是master和slave都要知道各自的数据的offset，才能知道互相之间的数据不一致的情况&lt;/p>
&lt;p>（2）backlog&lt;/p>
&lt;p>master node有一个backlog，默认是1MB大小
master node给slave node复制数据时，也会将数据在backlog中同步写一份
backlog主要是用来做全量复制中断候的增量复制的&lt;/p>
&lt;p>（3）master run id&lt;/p>
&lt;p>info server，可以看到master run id
如果根据host+ip定位master node，是不靠谱的，如果master node重启或者数据出现了变化，那么slave node应该根据不同的run id区分，run id不同就做全量复制
如果需要不更改run id重启redis，可以使用redis-cli debug reload命令&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a4.png" alt="RedisRunId">&lt;/p>
&lt;p>（4）psync&lt;/p>
&lt;p>从节点使用psync从master node进行复制，psync runid offset
master node会根据自身的情况返回响应信息，可能是FULLRESYNC runid offset触发全量复制，可能是CONTINUE触发增量复制&lt;/p>
&lt;p>3、全量复制&lt;/p>
&lt;p>（1）master执行bgsave，在本地生成一份rdb快照文件
（2）master node将rdb快照文件发送给salve node，如果rdb复制时间超过60秒（repl-timeout），那么slave node就会认为复制失败，可以适当调节大这个参数
（3）对于千兆网卡的机器，一般每秒传输100MB，6G文件，很可能超过60s
（4）master node在生成rdb时，会将所有新的写命令缓存在内存中，在salve node保存了rdb之后，再将新的写命令复制给salve node
（5）client-output-buffer-limit slave 256MB 64MB 60，如果在复制期间，内存缓冲区持续消耗超过64MB，或者一次性超过256MB，那么停止复制，复制失败
（6）slave node接收到rdb之后，清空自己的旧数据，然后重新加载rdb到自己的内存中，同时基于旧的数据版本对外提供服务
（7）如果slave node开启了AOF，那么会立即执行BGREWRITEAOF，重写AOF&lt;/p>
&lt;p>rdb生成、rdb通过网络拷贝、slave旧数据的清理、slave aof rewrite，很耗费时间&lt;/p>
&lt;p>如果复制的数据量在4G~6G之间，那么很可能全量复制时间消耗到1分半到2分钟&lt;/p>
&lt;p>4、增量复制&lt;/p>
&lt;p>（1）如果全量复制过程中，master-slave网络连接断掉，那么salve重新连接master时，会触发增量复制
（2）master直接从自己的backlog中获取部分丢失的数据，发送给slave node，默认backlog就是1MB
（3）msater就是根据slave发送的psync中的offset来从backlog中获取数据的&lt;/p>
&lt;p>5、heartbeat&lt;/p>
&lt;p>主从节点互相都会发送heartbeat信息&lt;/p>
&lt;p>master默认每隔10秒发送一次heartbeat，salve node每隔1秒发送一个heartbeat&lt;/p>
&lt;p>6、异步复制&lt;/p>
&lt;p>master每次接收到写命令之后，现在内部写入数据，然后异步发送给slave node&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a5.png" alt="复制的完整的基本流程">&lt;/p>
&lt;h3 id="redis哨兵">Redis哨兵&lt;/h3>
&lt;p>1、哨兵的介绍&lt;/p>
&lt;p>sentinal，中文名是哨兵&lt;/p>
&lt;p>哨兵是redis集群架构中非常重要的一个组件，主要功能如下&lt;/p>
&lt;p>（1）集群监控，负责监控redis master和slave进程是否正常工作
（2）消息通知，如果某个redis实例有故障，那么哨兵负责发送消息作为报警通知给管理员
（3）故障转移，如果master node挂掉了，会自动转移到slave node上
（4）配置中心，如果故障转移发生了，通知client客户端新的master地址&lt;/p>
&lt;p>哨兵本身也是分布式的，作为一个哨兵集群去运行，互相协同工作&lt;/p>
&lt;p>（1）故障转移时，判断一个master node是宕机了，需要大部分的哨兵都同意才行，涉及到了分布式选举的问题
（2）即使部分哨兵节点挂掉了，哨兵集群还是能正常工作的，因为如果一个作为高可用机制重要组成部分的故障转移系统本身是单点的，那就很坑爹了&lt;/p>
&lt;p>目前采用的是sentinal 2版本，sentinal 2相对于sentinal 1来说，重写了很多代码，主要是让故障转移的机制和算法变得更加健壮和简单&lt;/p>
&lt;p>2、哨兵的核心知识&lt;/p>
&lt;p>（1）哨兵至少需要3个实例，来保证自己的健壮性
（2）哨兵 + redis主从的部署架构，是不会保证数据零丢失的，只能保证redis集群的高可用性
（3）对于哨兵 + redis主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练&lt;/p>
&lt;p>3、为什么redis哨兵集群只有2个节点无法正常工作？&lt;/p>
&lt;p>哨兵集群必须部署2个以上节点&lt;/p>
&lt;p>如果哨兵集群仅仅部署了个2个哨兵实例，quorum=1&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">+----+ +----+
| M1 |---------| R1 |
| S1 | | S2 |
+----+ +----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Configuration: quorum = 1&lt;/p>
&lt;p>master宕机，s1和s2中只要有1个哨兵认为master宕机就可以还行切换，同时s1和s2中会选举出一个哨兵来执行故障转移&lt;/p>
&lt;p>同时这个时候，需要majority，也就是大多数哨兵都是运行的，2个哨兵的majority就是2（2的majority=2，3的majority=2，5的majority=3，4的majority=2），2个哨兵都运行着，就可以允许执行故障转移&lt;/p>
&lt;p>但是如果整个M1和S1运行的机器宕机了，那么哨兵只有1个了，此时就没有majority来允许执行故障转移，虽然另外一台机器还有一个R1，但是故障转移不会执行&lt;/p>
&lt;p>4、经典的3节点哨兵集群&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> +----+
| M1 |
| S1 |
+----+
|
+----+ | +----+
| R2 |----+----| R3 |
| S2 | | S3 |
+----+ +----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Configuration: quorum = 2，majority&lt;/p>
&lt;p>如果M1所在机器宕机了，那么三个哨兵还剩下2个，S2和S3可以一致认为master宕机，然后选举出一个来执行故障转移&lt;/p>
&lt;p>同时3个哨兵的majority是2，所以还剩下的2个哨兵运行着，就可以允许执行故障转移&lt;/p>
&lt;h3 id="redis哨兵主备切换的数据丢失问题异步复制集群脑裂">Redis哨兵主备切换的数据丢失问题：异步复制、集群脑裂&lt;/h3>
&lt;p>1、两种数据丢失的情况&lt;/p>
&lt;p>主备切换的过程，可能会导致数据丢失&lt;/p>
&lt;p>（1）异步复制导致的数据丢失&lt;/p>
&lt;p>因为master -&amp;gt; slave的复制是异步的，所以可能有部分数据还没复制到slave，master就宕机了，此时这些部分数据就丢失了&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a6.png" alt="异步复制导致的数据丢失">&lt;/p>
&lt;p>（2）脑裂导致的数据丢失&lt;/p>
&lt;p>脑裂，也就是说，某个master所在机器突然脱离了正常的网络，跟其他slave机器不能连接，但是实际上master还运行着&lt;/p>
&lt;p>此时哨兵可能就会认为master宕机了，然后开启选举，将其他slave切换成了master&lt;/p>
&lt;p>这个时候，集群里就会有两个master，也就是所谓的脑裂&lt;/p>
&lt;p>此时虽然某个slave被切换成了master，但是可能client还没来得及切换到新的master，还继续写向旧master的数据可能也丢失了&lt;/p>
&lt;p>因此旧master再次恢复的时候，会被作为一个slave挂到新的master上去，自己的数据会清空，重新从新的master复制数据&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a7.png" alt="脑裂导致的数据丢失">&lt;/p>
&lt;hr>
&lt;p>2、解决异步复制和脑裂导致的数据丢失&lt;/p>
&lt;p>min-slaves-to-write 1
min-slaves-max-lag 10&lt;/p>
&lt;p>要求至少有1个slave，数据复制和同步的延迟不能超过10秒&lt;/p>
&lt;p>如果说一旦所有的slave，数据复制和同步的延迟都超过了10秒钟，那么这个时候，master就不会再接收任何请求了&lt;/p>
&lt;p>上面两个配置可以减少异步复制和脑裂导致的数据丢失&lt;/p>
&lt;p>（1）减少异步复制的数据丢失&lt;/p>
&lt;p>有了min-slaves-max-lag这个配置，就可以确保说，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求，这样可以把master宕机时由于部分数据未同步到slave导致的数据丢失降低的可控范围内&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a8.png" alt="减少异步复制的数据丢失">&lt;/p>
&lt;p>（2）减少脑裂的数据丢失&lt;/p>
&lt;p>如果一个master出现了脑裂，跟其他slave丢了连接，那么上面两个配置可以确保说，如果不能继续给指定数量的slave发送数据，而且slave超过10秒没有给自己ack消息，那么就直接拒绝客户端的写请求&lt;/p>
&lt;p>这样脑裂后的旧master就不会接受client的新数据，也就避免了数据丢失&lt;/p>
&lt;p>上面的配置就确保了，如果跟任何一个slave丢了连接，在10秒后发现没有slave给自己ack，那么就拒绝新的写请求&lt;/p>
&lt;p>因此在脑裂场景下，最多就丢失10秒的数据&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a9.png" alt="减少脑裂的数据丢失">&lt;/p>
&lt;h3 id="redis哨兵的多个核心底层原理的深入解析包含slave选举算法">Redis哨兵的多个核心底层原理的深入解析（包含slave选举算法）&lt;/h3>
&lt;p>1、sdown和odown转换机制&lt;/p>
&lt;p>sdown和odown两种失败状态&lt;/p>
&lt;p>sdown是主观宕机，就一个哨兵如果自己觉得一个master宕机了，那么就是主观宕机&lt;/p>
&lt;p>odown是客观宕机，如果quorum数量的哨兵都觉得一个master宕机了，那么就是客观宕机&lt;/p>
&lt;p>sdown达成的条件很简单，如果一个哨兵ping一个master，超过了is-master-down-after-milliseconds指定的毫秒数之后，就主观认为master宕机&lt;/p>
&lt;p>sdown到odown转换的条件很简单，如果一个哨兵在指定时间内，收到了quorum指定数量的其他哨兵也认为那个master是sdown了，那么就认为是odown了，客观认为master宕机&lt;/p>
&lt;p>2、哨兵集群的自动发现机制&lt;/p>
&lt;p>哨兵互相之间的发现，是通过redis的pub/sub系统实现的，每个哨兵都会往__sentinel__:hello这个channel里发送一个消息，这时候所有其他哨兵都可以消费到这个消息，并感知到其他的哨兵的存在&lt;/p>
&lt;p>每隔两秒钟，每个哨兵都会往自己监控的某个master+slaves对应的__sentinel__:hello channel里发送一个消息，内容是自己的host、ip和runid还有对这个master的监控配置&lt;/p>
&lt;p>每个哨兵也会去监听自己监控的每个master+slaves对应的__sentinel__:hello channel，然后去感知到同样在监听这个master+slaves的其他哨兵的存在&lt;/p>
&lt;p>每个哨兵还会跟其他哨兵交换对master的监控配置，互相进行监控配置的同步&lt;/p>
&lt;p>3、slave配置的自动纠正&lt;/p>
&lt;p>哨兵会负责自动纠正slave的一些配置，比如slave如果要成为潜在的master候选人，哨兵会确保slave在复制现有master的数据; 如果slave连接到了一个错误的master上，比如故障转移之后，那么哨兵会确保它们连接到正确的master上&lt;/p>
&lt;p>4、slave-&amp;gt;master选举算法&lt;/p>
&lt;p>如果一个master被认为odown了，而且majority哨兵都允许了主备切换，那么某个哨兵就会执行主备切换操作，此时首先要选举一个slave来&lt;/p>
&lt;p>会考虑slave的一些信息&lt;/p>
&lt;p>（1）跟master断开连接的时长
（2）slave优先级
（3）复制offset
（4）run id&lt;/p>
&lt;p>如果一个slave跟master断开连接已经超过了down-after-milliseconds的10倍，外加master宕机的时长，那么slave就被认为不适合选举为master&lt;/p>
&lt;p>(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state&lt;/p>
&lt;p>接下来会对slave进行排序&lt;/p>
&lt;p>（1）按照slave优先级进行排序，slave priority越低，优先级就越高
（2）如果slave priority相同，那么看replica offset，哪个slave复制了越多的数据，offset越靠后，优先级就越高
（3）如果上面两个条件都相同，那么选择一个run id比较小的那个slave&lt;/p>
&lt;p>5、quorum和majority&lt;/p>
&lt;p>每次一个哨兵要做主备切换，首先需要quorum数量的哨兵认为odown，然后选举出一个哨兵来做切换，这个哨兵还得得到majority哨兵的授权，才能正式执行切换&lt;/p>
&lt;p>如果quorum &amp;lt; majority，比如5个哨兵，majority就是3，quorum设置为2，那么就3个哨兵授权就可以执行切换&lt;/p>
&lt;p>但是如果quorum &amp;gt;= majority，那么必须quorum数量的哨兵都授权，比如5个哨兵，quorum是5，那么必须5个哨兵都同意授权，才能执行切换&lt;/p>
&lt;p>6、configuration epoch&lt;/p>
&lt;p>哨兵会对一套redis master+slave进行监控，有相应的监控的配置&lt;/p>
&lt;p>执行切换的那个哨兵，会从要切换到的新master（salve-&amp;gt;master）那里得到一个configuration epoch，这就是一个version号，每次切换的version号都必须是唯一的&lt;/p>
&lt;p>如果第一个选举出的哨兵切换失败了，那么其他哨兵，会等待failover-timeout时间，然后接替继续执行切换，此时会重新获取一个新的configuration epoch，作为新的version号&lt;/p>
&lt;p>7、configuraiton传播&lt;/p>
&lt;p>哨兵完成切换之后，会在自己本地更新生成最新的master配置，然后同步给其他的哨兵，就是通过之前说的pub/sub消息机制&lt;/p>
&lt;p>这里之前的version号就很重要了，因为各种消息都是通过一个channel去发布和监听的，所以一个哨兵完成一次新的切换之后，新的master配置是跟着新的version号的&lt;/p>
&lt;p>其他的哨兵都是根据版本号的大小来更新自己的master配置的&lt;/p>
&lt;h2 id="怎么保证redis挂掉之后再重启数据可以进行恢复">怎么保证redis挂掉之后再重启数据可以进行恢复？&lt;/h2>
&lt;h3 id="为什么要做持久化">为什么要做持久化？&lt;/h3>
&lt;p>如果没有持久化的话，redis遇到灾难性故障的时候，就会丢失所有的数据&lt;/p>
&lt;p>如果通过持久化将数据搞一份儿在磁盘上去，然后定期比如说同步和备份到一些云存储服务上去，那么就可以保证数据不丢失全部，还是可以恢复一部分数据回来的&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a10.png" alt="redis持久化的意义">&lt;/p>
&lt;h3 id="rdb与aof">RDB与AOF&lt;/h3>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a11.png" alt="RDB和AOF的介绍">&lt;/p>
&lt;p>1、RDB和AOF两种持久化机制的介绍&lt;/p>
&lt;p>RDB持久化机制，对redis中的数据执行周期性的持久化&lt;/p>
&lt;p>AOF机制对每条写入命令作为日志，以append-only的模式写入一个日志文件中，在redis重启的时候，可以通过回放AOF日志中的写入指令来重新构建整个数据集&lt;/p>
&lt;p>如果我们想要redis仅仅作为纯内存的缓存来用，那么可以禁止RDB和AOF所有的持久化机制&lt;/p>
&lt;p>通过RDB或AOF，都可以将redis内存中的数据给持久化到磁盘上面来，然后可以将这些数据备份到别的地方去，比如说阿里云，云服务&lt;/p>
&lt;p>如果redis挂了，服务器上的内存和磁盘上的数据都丢了，可以从云服务上拷贝回来之前的数据，放到指定的目录中，然后重新启动redis，redis就会自动根据持久化数据文件中的数据，去恢复内存中的数据，继续对外提供服务&lt;/p>
&lt;p>如果同时使用RDB和AOF两种持久化机制，那么在redis重启的时候，会使用AOF来重新构建数据，因为AOF中的数据更加完整&lt;/p>
&lt;hr>
&lt;p>2、RDB持久化机制的优点&lt;/p>
&lt;p>（1）RDB会生成多个数据文件，每个数据文件都代表了某一个时刻中redis的数据，这种多个数据文件的方式，非常适合做冷备，可以将这种完整的数据文件发送到一些远程的安全存储上去，比如说Amazon的S3云服务上去，在国内可以是阿里云的ODPS分布式存储上，以预定好的备份策略来定期备份redis中的数据&lt;/p>
&lt;p>（2）RDB对redis对外提供的读写服务，影响非常小，可以让redis保持高性能，因为redis主进程只需要fork一个子进程，让子进程执行磁盘IO操作来进行RDB持久化即可&lt;/p>
&lt;p>（3）相对于AOF持久化机制来说，直接基于RDB数据文件来重启和恢复redis进程，更加快速&lt;/p>
&lt;hr>
&lt;p>3、RDB持久化机制的缺点&lt;/p>
&lt;p>（1）如果想要在redis故障时，尽可能少的丢失数据，那么RDB没有AOF好。一般来说，RDB数据快照文件，都是每隔5分钟，或者更长时间生成一次，这个时候就得接受一旦redis进程宕机，那么会丢失最近5分钟的数据&lt;/p>
&lt;p>（2）RDB每次在fork子进程来执行RDB快照数据文件生成的时候，如果数据文件特别大，可能会导致对客户端提供的服务暂停数毫秒，或者甚至数秒&lt;/p>
&lt;hr>
&lt;p>4、AOF持久化机制的优点&lt;/p>
&lt;p>（1）AOF可以更好的保护数据不丢失，一般AOF会每隔1秒，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据&lt;/p>
&lt;p>（2）AOF日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复&lt;/p>
&lt;p>（3）AOF日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。&lt;/p>
&lt;p>（4）AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心用flushall命令清空了所有数据，只要这个时候后台rewrite还没有发生，那么就可以立即拷贝AOF文件，将最后一条flushall命令给删了，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据&lt;/p>
&lt;hr>
&lt;p>5、AOF持久化机制的缺点&lt;/p>
&lt;p>（1）对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大&lt;/p>
&lt;p>（2）AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的&lt;/p>
&lt;p>（3）以前AOF发生过bug，就是通过AOF记录的日志，进行数据恢复的时候，没有恢复一模一样的数据出来。所以说，类似AOF这种较为复杂的基于命令日志/merge/回放的方式，比基于RDB每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有bug。不过AOF就是为了避免rewrite过程导致的bug，因此每次rewrite并不是基于旧的指令日志进行merge的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a12.png" alt="rewrite原理剖析">&lt;/p>
&lt;hr>
&lt;p>6、RDB和AOF到底该如何选择&lt;/p>
&lt;p>（1）不要仅仅使用RDB，因为那样会导致你丢失很多数据&lt;/p>
&lt;p>（2）也不要仅仅使用AOF，因为那样有两个问题，第一，你通过AOF做冷备，没有RDB做冷备，来的恢复速度更快; 第二，RDB每次简单粗暴生成数据快照，更加健壮，可以避免AOF这种复杂的备份和恢复机制的bug&lt;/p>
&lt;p>（3）综合使用AOF和RDB两种持久化机制，用AOF来保证数据不丢失，作为数据恢复的第一选择; 用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，还可以使用RDB来进行快速的数据恢复&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a13.png" alt="RDB丢失数据的问题">&lt;/p>
&lt;h2 id="redis-cluster集群模式的原理">Redis Cluster集群模式的原理&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a14.png" alt="redis单master架构的容量的瓶颈问题">&lt;/p>
&lt;p>支撑N个redis master node，每个master node都可以挂载多个slave node&lt;/p>
&lt;p>读写分离的架构，对于每个master来说，写就写到master，然后读就从mater对应的slave去读&lt;/p>
&lt;p>高可用，因为每个master都有salve节点，那么如果mater挂掉，redis cluster这套机制，就会自动将某个slave切换成master&lt;/p>
&lt;p>redis cluster（多master + 读写分离 + 高可用）&lt;/p>
&lt;p>我们只要基于redis cluster去搭建redis集群即可，不需要手工去搭建replication复制+主从架构+读写分离+哨兵集群+高可用&lt;/p>
&lt;p>redis cluster vs. replication + sentinal&lt;/p>
&lt;p>如果你的数据量很少，主要是承载高并发高性能的场景，比如你的缓存一般就几个G，单机足够了&lt;/p>
&lt;p>replication，一个mater，多个slave，要几个slave跟你的要求的读吞吐量有关系，然后自己搭建一个sentinal集群，去保证redis主从架构的高可用性，就可以了&lt;/p>
&lt;p>redis cluster，主要是针对海量数据+高并发+高可用的场景，海量数据，如果你的数据量很大，那么建议就用redis cluster&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a15.png" alt="redis如何通过master横向扩容支撑1T+数据量">&lt;/p>
&lt;h3 id="节点间的内部通信机制">节点间的内部通信机制&lt;/h3>
&lt;p>1、基础通信原理&lt;/p>
&lt;p>（1）redis cluster节点间采取gossip协议进行通信&lt;/p>
&lt;p>跟集中式不同，不是将集群元数据（节点信息，故障，等等）集中存储在某个节点上，而是互相之间不断通信，保持整个集群所有节点的数据是完整的&lt;/p>
&lt;p>维护集群的元数据用得，集中式，一种叫做gossip&lt;/p>
&lt;p>集中式：好处在于，元数据的更新和读取，时效性非常好，一旦元数据出现了变更，立即就更新到集中式的存储中，其他节点读取的时候立即就可以感知到; 不好在于，所有的元数据的跟新压力全部集中在一个地方，可能会导致元数据的存储有压力&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a16.png" alt="集中式的集群元数据存储和维护">&lt;/p>
&lt;p>gossip：好处在于，元数据的更新比较分散，不是集中在一个地方，更新请求会陆陆续续，打到所有节点上去更新，有一定的延时，降低了压力; 缺点，元数据更新有延时，可能导致集群的一些操作会有一些滞后&lt;/p>
&lt;p>我们刚才做reshard，去做另外一个操作，会发现说，configuration error，达成一致&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-04-01-Redis%E7%BC%93%E5%AD%98%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a17.png" alt="gossip协议维护集群元数据">&lt;/p>
&lt;p>（2）10000端口&lt;/p>
&lt;p>每个节点都有一个专门用于节点间通信的端口，就是自己提供服务的端口号+10000，比如7001，那么用于节点间通信的就是17001端口&lt;/p>
&lt;p>每隔节点每隔一段时间都会往另外几个节点发送ping消息，同时其他几点接收到ping之后返回pong&lt;/p>
&lt;p>（3）交换的信息&lt;/p>
&lt;p>故障信息，节点的增加和移除，hash slot信息，等等&lt;/p>
&lt;p>2、gossip协议&lt;/p>
&lt;p>gossip协议包含多种消息，包括ping，pong，meet，fail，等等&lt;/p>
&lt;p>meet: 某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信&lt;/p>
&lt;p>redis-trib.rb add-node&lt;/p>
&lt;p>其实内部就是发送了一个gossip meet消息，给新加入的节点，通知那个节点去加入我们的集群&lt;/p>
&lt;p>ping: 每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过ping交换元数据&lt;/p>
&lt;p>每个节点每秒都会频繁发送ping给其他的集群，ping，频繁的互相之间交换数据，互相进行元数据的更新&lt;/p>
&lt;p>pong: 返回ping和meet，包含自己的状态和其他信息，也可以用于信息广播和更新&lt;/p>
&lt;p>fail: 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了&lt;/p>
&lt;p>3、ping消息深入&lt;/p>
&lt;p>ping很频繁，而且要携带一些元数据，所以可能会加重网络负担&lt;/p>
&lt;p>每个节点每秒会执行10次ping，每次会选择5个最久没有通信的其他节点&lt;/p>
&lt;p>当然如果发现某个节点通信延时达到了cluster_node_timeout / 2，那么立即发送ping，避免数据交换延时过长，落后的时间太长了&lt;/p>
&lt;p>比如说，两个节点之间都10分钟没有交换数据了，那么整个集群处于严重的元数据不一致的情况，就会有问题&lt;/p>
&lt;p>所以cluster_node_timeout可以调节，如果调节比较大，那么会降低发送的频率&lt;/p>
&lt;p>每次ping，一个是带上自己节点的信息，还有就是带上1/10其他节点的信息，发送出去，进行数据交换&lt;/p>
&lt;p>至少包含3个其他节点的信息，最多包含总节点-2个其他节点的信息&lt;/p>
&lt;h3 id="面向集群的jedis内部实现原理">面向集群的jedis内部实现原理&lt;/h3>
&lt;p>开发，jedis，redis的java client客户端，redis cluster，jedis cluster api&lt;/p>
&lt;p>jedis cluster api与redis cluster集群交互的一些基本原理&lt;/p>
&lt;p>1、基于重定向的客户端&lt;/p>
&lt;p>redis-cli -c，自动重定向&lt;/p>
&lt;p>（1）请求重定向&lt;/p>
&lt;p>客户端可能会挑选任意一个redis实例去发送命令，每个redis实例接收到命令，都会计算key对应的hash slot&lt;/p>
&lt;p>如果在本地就在本地处理，否则返回moved给客户端，让客户端进行重定向&lt;/p>
&lt;p>cluster keyslot mykey，可以查看一个key对应的hash slot是什么&lt;/p>
&lt;p>用redis-cli的时候，可以加入-c参数，支持自动的请求重定向，redis-cli接收到moved之后，会自动重定向到对应的节点执行命令&lt;/p>
&lt;p>（2）计算hash slot&lt;/p>
&lt;p>计算hash slot的算法，就是根据key计算CRC16值，然后对16384取模，拿到对应的hash slot&lt;/p>
&lt;p>用hash tag可以手动指定key对应的slot，同一个hash tag下的key，都会在一个hash slot中，比如set mykey1:{100}和set mykey2:{100}&lt;/p>
&lt;p>（3）hash slot查找&lt;/p>
&lt;p>节点间通过gossip协议进行数据交换，就知道每个hash slot在哪个节点上&lt;/p>
&lt;p>2、smart jedis&lt;/p>
&lt;p>（1）什么是smart jedis&lt;/p>
&lt;p>基于重定向的客户端，很消耗网络IO，因为大部分情况下，可能都会出现一次请求重定向，才能找到正确的节点&lt;/p>
&lt;p>所以大部分的客户端，比如java redis客户端，就是jedis，都是smart的&lt;/p>
&lt;p>本地维护一份hashslot -&amp;gt; node的映射表，缓存，大部分情况下，直接走本地缓存就可以找到hashslot -&amp;gt; node，不需要通过节点进行moved重定向&lt;/p>
&lt;p>（2）JedisCluster的工作原理&lt;/p>
&lt;p>在JedisCluster初始化的时候，就会随机选择一个node，初始化hashslot -&amp;gt; node映射表，同时为每个节点创建一个JedisPool连接池&lt;/p>
&lt;p>每次基于JedisCluster执行操作，首先JedisCluster都会在本地计算key的hashslot，然后在本地映射表找到对应的节点&lt;/p>
&lt;p>如果那个node正好还是持有那个hashslot，那么就ok; 如果说进行了reshard这样的操作，可能hashslot已经不在那个node上了，就会返回moved&lt;/p>
&lt;p>如果JedisCluter API发现对应的节点返回moved，那么利用该节点的元数据，更新本地的hashslot -&amp;gt; node映射表缓存&lt;/p>
&lt;p>重复上面几个步骤，直到找到对应的节点，如果重试超过5次，那么就报错，JedisClusterMaxRedirectionException&lt;/p>
&lt;p>jedis老版本，可能会出现在集群某个节点故障还没完成自动切换恢复时，频繁更新hash slot，频繁ping节点检查活跃，导致大量网络IO开销&lt;/p>
&lt;p>jedis最新版本，对于这些过度的hash slot更新和ping，都进行了优化，避免了类似问题&lt;/p>
&lt;p>（3）hashslot迁移和ask重定向&lt;/p>
&lt;p>如果hash slot正在迁移，那么会返回ask重定向给jedis&lt;/p>
&lt;p>jedis接收到ask重定向之后，会重新定位到目标节点去执行，但是因为ask发生在hash slot迁移过程中，所以JedisCluster API收到ask是不会更新hashslot本地缓存&lt;/p>
&lt;p>已经可以确定说，hashslot已经迁移完了，moved是会更新本地hashslot-&amp;gt;node映射表缓存的&lt;/p>
&lt;h3 id="高可用性与主备切换原理">高可用性与主备切换原理&lt;/h3>
&lt;p>redis cluster的高可用的原理，几乎跟哨兵是类似的&lt;/p>
&lt;p>1、判断节点宕机&lt;/p>
&lt;p>如果一个节点认为另外一个节点宕机，那么就是pfail，主观宕机&lt;/p>
&lt;p>如果多个节点都认为另外一个节点宕机了，那么就是fail，客观宕机，跟哨兵的原理几乎一样，sdown，odown&lt;/p>
&lt;p>在cluster-node-timeout内，某个节点一直没有返回pong，那么就被认为pfail&lt;/p>
&lt;p>如果一个节点认为某个节点pfail了，那么会在gossip ping消息中，ping给其他节点，如果超过半数的节点都认为pfail了，那么就会变成fail&lt;/p>
&lt;p>2、从节点过滤&lt;/p>
&lt;p>对宕机的master node，从其所有的slave node中，选择一个切换成master node&lt;/p>
&lt;p>检查每个slave node与master node断开连接的时间，如果超过了cluster-node-timeout * cluster-slave-validity-factor，那么就没有资格切换成master&lt;/p>
&lt;p>这个也是跟哨兵是一样的，从节点超时过滤的步骤&lt;/p>
&lt;p>3、从节点选举&lt;/p>
&lt;p>哨兵：对所有从节点进行排序，slave priority，offset，run id&lt;/p>
&lt;p>每个从节点，都根据自己对master复制数据的offset，来设置一个选举时间，offset越大（复制数据越多）的从节点，选举时间越靠前，优先进行选举&lt;/p>
&lt;p>所有的master node开始slave选举投票，给要进行选举的slave进行投票，如果大部分master node（N/2 + 1）都投票给了某个从节点，那么选举通过，那个从节点可以切换成master&lt;/p>
&lt;p>从节点执行主备切换，从节点切换为主节点&lt;/p>
&lt;p>4、与哨兵比较&lt;/p>
&lt;p>整个流程跟哨兵相比，非常类似，所以说，redis cluster功能强大，直接集成了replication和sentinal的功能&lt;/p>
&lt;p>没有办法去给大家深入讲解redis底层的设计的细节，核心原理和设计的细节，那个除非单独开一门课，redis底层原理深度剖析，redis源码&lt;/p>
&lt;p>对于咱们这个架构课来说，主要关注的是架构，不是底层的细节，对于架构来说，核心的原理的基本思路，是要梳理清晰的&lt;/p></description></item><item><title>分库分表原理及中间件相关面试题</title><link>https://blog.itning.top/post/2019/03/31/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Sun, 31 Mar 2019 10:12:07 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/31/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;h2 id="为什么要分库分表">为什么要分库分表？&lt;/h2>
&lt;p>数据库扛不住太大的流量，单表数据量太大，查询慢&lt;/p>
&lt;h2 id="什么是分库什么是分表">什么是分库？什么是分表？&lt;/h2>
&lt;p>所谓分库就是把一个库中的数据拆分到多个库中，避免了单库流量太大&lt;/p>
&lt;p>分表就是把一个表的数据放到多个表中，然后查询的时候你就查一个表。比如按照用户id来分表，将一个用户的数据就放在一个表中。然后操作的时候你对一个用户就操作那个表就好了。这样可以控制每个表的数据量在可控的范围内，比如每个表就固定在200万以内。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a1.png" alt="分库分表">&lt;/p>
&lt;h2 id="有哪些分库分表中间件优缺点">有哪些分库分表中间件？优缺点？&lt;/h2>
&lt;p>比较常见的包括：cobar、TDDL、atlas、sharding-jdbc、mycat&lt;/p>
&lt;ul>
&lt;li>
&lt;p>cobar：阿里b2b团队开发和开源的，属于proxy层方案。早些年还可以用，但是最近几年都没更新了，基本没啥人用，差不多算是被抛弃的状态吧。而且不支持读写分离、存储过程、跨库join和分页等操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TDDL：淘宝团队开发的，属于client层方案。不支持join、多表查询等语法，就是基本的crud语法是ok，但是支持读写分离。目前使用的也不多，因为还依赖淘宝的diamond配置管理系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>atlas：360开源的，属于proxy层方案，以前是有一些公司在用的，但是确实有一个很大的问题就是社区最新的维护都在5年前了。所以，现在用的公司基本也很少了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sharding-jdbc：当当开源的，属于client层方案。确实之前用的还比较多一些，因为SQL语法支持也比较多，没有太多限制，而且目前推出到了2.0版本，支持分库分表、读写分离、分布式id生成、柔性事务（最大努力送达型事务、TCC事务）。而且确实之前使用的公司会比较多一些（这个在官网有登记使用的公司，可以看到从2017年一直到现在，是不少公司在用的），目前社区也还一直在开发和维护，还算是比较活跃，个人认为算是一个现在也可以选择的方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mycat：基于cobar改造的，属于proxy层方案，支持的功能非常完善，而且目前应该是非常火的而且不断流行的数据库中间件，社区很活跃，也有一些公司开始在用了。但是确实相比于sharding jdbc来说，年轻一些，经历的锤炼少一些。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>所以综上所述，现在其实建议考量的，就是sharding-jdbc和mycat，这两个都可以去考虑使用。&lt;/p>
&lt;p>sharding-jdbc这种client层方案的优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高，但是如果遇到升级啥的需要各个系统都重新升级版本再发布，各个系统都需要耦合sharding-jdbc的依赖；&lt;/p>
&lt;p>mycat这种proxy层方案的缺点在于需要部署，自己及运维一套中间件，运维成本高，但是好处在于对于各个项目是透明的，如果遇到升级之类的都是自己中间件那里搞就行了。&lt;/p>
&lt;p>通常来说，这两个方案其实都可以选用，但是我个人建议中小型公司选用sharding-jdbc，client层方案轻便，而且维护成本低，不需要额外增派人手，而且中小型公司系统复杂度会低一些，项目也没那么多；&lt;/p>
&lt;p>但是中大型公司最好还是选用mycat这类proxy层方案，因为可能大公司系统和项目非常多，团队很大，人员充足，那么最好是专门弄个人来研究和维护mycat，然后大量项目直接透明使用即可。&lt;/p>
&lt;h2 id="如何进行水平或者垂直拆分">如何进行水平或者垂直拆分？&lt;/h2>
&lt;p>水平拆分是将表中数据分散到其它库的其他表中，表结构是一样的但是表数据不一样&lt;/p>
&lt;p>水平拆分的意义，就是将数据均匀放更多的库里，然后用多个库来抗更高的并发，还有就是用多个库的存储容量来进行扩容。&lt;/p>
&lt;p>垂直拆分是把表中字段进行拆分。每个库表的结构都不一样，每个库表都包含部分字段。一般来说，会将较少的访问频率很高的字段放到一个表里去，然后将较多的访问频率很低的字段放到另外一个表里去。因为数据库是有缓存的，你访问频率高的行字段越少，就可以在缓存里缓存更多的行，性能就越好。这个一般在表层面做的较多一些。&lt;/p>
&lt;p>两种分库分表的方式，一种是按照range来分，就是每个库一段连续的数据，这个一般是按比如时间范围来的，但是这种一般较少用，因为很容易产生热点问题，大量的流量都打在最新的数据上了；或者是按照某个字段hash一下均匀分散，这个较为常用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>range来分，好处在于说，后面扩容的时候，就很容易，因为你只要预备好，给每个月都准备一个库就可以了，到了一个新的月份的时候，自然而然，就会写新的库了；缺点，但是大部分的请求，都是访问最新的数据。实际生产用range，要看场景，你的用户不是仅仅访问最新的数据，而是均匀的访问现在的数据以及历史的数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>hash分法，好处在于说，可以平均分配没给库的数据量和请求压力；坏处在于说扩容起来比较麻烦，会有一个数据迁移的这么一个过程&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a2.png" alt="水平垂直拆分">&lt;/p>
&lt;h2 id="现在有一个未分库分表的系统未来要分库分表如何设计才可以让系统从未分库分表动态切换到分库分表上">现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？&lt;/h2>
&lt;ol>
&lt;li>停机迁移方案&lt;/li>
&lt;li>双写迁移方案&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a3.png" alt="停机迁移方案">&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a4.png" alt="双写迁移方案">&lt;/p>
&lt;h2 id="如何设计可以动态扩容缩容的分库分表方案">如何设计可以动态扩容缩容的分库分表方案？&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>停机扩容&lt;/p>
&lt;p>与停机迁移方案差不多，但是数据量太大不推荐&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优化&lt;/p>
&lt;p>一开始上来就是32个库，每个库32个表，1024张表&lt;/p>
&lt;p>我可以告诉各位同学说，这个分法，第一，基本上国内的互联网肯定都是够用了，第二，无论是并发支撑还是数据量支撑都没问题&lt;/p>
&lt;p>每个库正常承载的写入并发量是1000，那么32个库就可以承载32 * 1000 = 32000的写并发，如果每个库承载1500的写并发，32 * 1500 = 48000的写并发，接近5万/s的写入并发，前面再加一个MQ，削峰，每秒写入MQ 8万条数据，每秒消费5万条数据。&lt;/p>
&lt;p>有些除非是国内排名非常靠前的这些公司，他们的最核心的系统的数据库，可能会出现几百台数据库的这么一个规模，128个库，256个库，512个库&lt;/p>
&lt;p>1024张表，假设每个表放500万数据，在MySQL里可以放50亿条数据&lt;/p>
&lt;p>每秒的5万写并发，总共50亿条数据，对于国内大部分的互联网公司来说，其实一般来说都够了&lt;/p>
&lt;p>谈分库分表的扩容，第一次分库分表，就一次性给他分个够，32个库，1024张表，可能对大部分的中小型互联网公司来说，已经可以支撑好几年了&lt;/p>
&lt;p>一个实践是利用32 * 32来分库分表，即分为32个库，每个库里一个表分为32张表。一共就是1024张表。根据某个id先根据32取模路由到库，再根据32取模路由到库里的表。&lt;/p>
&lt;p>刚开始的时候，这个库可能就是逻辑库，建在一个数据库上的，就是一个mysql服务器可能建了n个库，比如16个库。后面如果要拆分，就是不断在库和mysql服务器之间做迁移就可以了。然后系统配合改一下配置即可。&lt;/p>
&lt;p>比如说最多可以扩展到32个数据库服务器，每个数据库服务器是一个库。如果还是不够？最多可以扩展到1024个数据库服务器，每个数据库服务器上面一个库一个表。因为最多是1024个表么。&lt;/p>
&lt;p>这么搞，是不用自己写代码做数据迁移的，都交给dba来搞好了，但是dba确实是需要做一些库表迁移的工作，但是总比你自己写代码，抽数据导数据来的效率高得多了。&lt;/p>
&lt;p>哪怕是要减少库的数量，也很简单，其实说白了就是按倍数缩容就可以了，然后修改一下路由规则。&lt;/p>
&lt;p>对2 ^ n取模&lt;/p>
&lt;p>orderId 模 32 = 库&lt;/p>
&lt;p>orderId / 32 模 32 = 表&lt;/p>
&lt;p>259 3 8&lt;/p>
&lt;p>1189 5 5&lt;/p>
&lt;p>352 0 11&lt;/p>
&lt;p>4593 17 15&lt;/p>
&lt;p>1、设定好几台数据库服务器，每台服务器上几个库，每个库多少个表，推荐是32库 * 32表，对于大部分公司来说，可能几年都够了&lt;/p>
&lt;p>2、路由的规则，orderId 模 32 = 库，orderId / 32 模 32 = 表&lt;/p>
&lt;p>3、扩容的时候，申请增加更多的数据库服务器，装好mysql，倍数扩容，4台服务器，扩到8台服务器，16台服务器&lt;/p>
&lt;p>4、由dba负责将原先数据库服务器的库，迁移到新的数据库服务器上去，很多工具，库迁移，比较便捷&lt;/p>
&lt;p>5、我们这边就是修改一下配置，调整迁移的库所在数据库服务器的地址&lt;/p>
&lt;p>6、重新发布系统，上线，原先的路由规则变都不用变，直接可以基于2倍的数据库服务器的资源，继续进行线上系统的提供服务&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a5.png" alt="动态扩容">&lt;/p>
&lt;h2 id="分库分表之后id主键如何处理">分库分表之后，id主键如何处理？&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>数据库自增ID&lt;/p>
&lt;p>这个就是说你的系统里每次得到一个id，都是往一个库的一个表里插入一条没什么业务含义的数据，然后获取一个数据库自增的一个id。拿到这个id之后再往对应的分库分表里去写入。&lt;/p>
&lt;p>这个方案的好处就是方便简单，谁都会用；缺点就是单库生成自增id，要是高并发的话，就会有瓶颈的；如果你硬是要改进一下，那么就专门开一个服务出来，这个服务每次就拿到当前id最大值，然后自己递增几个id，一次性返回一批id，然后再把当前最大id值修改成递增几个id之后的一个值；但是无论怎么说都是基于单个数据库。&lt;/p>
&lt;p>适合的场景：你分库分表就俩原因，要不就是单库并发太高，要不就是单库数据量太大；除非是你并发不高，但是数据量太大导致的分库分表扩容，你可以用这个方案，因为可能每秒最高并发最多就几百，那么就走单独的一个库和表生成自增主键即可。&lt;/p>
&lt;p>并发很低，几百/s，但是数据量大，几十亿的数据，所以需要靠分库分表来存放海量的数据&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a6.png" alt="数据库自增ID">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>UUID&lt;/p>
&lt;p>好处就是本地生成，不要基于数据库来了；不好之处就是，uuid太长了，作为主键性能太差了，不适合用于主键。&lt;/p>
&lt;p>适合的场景：如果你是要随机生成个什么文件名了，编号之类的，你可以用uuid，但是作为主键是不能的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取系统当前时间&lt;/p>
&lt;p>这个就是获取当前时间即可，但是问题是，并发很高的时候，比如一秒并发几千，会有重复的情况，这个是肯定不合适的。基本就不用考虑了。&lt;/p>
&lt;p>适合的场景：一般如果用这个方案，是将当前时间跟很多其他的业务字段拼接起来，作为一个id，如果业务上你觉得可以接受，那么也是可以的。你可以将别的业务字段值跟当前时间拼接起来，组成一个全局唯一的编号，订单编号，时间戳 + 用户id + 业务含义编码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>snowflake算法&lt;/p>
&lt;p>twitter开源的分布式id生成算法，就是把一个64位的long型的id，1个bit是不用的，用其中的41 bit作为毫秒数，用10 bit作为工作机器id，12 bit作为序列号&lt;/p>
&lt;p>1 bit：不用，为啥呢？因为二进制里第一个bit为如果是1，那么都是负数，但是我们生成的id都是正数，所以第一个bit统一都是0&lt;/p>
&lt;p>41 bit：表示的是时间戳，单位是毫秒。41 bit可以表示的数字多达2^41 - 1，也就是可以标识2 ^ 41 - 1个毫秒值，换算成年就是表示69年的时间。&lt;/p>
&lt;p>10 bit：记录工作机器id，代表的是这个服务最多可以部署在2^10台机器上哪，也就是1024台机器。但是10 bit里5个bit代表机房id，5个bit代表机器id。意思就是最多代表2 ^ 5个机房（32个机房），每个机房里可以代表2 ^ 5个机器（32台机器）。&lt;/p>
&lt;p>12 bit：这个是用来记录同一个毫秒内产生的不同id，12 bit可以代表的最大正整数是2 ^ 12 - 1 = 4096，也就是说可以用这个12bit代表的数字来区分同一个毫秒内的4096个不同的id&lt;/p>
&lt;p>64位的long型的id，64位的long -&amp;gt; 二进制&lt;/p>
&lt;p>0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000000&lt;/p>
&lt;p>2018-01-01 10:00:00 -&amp;gt; 做了一些计算，再换算成一个二进制，41bit来放 -&amp;gt; 0001100 10100010 10111110 10001001 01011100 00&lt;/p>
&lt;p>机房id，17 -&amp;gt; 换算成一个二进制 -&amp;gt; 10001&lt;/p>
&lt;p>机器id，25 -&amp;gt; 换算成一个二进制 -&amp;gt; 11001&lt;/p>
&lt;p>snowflake算法服务，会判断一下，当前这个请求是否是，机房17的机器25，在2175/11/7 12:12:14时间点发送过来的第一个请求，如果是第一个请求&lt;/p>
&lt;p>假设，在2175/11/7 12:12:14时间里，机房17的机器25，发送了第二条消息，snowflake算法服务，会发现说机房17的机器25，在2175/11/7 12:12:14时间里，在这一毫秒，之前已经生成过一个id了，此时如果你同一个机房，同一个机器，在同一个毫秒内，再次要求生成一个id，此时我只能把加1&lt;/p>
&lt;p>0 | 0001100 10100010 10111110 10001001 01011100 00 | 10001 | 1 1001 | 0000 00000001&lt;/p>
&lt;p>比如我们来观察上面的那个，就是一个典型的二进制的64位的id，换算成10进制就是910499571847892992&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a7.png" alt="snowflake算法">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="为什么要做读写分离">为什么要做读写分离？&lt;/h2>
&lt;p>承载更高的并发量&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a8.png" alt="为什么要做读写分离">&lt;/p>
&lt;h2 id="如何实现mysql的读写分离原理">如何实现mysql的读写分离，原理？&lt;/h2>
&lt;p>基于主从复制架构，简单来说，就搞一个主库，挂多个从库，然后我们就单单只是写主库，然后主库会自动把数据给同步到从库上去&lt;/p>
&lt;p>主库将变更写binlog日志，然后从库连接到主库之后，从库有一个IO线程，将主库的binlog日志拷贝到自己本地，写入一个中继日志中。接着从库中有一个SQL线程会从中继日志读取binlog，然后执行binlog日志中的内容，也就是在自己本地再次执行一遍SQL，这样就可以保证自己跟主库的数据是一样的。&lt;/p>
&lt;p>这里有一个非常重要的一点，就是从库同步主库数据的过程是串行化的，也就是说主库上并行的操作，在从库上会串行执行。所以这就是一个非常重要的点了，由于从库从主库拷贝日志以及串行执行SQL的特点，在高并发场景下，从库的数据一定会比主库慢一些，是有延时的。所以经常出现，刚写入主库的数据可能是读不到的，要过几十毫秒，甚至几百毫秒才能读取到。&lt;/p>
&lt;p>而且这里还有另外一个问题，就是如果主库突然宕机，然后恰好数据还没同步到从库，那么有些数据可能在从库上是没有的，有些数据可能就丢失了。&lt;/p>
&lt;p>所以mysql实际上在这一块有两个机制，一个是半同步复制，用来解决主库数据丢失问题；一个是并行复制，用来解决主从同步延时问题。&lt;/p>
&lt;p>这个所谓半同步复制，semi-sync复制，指的就是主库写入binlog日志之后，就会将强制此时立即将数据同步到从库，从库将日志写入自己本地的relay log之后，接着会返回一个ack给主库，主库接收到至少一个从库的ack之后才会认为写操作完成了。&lt;/p>
&lt;p>所谓并行复制，指的是从库开启多个线程，并行读取relay log中不同库的日志，然后并行重放不同库的日志，这是库级别的并行。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a9.png" alt="原理">&lt;/p>
&lt;h2 id="mysql主从同步延时问题">mysql主从同步延时问题&lt;/h2>
&lt;p>1、分库，将一个主库拆分为4个主库，每个主库的写并发就500/s，此时主从延迟可以忽略不计&lt;/p>
&lt;p>2、打开mysql支持的并行复制，多个库并行复制，如果说某个库的写入并发就是特别高，单库写并发达到了2000/s，并行复制还是没意义。28法则，很多时候比如说，就是少数的几个订单表，写入了2000/s，其他几十个表10/s。&lt;/p>
&lt;p>3、重写代码，写代码的同学，要慎重，当时我们其实短期是让那个同学重写了一下代码，插入数据之后，直接就更新，不要查询&lt;/p>
&lt;p>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询设置直连主库。不推荐这种方法，你这么搞导致读写分离的意义就丧失了&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-31-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%8E%9F%E7%90%86%E5%8F%8A%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/a10.png" alt="mysql主从同步延时问题">&lt;/p></description></item><item><title>分布式搜索引擎Elasticsearch面试题及一些概念</title><link>https://blog.itning.top/post/2019/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8Eelasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 25 Mar 2019 16:57:13 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8Eelasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</guid><description>&lt;h2 id="elasticsearch一些基本概念">Elasticsearch一些基本概念&lt;/h2>
&lt;h3 id="索引index">索引(index)&lt;/h3>
&lt;p>类似于关系数据库中的一张表&lt;/p>
&lt;p>但是和表有本质区别&lt;/p>
&lt;h3 id="类型type">类型(type)&lt;/h3>
&lt;p>类别，例如订单的类别。在具体一些：支付订单分为实体商品和虚拟商品。那么，我们就可以创建两种类别（类型）&lt;/p>
&lt;h3 id="映射mapping">映射(mapping)&lt;/h3>
&lt;p>相当于表结构&lt;/p>
&lt;h3 id="文档document">文档(document)&lt;/h3>
&lt;p>相当于表中的一行数据&lt;/p>
&lt;h3 id="碎片shards">碎片(shards)&lt;/h3>
&lt;p>代表索引分片，es可以把一个完整的索引分成多个分片，这样的好处是可以把一个大的索引拆分成多个，分布到不同的节点上。构成分布式搜索。分片的数量只能在索引创建前指定，并且索引创建后不能更改。&lt;/p>
&lt;h2 id="es如何实现分布式">ES如何实现分布式？&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-25-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8EElasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/a1.png" alt="分布式图解">&lt;/p>
&lt;p>ES集群多个节点会选举一个节点为master节点。&lt;/p>
&lt;p>master节点做一些管理工作，例如维护&lt;strong>索引元数据&lt;/strong>，负责切换primary shard和replica shard身份。&lt;/p>
&lt;p>如果master节点宕机，会选举产生新的master节点。&lt;/p>
&lt;p>新产生的master将宕机的节点的数据转移到其它机器上。&lt;/p>
&lt;h2 id="es写入读取数据的原理">ES写入/读取数据的原理？&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-25-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8EElasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/a2.png" alt="ES写入/读取数据的原理图解">&lt;/p>
&lt;h3 id="写入">写入&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实际的node上的primary shard处理请求，然后将数据同步到replica node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="读取">读取&lt;/h3>
&lt;p>查询，GET某一条数据，写入了某个document，这个document会自动给你分配一个全局唯一的id，doc id，同时也是根据doc id进行hash路由到对应的primary shard上面去。也可以手动指定doc id，比如用订单id，用户id。&lt;/p>
&lt;p>你可以通过doc id来查询，会根据doc id进行hash，判断出来当时把doc id分配到了哪个shard上面去，从那个shard去查询&lt;/p>
&lt;ol>
&lt;li>
&lt;p>客户端发送请求到任意一个node，成为coordinate node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接收请求的node返回document给coordinate node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>coordinate node返回document给客户端&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="搜索数据过程">搜索数据过程&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>客户端发送请求到一个coordinate node&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协调节点将搜索请求转发到所有的shard对应的primary shard或replica shard也可以&lt;/p>
&lt;/li>
&lt;li>
&lt;p>query phase：每个shard将自己的搜索结果（其实就是一些doc id），返回给协调节点，由协调节点进行数据的合并、排序、分页等操作，产出最终结果&lt;/p>
&lt;/li>
&lt;li>
&lt;p>fetch phase：接着由协调节点，根据doc id去各个节点上拉取实际的document数据，最终返回给客户端&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="写数据底层原理">写数据底层原理&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>先写入buffer，在buffer里的时候数据是搜索不到的；同时将数据写入translog日志文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果buffer快满了，或者到一定时间，就会将buffer数据refresh到一个新的segment file中，但是此时数据不是直接进入segment file的磁盘文件的，而是先进入os cache的。这个过程就是refresh。&lt;/p>
&lt;p>每隔1秒钟，es将buffer中的数据写入一个新的segment file，每秒钟会产生一个新的磁盘文件，segment file，这个segment file中就存储最近1秒内buffer中写入的数据&lt;/p>
&lt;p>但是如果buffer里面此时没有数据，那当然不会执行refresh操作咯，每秒创建换一个空的segment file，如果buffer里面有数据，默认1秒钟执行一次refresh操作，刷入一个新的segment file中&lt;/p>
&lt;p>操作系统里面，磁盘文件其实都有一个东西，叫做os cache，操作系统缓存，就是说数据写入磁盘文件之前，会先进入os cache，先进入操作系统级别的一个内存缓存中去&lt;/p>
&lt;p>只要buffer中的数据被refresh操作，刷入os cache中，就代表这个数据就可以被搜索到了&lt;/p>
&lt;p>**为什么叫es是准实时的？**NRT，near real-time，准实时。默认是每隔1秒refresh一次的，所以es是准实时的，因为写入的数据1秒之后才能被看到。&lt;/p>
&lt;p>可以通过es的restful api或者java api，手动执行一次refresh操作，就是手动将buffer中的数据刷入os cache中，让数据立马就可以被搜索到。&lt;/p>
&lt;p>只要数据被输入os cache中，buffer就会被清空了，因为不需要保留buffer了，数据在translog里面已经持久化到磁盘去一份了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>只要数据进入os cache，此时就可以让这个segment file的数据对外提供搜索了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重复1~3步骤，新的数据不断进入buffer和translog，不断将buffer数据写入一个又一个新的segment file中去，每次refresh完buffer清空，translog保留。随着这个过程推进，translog会变得越来越大。当translog达到一定长度的时候，就会触发commit操作。&lt;/p>
&lt;p>buffer中的数据，倒是好，每隔1秒就被刷到os cache中去，然后这个buffer就被清空了。所以说这个buffer的数据始终是可以保持住不会填满es进程的内存的。&lt;/p>
&lt;p>每次一条数据写入buffer，同时会写入一条日志到translog日志文件中去，所以这个translog日志文件是不断变大的，当translog日志文件大到一定程度的时候，就会执行commit操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>commit操作发生第一步，就是将buffer中现有数据refresh到os cache中去，清空buffer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将一个commit point写入磁盘文件，里面标识着这个commit point对应的所有segment file&lt;/p>
&lt;/li>
&lt;li>
&lt;p>强行将os cache中目前所有的数据都fsync到磁盘文件中去&lt;/p>
&lt;p>**translog日志文件的作用是什么？**就是在你执行commit操作之前，数据要么是停留在buffer中，要么是停留在os cache中，无论是buffer还是os cache都是内存，一旦这台机器死了，内存中的数据就全丢了。&lt;/p>
&lt;p>所以需要将数据对应的操作写入一个专门的日志文件，translog日志文件中，一旦此时机器宕机，再次重启的时候，es会自动读取translog日志文件中的数据，恢复到内存buffer和os cache中去。&lt;/p>
&lt;p>commit操作：1、写commit point；2、将os cache数据fsync强刷到磁盘上去；3、清空translog日志文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将现有的translog清空，然后再次重启启用一个translog，此时commit操作完成。默认每隔30分钟会自动执行一次commit，但是如果translog过大，也会触发commit。整个commit的过程，叫做flush操作。我们可以手动执行flush操作，就是将所有os cache数据刷到磁盘文件中去。&lt;/p>
&lt;p>不叫做commit操作，flush操作。es中的flush操作，就对应着commit的全过程。我们也可以通过es api，手动执行flush操作，手动将os cache中的数据fsync强刷到磁盘上去，记录一个commit point，清空translog日志文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>translog其实也是先写入os cache的，默认每隔5秒刷一次到磁盘中去，所以默认情况下，可能有5秒的数据会仅仅停留在buffer或者translog文件的os cache中，如果此时机器挂了，会丢失5秒钟的数据。但是这样性能比较好，最多丢5秒的数据。也可以将translog设置成每次写操作必须是直接fsync到磁盘，但是性能会差很多。&lt;/p>
&lt;p>实际上你在这里，如果面试官没有问你es丢数据的问题，你可以在这里给面试官炫一把，你说，其实es第一是准实时的，数据写入1秒后可以搜索到；可能会丢失数据的，你的数据有5秒的数据，停留在buffer、translog os cache、segment file os cache中，有5秒的数据不在磁盘上，此时如果宕机，会导致5秒的数据丢失。&lt;/p>
&lt;p>如果你希望一定不能丢失数据的话，你可以设置个参数，官方文档，百度一下。每次写入一条数据，都是写入buffer，同时写入磁盘上的translog，但是这会导致写性能、写入吞吐量会下降一个数量级。本来一秒钟可以写2000条，现在你一秒钟只能写200条，都有可能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是删除操作，commit的时候会生成一个.del文件，里面将某个doc标识为deleted状态，那么搜索的时候根据.del文件就知道这个doc被删除了&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果是更新操作，就是将原来的doc标识为deleted状态，然后新写入一条数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>buffer每次refresh一次，就会产生一个segment file，所以默认情况下是1秒钟一个segment file，segment file会越来越多，此时会定期执行merge&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每次merge的时候，会将多个segment file合并成一个，同时这里会将标识为deleted的doc给物理删除掉，然后将新的segment file写入磁盘，这里会写一个commit point，标识所有新的segment file，然后打开segment file供搜索使用，同时删除旧的segment file。&lt;/p>
&lt;p>es里的写流程，有4个底层的核心概念，refresh、flush、translog、merge&lt;/p>
&lt;p>当segment file多到一定程度的时候，es就会自动触发merge操作，将多个segment file给merge成一个segment file。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="es在数据量很大的情况下数十亿级别如何提高查询效率">ES在数据量很大的情况下（数十亿级别）如何提高查询效率？&lt;/h2>
&lt;h3 id="面试题">面试题&lt;/h3>
&lt;p>es 在数据量很大的情况下（数十亿级别）如何提高查询效率啊？&lt;/p>
&lt;h3 id="面试官心理分析">面试官心理分析&lt;/h3>
&lt;p>这个问题是肯定要问的，说白了，就是看你有没有实际干过 es，因为啥？其实 es 性能并没有你想象中那么好的。很多时候数据量大了，特别是有几亿条数据的时候，可能你会懵逼的发现，跑个搜索怎么一下 &lt;code>5~10s&lt;/code>，坑爹了。第一次搜索的时候，是 &lt;code>5~10s&lt;/code>，后面反而就快了，可能就几百毫秒。&lt;/p>
&lt;p>你就很懵，每个用户第一次访问都会比较慢，比较卡么？所以你要是没玩儿过 es，或者就是自己玩玩儿 demo，被问到这个问题容易懵逼，显示出你对 es 确实玩儿的不怎么样？&lt;/p>
&lt;h3 id="面试题剖析">面试题剖析&lt;/h3>
&lt;p>说实话，es 性能优化是没有什么银弹的，啥意思呢？就是&lt;strong>不要期待着随手调一个参数，就可以万能的应对所有的性能慢的场景&lt;/strong>。也许有的场景是你换个参数，或者调整一下语法，就可以搞定，但是绝对不是所有场景都可以这样。&lt;/p>
&lt;h4 id="性能优化的杀手锏filesystem-cache">性能优化的杀手锏——filesystem cache&lt;/h4>
&lt;p>你往es里写的数据，实际上都写到磁盘文件里去了，查询的时候，操作系统会将磁盘文件里的数据自动缓存到 &lt;code>filesystem cache&lt;/code> 里面去。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-25-%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8EElasticsearch%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/a3.png" alt="提高查询效率图解">&lt;/p>
&lt;p>es 的搜索引擎严重依赖于底层的 &lt;code>filesystem cache&lt;/code>，你如果给 &lt;code>filesystem cache&lt;/code> 更多的内存，尽量让内存可以容纳所有的 &lt;code>idx segment file&lt;/code> 索引数据文件，那么你搜索的时候就基本都是走内存的，性能会非常高。&lt;/p>
&lt;p>性能差距究竟可以有多大？我们之前很多的测试和压测，如果走磁盘一般肯定上秒，搜索性能绝对是秒级别的，1秒、5秒、10秒。但如果是走 &lt;code>filesystem cache&lt;/code>，是走纯内存的，那么一般来说性能比走磁盘要高一个数量级，基本上就是毫秒级的，从几毫秒到几百毫秒不等。&lt;/p>
&lt;p>这里有个真实的案例。某个公司 es 节点有 3 台机器，每台机器看起来内存很多，64G，总内存就是 &lt;code>64 * 3 = 192G&lt;/code>。每台机器给 es jvm heap 是 &lt;code>32G&lt;/code>，那么剩下来留给 &lt;code>filesystem cache&lt;/code> 的就是每台机器才 &lt;code>32G&lt;/code>，总共集群里给 &lt;code>filesystem cache&lt;/code> 的就是 &lt;code>32 * 3 = 96G&lt;/code> 内存。而此时，整个磁盘上索引数据文件，在 3 台机器上一共占用了 &lt;code>1T&lt;/code> 的磁盘容量，es 数据量是 &lt;code>1T&lt;/code>，那么每台机器的数据量是 &lt;code>300G&lt;/code>。这样性能好吗？ &lt;code>filesystem cache&lt;/code> 的内存才 100G，十分之一的数据可以放内存，其他的都在磁盘，然后你执行搜索操作，大部分操作都是走磁盘，性能肯定差。&lt;/p>
&lt;p>归根结底，你要让 es 性能要好，最佳的情况下，就是你的机器的内存，至少可以容纳你的总数据量的一半。&lt;/p>
&lt;p>根据我们自己的生产环境实践经验，最佳的情况下，是仅仅在 es 中就存少量的数据，就是你要&lt;strong>用来搜索的那些索引&lt;/strong>，如果内存留给 &lt;code>filesystem cache&lt;/code> 的是 100G，那么你就将索引数据控制在 &lt;code>100G&lt;/code> 以内，这样的话，你的数据几乎全部走内存来搜索，性能非常之高，一般可以在 1 秒以内。&lt;/p>
&lt;p>比如说你现在有一行数据。&lt;code>id,name,age ....&lt;/code> 30 个字段。但是你现在搜索，只需要根据 &lt;code>id,name,age&lt;/code> 三个字段来搜索。如果你傻乎乎往 es 里写入一行数据所有的字段，就会导致说 &lt;code>90%&lt;/code> 的数据是不用来搜索的，结果硬是占据了 es 机器上的 &lt;code>filesystem cache&lt;/code> 的空间，单条数据的数据量越大，就会导致 &lt;code>filesystem cahce&lt;/code> 能缓存的数据就越少。其实，仅仅写入 es 中要用来检索的&lt;strong>少数几个字段&lt;/strong>就可以了，比如说就写入es &lt;code>id,name,age&lt;/code> 三个字段，然后你可以把其他的字段数据存在 mysql/hbase 里，我们一般是建议用 &lt;code>es + hbase&lt;/code> 这么一个架构。&lt;/p>
&lt;p>hbase 的特点是&lt;strong>适用于海量数据的在线存储&lt;/strong>，就是对 hbase 可以写入海量数据，但是不要做复杂的搜索，做很简单的一些根据 id 或者范围进行查询的这么一个操作就可以了。从 es 中根据 name 和 age 去搜索，拿到的结果可能就 20 个 &lt;code>doc id&lt;/code>，然后根据 &lt;code>doc id&lt;/code> 到 hbase 里去查询每个 &lt;code>doc id&lt;/code> 对应的&lt;strong>完整的数据&lt;/strong>，给查出来，再返回给前端。&lt;/p>
&lt;p>写入 es 的数据最好小于等于，或者是略微大于 es 的 filesystem cache 的内存容量。然后你从 es 检索可能就花费 20ms，然后再根据 es 返回的 id 去 hbase 里查询，查 20 条数据，可能也就耗费个 30ms，可能你原来那么玩儿，1T 数据都放es，会每次查询都是 5~10秒，现在可能性能就会很高，每次查询就是 50ms。&lt;/p>
&lt;h4 id="数据预热">数据预热&lt;/h4>
&lt;p>假如说，哪怕是你就按照上述的方案去做了，es 集群中每个机器写入的数据量还是超过了 &lt;code>filesystem cache&lt;/code> 一倍，比如说你写入一台机器 60G 数据，结果 &lt;code>filesystem cache&lt;/code> 就 30G，还是有 30G 数据留在了磁盘上。&lt;/p>
&lt;p>其实可以做&lt;strong>数据预热&lt;/strong>。&lt;/p>
&lt;p>举个例子，拿微博来说，你可以把一些大V，平时看的人很多的数据，你自己提前后台搞个系统，每隔一会儿，自己的后台系统去搜索一下热数据，刷到 &lt;code>filesystem cache&lt;/code> 里去，后面用户实际上来看这个热数据的时候，他们就是直接从内存里搜索了，很快。&lt;/p>
&lt;p>或者是电商，你可以将平时查看最多的一些商品，比如说 iphone 8，热数据提前后台搞个程序，每隔 1 分钟自己主动访问一次，刷到 &lt;code>filesystem cache&lt;/code> 里去。&lt;/p>
&lt;p>对于那些你觉得比较热的，经常会有人访问的数据，最好&lt;strong>做一个专门的缓存预热子系统&lt;/strong>，就是对热数据每隔一段时间，就提前访问一下，让数据进入 &lt;code>filesystem cache&lt;/code> 里面去。这样下次别人访问的时候，一定性能会好一些。&lt;/p>
&lt;h4 id="冷热分离">冷热分离&lt;/h4>
&lt;p>es 可以做类似于 mysql 的水平拆分，就是说将大量的访问很少、频率很低的数据，单独写一个索引，然后将访问很频繁的热数据单独写一个索引。最好是将&lt;strong>冷数据写入一个索引中，然后热数据写入另外一个索引中&lt;/strong>，这样可以确保热数据在被预热之后，尽量都让他们留在 &lt;code>filesystem os cache&lt;/code> 里，&lt;strong>别让冷数据给冲刷掉&lt;/strong>。&lt;/p>
&lt;p>你看，假设你有 6 台机器，2 个索引，一个放冷数据，一个放热数据，每个索引 3 个shard。3 台机器放热数据 index；另外 3 台机器放冷数据 index。然后这样的话，你大量的时候是在访问热数据 index，热数据可能就占总数据量的 10%，此时数据量很少，几乎全都保留在 &lt;code>filesystem cache&lt;/code> 里面了，就可以确保热数据的访问性能是很高的。但是对于冷数据而言，是在别的 index 里的，跟热数据 index 不在相同的机器上，大家互相之间都没什么联系了。如果有人访问冷数据，可能大量数据是在磁盘上的，此时性能差点，就 10% 的人去访问冷数据，90% 的人在访问热数据，也无所谓了。&lt;/p>
&lt;h4 id="document-模型设计">document 模型设计&lt;/h4>
&lt;p>对于 MySQL，我们经常有一些复杂的关联查询。在 es 里该怎么玩儿，es 里面的复杂的关联查询尽量别用，一旦用了性能一般都不太好。&lt;/p>
&lt;p>最好是先在 Java 系统里就完成关联，将关联好的数据直接写入 es 中。搜索的时候，就不需要利用 es 的搜索语法来完成 join 之类的关联搜索了。&lt;/p>
&lt;p>document 模型设计是非常重要的，很多操作，不要在搜索的时候才想去执行各种复杂的乱七八糟的操作。es 能支持的操作就是那么多，不要考虑用 es 做一些它不好操作的事情。如果真的有那种操作，尽量在 document 模型设计的时候，写入的时候就完成。另外对于一些太复杂的操作，比如 join/nested/parent-child 搜索都要尽量避免，性能都很差的。&lt;/p>
&lt;h4 id="分页性能优化">分页性能优化&lt;/h4>
&lt;p>es 的分页是较坑的，为啥呢？举个例子吧，假如你每页是 10 条数据，你现在要查询第 100 页，实际上是会把每个 shard 上存储的前 &lt;code>1000&lt;/code> 条数据都查到一个协调节点上，如果你有个 5 个shard，那么就有 5000 条数据，接着协调节点对这 5000 条数据进行一些合并、处理，再获取到最终第 100 页的 10 条数据。&lt;/p>
&lt;p>分布式的，你要查第100页的10条数据，不可能说从5个 shard，每个 shard 就查 2 条数据？最后到协调节点合并成 10 条数据？你必须得从每个 shard 都查 1000 条数据过来，然后根据你的需求进行排序、筛选等等操作，最后再次分页，拿到里面第 100 页的数据。你翻页的时候，翻的越深，每个 shard 返回的数据就越多，而且协调节点处理的时间越长。非常坑爹。所以用 es 做分页的时候，你会发现越翻到后面，就越是慢。&lt;/p>
&lt;p>我们之前也是遇到过这个问题，用 es 作分页，前几页就几十毫秒，翻到 10 页 or 几十页的时候，基本上就要 5~10秒 才能查出来一页数据了。&lt;/p>
&lt;p>有什么解决方案吗？&lt;/p>
&lt;h5 id="不允许深度分页默认深度分页性能很惨">不允许深度分页/默认深度分页性能很惨&lt;/h5>
&lt;p>你系统不允许翻那么深的页，跟产品经理说，默认翻的越深，性能就越差。&lt;/p>
&lt;h5 id="类似于-app-里的推荐商品不断下拉出来一页一页的">类似于 app 里的推荐商品不断下拉出来一页一页的&lt;/h5>
&lt;p>类似于微博中，下拉刷微博，刷出来一页一页的，你可以用 &lt;code>scroll api&lt;/code>，关于如何使用，自行上网搜索。&lt;/p>
&lt;p>scroll 会一次性给你生成&lt;strong>所有数据的一个快照&lt;/strong>，然后每次翻页就是通过&lt;strong>游标移动&lt;/strong>，获取下一页下一页这样子，性能会比上面说的那种分页性能也高很多很多，基本上都是毫秒级的。&lt;/p>
&lt;p>但是 唯一的一点就是，这个适合于那种类似微博下拉翻页的，&lt;strong>不能随意跳到任何一页的场景&lt;/strong>。也就是说，你不能先进入第 10 页，然后去 120 页，然后又回到 58 页，不能随意乱跳页。所以现在很多产品，都是不允许你随意翻页的，app，也有一些网站，做的就是你只能往下拉，一页一页的翻。&lt;/p>
&lt;p>另外，这个 scroll 是要保留一段时间内的数据快照的，你需要确保用户不会持续不断翻页翻几个小时。&lt;/p></description></item><item><title>常用消息中间件扫盲及面试题</title><link>https://blog.itning.top/post/2019/03/22/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/</link><pubDate>Fri, 22 Mar 2019 19:42:50 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/22/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/</guid><description>&lt;p>写在前面：
这篇文章是看&lt;code>Java工程师面试突击第1季（可能是史上最好的Java面试突击课程）-中华石杉老师&lt;/code>视频的一个总结，文章中第三方图片均归原作者所有。&lt;/p>
&lt;h2 id="什么是消息队列">什么是消息队列？&lt;/h2>
&lt;blockquote>
&lt;p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。&lt;/p>
&lt;/blockquote>
&lt;p>简单来说，消息队列是用来收发消息的。这里边的消息并不是单纯的指字符消息，也可以是一些字节序列等等。&lt;/p>
&lt;h2 id="有哪些常用的消息队列">有哪些常用的消息队列？&lt;/h2>
&lt;ol>
&lt;li>Kafka&lt;/li>
&lt;li>ActiveMQ&lt;/li>
&lt;li>RabbitMQ&lt;/li>
&lt;li>RocketMQ&lt;/li>
&lt;/ol>
&lt;h2 id="消息队列的优缺点">消息队列的优缺点？&lt;/h2>
&lt;h3 id="优点">优点&lt;/h3>
&lt;h4 id="解耦">解耦&lt;/h4>
&lt;p>也就是说，减少了系统之间的耦合度。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/jieou.png" alt="解耦">&lt;/p>
&lt;h4 id="异步">异步&lt;/h4>
&lt;p>在数据库场景下 持久化请求异步的写入数据库中&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/yibu.png" alt="异步">&lt;/p>
&lt;h4 id="削峰">削峰&lt;/h4>
&lt;p>消息队列存储了系统无法一次性响应的请求&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/xiaofeng.png" alt="削峰">&lt;/p>
&lt;h3 id="缺点">缺点&lt;/h3>
&lt;ol>
&lt;li>系统可用性降低&lt;/li>
&lt;li>系统复杂性提高&lt;/li>
&lt;li>一致性问题&lt;/li>
&lt;/ol>
&lt;h2 id="消息队列如何保证高可用">消息队列如何保证高可用?&lt;/h2>
&lt;h3 id="rabbitmq的高可用性">RabbitMQ的高可用性&lt;/h3>
&lt;h4 id="普通集群模式">普通集群模式&lt;/h4>
&lt;p>每台机器上都会有元数据，但是只有一台机器上有你需要的数据，所以并不能保证其高可用。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/ptjqms.png" alt="普通集群模式">&lt;/p>
&lt;h4 id="镜像集群模式">镜像集群模式&lt;/h4>
&lt;p>这个架构解决了上一个普通集群模式的问题，但是消息大小会受到机器的限制。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/jxjqms.png" alt="镜像集群模式">&lt;/p>
&lt;h3 id="kafka的高可用性">Kafka的高可用性&lt;/h3>
&lt;p>Kafka是由多个broker组成的，每个broker是一个节点；&lt;/p>
&lt;p>你创建一个topic，这个topic可以划分为多个partition，&lt;/p>
&lt;p>每个partition可以存在于不同的broker上，每个partition就放一部分数据。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/kafkagaokeyong.png" alt="Kafka的高可用性">&lt;/p>
&lt;h2 id="消息队列如何确保不消费重复消息">消息队列如何确保不消费重复消息？&lt;/h2>
&lt;h3 id="幂等性">幂等性&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>幂等性&lt;/strong>原本是数学上的概念，即使公式：f(x)=f(f(x)) 能够成立的数学性质。用在编程领域，则意为&lt;code>对同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>也就是确保消息重复消费不会对业务产生影响&lt;/p>
&lt;h3 id="kafka保证">Kafka保证&lt;/h3>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/kafkachongfu.png" alt="Kafka保证不消费重复消息">&lt;/p>
&lt;h3 id="rabbitmq保证">RabbitMQ保证&lt;/h3>
&lt;p>RabbitMQ可以在每次消费数据时，将消息ID写入到集合中，这样每次新消息消费之前都在集合中找有没有这个数据，如果有就丢弃掉。&lt;/p>
&lt;h2 id="消息队列中的消息丢失怎么办">消息队列中的消息丢失怎么办？&lt;/h2>
&lt;h3 id="rabbitmq">RabbitMQ&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>生产者丢数据？&lt;/p>
&lt;p>生产者将数据发送到rabbitmq的时候，可能数据就在半路给搞丢了，想不丢两种机制：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务机制（阻塞）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Confirm模式（回调）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>RabbitMQ弄丢了数据？&lt;/p>
&lt;p>可以创建持久化操作。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>创建queue的时候将其设置为持久化的，这样就可以保证rabbitmq持久化queue的元数据，但是不会持久化queue里的数据&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个是发送消息的时候将消息的deliveryMode设置为2，就是将消息设置为持久化的，此时rabbitmq就会将消息持久化到磁盘上去。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>消费端弄丢了数据&lt;/p>
&lt;p>关闭rabbitmq自动ack&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/xiaoxidiushiribbitmq.png" alt="保证消息不丢失">&lt;/p>
&lt;h3 id="kafka">Kafka&lt;/h3>
&lt;p>设置一些参数避免丢数据问题：&lt;/p>
&lt;ul>
&lt;li>给这个topic设置replication.factor参数：这个值必须大于1，要求每个partition必须有至少2个副本&lt;/li>
&lt;li>在kafka服务端设置min.insync.replicas参数：这个值必须大于1，这个是要求一个leader至少感知到有至少一个follower还跟自己保持联系，没掉队，这样才能确保leader挂了还有一个follower&lt;/li>
&lt;li>在producer端设置acks=all：这个是要求每条数据，必须是写入所有replica之后，才能认为是写成功了&lt;/li>
&lt;li>在producer端设置retries=MAX（很大很大很大的一个值，无限次重试的意思）：这个是要求一旦写入失败，就无限重试，卡在这里了&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>
&lt;p>生产者丢数据？&lt;/p>
&lt;p>如果设置了acks=all 不会丢失&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kafka弄丢了数据？&lt;/p>
&lt;p>设置参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消费端弄丢了数据&lt;/p>
&lt;ul>
&lt;li>
&lt;p>关闭自动提交offset，在处理完之后自己手动提交offset，就可以保证数据不会丢&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保证幂等性&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/xiaoxidiushikafka.png" alt="保证消息不丢失">&lt;/p>
&lt;h2 id="如何保证消息队列中的消息的顺序">如何保证消息队列中的消息的顺序？&lt;/h2>
&lt;h3 id="rabbitmq-1">RabbitMQ&lt;/h3>
&lt;p>拆分多个queue，每个queue一个consumer，就是多一些queue而已，确实是麻烦点；或者就一个queue但是对应一个consumer，然后这个consumer内部用内存队列做排队，然后分发给底层不同的worker来处理&lt;/p>
&lt;h3 id="kafka-1">Kafka&lt;/h3>
&lt;p>一个topic，一个partition，一个consumer，内部单线程消费，写N个内存queue，然后N个线程分别消费一个内存queue即可&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/xiaoxishunxukafka.png" alt="保证消息顺序">&lt;/p>
&lt;h2 id="消息队列中的消息积压问题">消息队列中的消息积压问题？&lt;/h2>
&lt;p>一般来说，消费者炸了，消息才会积压。所以第一步应该修复消费者问题。&lt;/p>
&lt;p>而且消息队列不要设置数据自动过期。&lt;/p>
&lt;p>修复完成后，多弄几个消费者进行消费&lt;/p>
&lt;h2 id="消息中间件对比">消息中间件对比？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>ActiveMQ&lt;/th>
&lt;th>RabbitMQ&lt;/th>
&lt;th>RocketMQ&lt;/th>
&lt;th>Kafka&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>单机吞吐量&lt;/td>
&lt;td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级&lt;/td>
&lt;td>万级，吞吐量比RocketMQ和Kafka要低了一个数量级&lt;/td>
&lt;td>10万级，RocketMQ也是可以支撑高吞吐的一种MQ&lt;/td>
&lt;td>10万级别，这是kafka最大的优点，就是吞吐量高。 一般配合大数据类的系统来进行实时数据计算、日志采集等场景&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>topic数量对吞吐量的影响&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降 这是RocketMQ的一大优势，在同等机器下，可以支撑大量的topic&lt;/td>
&lt;td>topic从几十个到几百个的时候，吞吐量会大幅度下降 所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>时效性&lt;/td>
&lt;td>ms级&lt;/td>
&lt;td>微秒级，这是rabbitmq的一大特点，延迟是最低的&lt;/td>
&lt;td>ms级&lt;/td>
&lt;td>延迟在ms级以内&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>可用性&lt;/td>
&lt;td>高，基于主从架构实现高可用性&lt;/td>
&lt;td>高，基于主从架构实现高可用性&lt;/td>
&lt;td>非常高，分布式架构&lt;/td>
&lt;td>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>消息可靠性&lt;/td>
&lt;td>有较低的概率丢失数据&lt;/td>
&lt;td>&lt;/td>
&lt;td>经过参数优化配置，可以做到0丢失&lt;/td>
&lt;td>经过参数优化配置，消息可以做到0丢失&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>功能支持&lt;/td>
&lt;td>MQ领域的功能极其完备&lt;/td>
&lt;td>基于erlang开发，所以并发能力很强，性能极其好，延时很低&lt;/td>
&lt;td>MQ功能较为完善，还是分布式的，扩展性好&lt;/td>
&lt;td>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用，是事实上的标准&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>优劣势总结&lt;/td>
&lt;td>非常成熟，功能强大，在业内大量的公司以及项目中都有应用 偶尔会有较低概率丢失消息 而且现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本 而且确实主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用&lt;/td>
&lt;td>erlang语言开发，性能极其好，延时很低； 吞吐量到万级，MQ功能比较完备 而且开源提供的管理界面非常棒，用起来很好用 社区相对比较活跃，几乎每个月都发布几个版本分 在国内一些互联网公司近几年用rabbitmq也比较多一些 但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。 而且erlang开发，国内有几个公司有实力做erlang源码级别的研究和定制？如果说你没这个实力的话，确实偶尔会有一些问题，你很难去看懂源码，你公司对这个东西的掌控很弱，基本职能依赖于开源社区的快速维护和修复bug。 而且rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。&lt;/td>
&lt;td>接口简单易用，而且毕竟在阿里大规模应用过，有阿里品牌保障 日处理消息上百亿之多，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景 而且一个很大的优势在于，阿里出品都是java系的，我们可以自己阅读源码，定制自己公司的MQ，可以掌控 社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码 还有就是阿里出台的技术，你得做好这个技术万一被抛弃，社区黄掉的风险，那如果你们公司有技术实力我觉得用RocketMQ挺好的&lt;/td>
&lt;td>kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展 同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量 而且kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略 这个特性天然适合大数据实时计算以及日志收集&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a href="https://juejin.im/post/5b32044ef265da59654c3027">消息中间件部署及比较：rabbitMQ、activeMQ、zeroMQ、rocketMQ、Kafka、redis&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-22-%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%AB%E7%9B%B2%E5%8F%8A%E9%9D%A2%E8%AF%95%E9%A2%98/duibi.png" alt="消息中间件对比">&lt;/p></description></item><item><title>SpringCloud组件用途实现原理及POM坐标</title><link>https://blog.itning.top/post/2019/03/19/springcloud%E7%BB%84%E4%BB%B6%E7%94%A8%E9%80%94%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8Apom%E5%9D%90%E6%A0%87/</link><pubDate>Tue, 19 Mar 2019 17:57:31 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/19/springcloud%E7%BB%84%E4%BB%B6%E7%94%A8%E9%80%94%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8Apom%E5%9D%90%E6%A0%87/</guid><description>&lt;h2 id="spring-cloud是什么">Spring Cloud是什么？&lt;/h2>
&lt;blockquote>
&lt;p>Spring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁定，领导选举，分布式会话，集群状态）&lt;/p>
&lt;p>&amp;mdash;&lt;a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Spring Cloud POM 例子&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;spring-cloud.version&amp;gt;&lt;/span>Greenwich.SR1&lt;span class="nt">&amp;lt;/spring-cloud.version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/properties&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencyManagement&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-dependencies&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>${spring-cloud.version}&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;type&amp;gt;&lt;/span>pom&lt;span class="nt">&amp;lt;/type&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>import&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependencyManagement&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>spring-milestones&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Spring Milestones&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;url&amp;gt;&lt;/span>https://repo.spring.io/milestone&lt;span class="nt">&amp;lt;/url&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>学习资源：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.ityouknow.com/spring-cloud">纯洁的微笑&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.didispace.com/categories/Spring-Cloud/">程序猿DD&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.csdn.net/liaokailin/article/category/6212338">liaokailin的专栏&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.itmuch.com/">周立 Spring Cloud&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.csdn.net/column/details/15197.html">方志朋 Spring Cloud 专栏&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://xujin.org/categories/%E8%B7%9F%E6%88%91%E5%AD%A6Spring-Cloud/">许进 跟我学Spring Cloud&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="spring-cloud-都有哪些常用组件">Spring Cloud 都有哪些常用组件？&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>组件名&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Eureka&lt;/td>
&lt;td>Eureka用于服务的注册与发现。Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。也是spring Cloud体系中最重要最核心的组件之一。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ribbon&lt;/td>
&lt;td>Ribbon是Netflix发布的云中间层服务开源项目，其主要功能是提供客户端实现负载均衡算法。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Feign&lt;/td>
&lt;td>Feign支持服务的调用以及均衡负载。Feign是从Netflix中分离出来的轻量级项目，能够在类接口上添加注释，成为一个REST API 客户端。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Config&lt;/td>
&lt;td>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bus&lt;/td>
&lt;td>Spring Cloud Bus通过轻量消息代理连接各个分布的节点。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stream&lt;/td>
&lt;td>Spring Cloud Stream 是一个构建消息驱动微服务的框架。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zuul&lt;/td>
&lt;td>微服务网关&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hystrix&lt;/td>
&lt;td>Hystrix处理服务的熔断防止故障扩散。Hystrix-dashboard 是一款针对Hystrix进行实时监控的工具，通过Hystrix Dashboard我们可以在直观地看到各Hystrix Command的请求响应时间, 请求成功率等数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sleuth&lt;/td>
&lt;td>Spring Cloud Sleuth为服务之间调用提供链路追踪。通过Sleuth可以很清楚的了解到一个服务请求经过了哪些服务，每个服务处理花费了多长。从而让我们可以很方便的理清各微服务间的调用关系。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="使用spring-cloud微服务的优劣">使用Spring Cloud/微服务的优劣？&lt;/h2>
&lt;p>单体（Monolithic）架构主要存在以下问题：&lt;/p>
&lt;ol>
&lt;li>系统间通常以API的形式互相访问，耦合紧密导致难以维护；&lt;/li>
&lt;li>各业务领域需要采用相同的技术栈，难以快速应用新技术；&lt;/li>
&lt;li>对系统的任何修改都必须整个系统一起重新部署/升级，运维成本高；&lt;/li>
&lt;li>在系统负载增加时，难以进行水平扩展；&lt;/li>
&lt;li>当系统中一处出现问题，会影响整个系统；&lt;/li>
&lt;/ol>
&lt;p>而微服务架构的出现改善了单体架构的不足，微服务的优势也就体现出来了：&lt;/p>
&lt;ol>
&lt;li>每个微服务可以有专门的团队开发，开发者可以自己选择自己开发的微服务所用的技术&lt;/li>
&lt;li>微服务单独部署，加快部署速度&lt;/li>
&lt;li>独立扩展，快速方便&lt;/li>
&lt;/ol>
&lt;p>当然微服务也有不足之处：&lt;/p>
&lt;ol>
&lt;li>部署复杂：微服务是分布式系统，所以会带来固有的复杂性。&lt;/li>
&lt;li>进程间相互通讯影响效率：微服务之间相互通信必然要相对于单体架构的时间要长，而且网络通讯必然是有安全隐患的&lt;/li>
&lt;li>测试复杂：测试某个服务流程是否正确，需要将所使用的微服务全部打开，复杂性有所提高。&lt;/li>
&lt;li>微服务太多端口复杂，内存占用也提高很多&lt;/li>
&lt;/ol>
&lt;h2 id="spring-cloud-vs-dubbo">Spring Cloud VS Dubbo&lt;/h2>
&lt;blockquote>
&lt;p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和Spring框架无缝集成。来源：百度百科&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://www.zhihu.com/question/45413135">请问哪位大神比较过spring cloud和dubbo，各自的优缺点是什么?【知乎】&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-19-SpringCloud%E7%BB%84%E4%BB%B6%E7%94%A8%E9%80%94%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8APOM%E5%9D%90%E6%A0%87/cloudvsdubbo.jpg" alt="SpringCloudVSDubbo">&lt;/p>
&lt;h2 id="常用组件maven坐标">常用组件Maven坐标&lt;/h2>
&lt;h3 id="eureka-服务注册与发现">Eureka 服务注册与发现&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-server&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-eureka-client&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ribbon-负载均衡">Ribbon 负载均衡&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-ribbon&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="feign-rest客户端">Feign REST客户端&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-openfeign&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="config-配置中心">Config 配置中心&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-config-server&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-config&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="busamql实现-总线">Bus(AMQL实现) 总线&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-bus-amqp&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="stream-消息">Stream 消息&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="c">&amp;lt;!-- or &amp;#39;*-stream-kafka&amp;#39; --&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-stream-rabbit&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="zuul-网关">Zuul 网关&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-zuul&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hystrix-容灾">Hystrix 容灾&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-netflix-hystrix&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sleuth-链路监测">Sleuth 链路监测&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-sleuth&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>记人生中第一次参加校招</title><link>https://blog.itning.top/post/2019/03/17/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/</link><pubDate>Sun, 17 Mar 2019 18:30:42 +0800</pubDate><guid>https://blog.itning.top/post/2019/03/17/%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/</guid><description>&lt;p>6点半起床，洗漱。学校在荒无人烟的宾县，实在是偏远。无奈只能早起。
做大客车一个小时迷迷糊糊把JVM原理和计算机网络的面试题看了一遍，到地铁站。还好人不多。
坐了半个小时地铁。终于到了哈工大。&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/a.png" alt="ditie">&lt;/p>
&lt;p>第一次来哈工大，感叹哈工大真的是大。直接迷路
问了同学找到了哈工大的体育馆&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/men.jpg" alt="men">&lt;/p>
&lt;p>进门需要扫二维码进行身份信息登记&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/dengji.png" alt="dengji">&lt;/p>
&lt;p>进去下楼，发现人真的很多啊&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/a.png" alt="a">
校招现场,人很多&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/b.png" alt="b">
校招现场&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/c.png" alt="c">
校招现场&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/d.png" alt="d">&lt;/p>
&lt;p>不得不说真的很震撼 学到了很多 总结了许多投简历的经验
例如 简历一定要好好写，因为你不是211，985出身这就比他们差一截了，然后简历还不突出，基本上你就PASS了，所以简历很重要。
因为我明年才毕业，所以现在是去找实习生开发岗位，希望暑期能够去实习。增长自己的阅历。
不过问了几家都不招实习生，不过还好有几家招，一上午的时间投了几家。
总结这次去的收获：&lt;/p>
&lt;ol>
&lt;li>简历一定要好好做&lt;/li>
&lt;li>要勇敢，你要主动才有机会&lt;/li>
&lt;li>基础很重要，赶紧回去复习基础&lt;/li>
&lt;li>做的项目一定要写的详细些，让自己在实习生中脱颖而出&lt;/li>
&lt;/ol>
&lt;p>加油！&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2019-03-17-%E8%AE%B0%E4%BA%BA%E7%94%9F%E4%B8%AD%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%A0%A1%E6%8B%9B/end.jpg" alt="end">&lt;/p>
&lt;p>人生苦短，何妨一试。&lt;/p></description></item><item><title>jsoup库api简介</title><link>https://blog.itning.top/post/2018/09/16/jsoup%E5%BA%93api%E7%AE%80%E4%BB%8B/</link><pubDate>Sun, 16 Sep 2018 19:27:01 +0800</pubDate><guid>https://blog.itning.top/post/2018/09/16/jsoup%E5%BA%93api%E7%AE%80%E4%BB%8B/</guid><description>&lt;h2 id="getelementsbytag">getElementsByTag&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByTag&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">tagName&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据标签获取元素
&lt;strong>什么是标签？&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;div&amp;gt;标签
&amp;lt;p&amp;gt;标签
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="getelementbyid">getElementById&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Element&lt;/span> &lt;span class="nf">getElementById&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据ID属性获取唯一元素&lt;/p>
&lt;h2 id="getelementsbyclass">getElementsByClass&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByClass&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">className&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据Class来获取元素&lt;/p>
&lt;h2 id="getelementsbyattribute">getElementsByAttribute&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttribute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据属性来获取元素&lt;/p>
&lt;h2 id="getelementsbyattributestarting">getElementsByAttributeStarting&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeStarting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">keyPrefix&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查找具有符合keyPrefix前缀的属性
例如查找所有**data-**属性的元素&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">getElementsByAttributeStarting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;data-&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="getelementsbyattributevalue">getElementsByAttributeValue&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根据给定的属性名和属性值查找元素
变异：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//查找不是给定属性名和属性值的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueNot&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//根据指定的属性名查找具有valuePrefix前缀的属性值的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueStarting&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">valuePrefix&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//根据指定的属性名查找具有valuePrefix后缀的属性值的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueEnding&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">valueSuffix&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//根据指定的属性名查找包含valuePrefix字符串的属性值的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueContaining&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">match&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="c1">//查找具有其值与提供的正则表达式匹配的属性的元素
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueMatching&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Pattern&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsByAttributeValueMatching&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="getelementscontainingtext">getElementsContainingText&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsContainingText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">searchText&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查找包含指定字符串的元素。 搜索不区分大小写。 文本可以直接出现在元素中，也可以出现在任何后代中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//查找直接包含指定字符串的元素。 搜索不区分大小写。 文本必须直接出现在元素中，而不是出现在任何后代中
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsContainingOwnText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">searchText&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="getelementsmatchingtext">getElementsMatchingText&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsMatchingText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Pattern&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="n">Elements&lt;/span> &lt;span class="nf">getElementsMatchingText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">regex&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>查找文本与提供的正则表达式匹配的元素&lt;/p>
&lt;p>&lt;a href="https://www.ibm.com/developerworks/cn/java/j-lo-jsouphtml/index.html">使用 jsoup 对 HTML 文档进行解析和操作&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/zhangyinhua/p/8037599.html">Jsoup（一）Jsoup详解（官方）&lt;/a>&lt;/p></description></item><item><title>记一次笔记本调节亮度快捷键失效的解决经历</title><link>https://blog.itning.top/post/2018/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</link><pubDate>Tue, 11 Sep 2018 18:41:24 +0800</pubDate><guid>https://blog.itning.top/post/2018/09/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%B0%83%E8%8A%82%E4%BA%AE%E5%BA%A6%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%B1%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E7%BB%8F%E5%8E%86/</guid><description>&lt;p>笔记本最近升级到Win10 1803 后&lt;/p>
&lt;p>快捷键调节亮度居然失效的&lt;/p>
&lt;p>但是调节声音还能用&lt;/p>
&lt;p>想想解决吧..&lt;/p>
&lt;p>重装了电脑的热键驱动没有用&amp;hellip;&lt;/p>
&lt;p>后来Google发现可能是集显驱动问题&lt;/p>
&lt;p>立马回滚了显卡驱动&lt;/p>
&lt;p>重启后发现亮度可以通过快捷键进行调节了&lt;/p>
&lt;p>去因特尔官网看了下最新的显卡驱动,发现最近一个月有更新&lt;/p>
&lt;p>下载安装后调节亮度功能依然好使&lt;/p>
&lt;p>这个问题就解决了&lt;/p>
&lt;p>注: 电脑战神Z7M&lt;/p></description></item><item><title>Android控件&amp;Material-Design控件</title><link>https://blog.itning.top/post/2018/07/24/android%E6%8E%A7%E4%BB%B6material-design%E6%8E%A7%E4%BB%B6/</link><pubDate>Tue, 24 Jul 2018 12:23:08 +0800</pubDate><guid>https://blog.itning.top/post/2018/07/24/android%E6%8E%A7%E4%BB%B6material-design%E6%8E%A7%E4%BB%B6/</guid><description>&lt;h2 id="linearlayout线性布局">LinearLayout(线性布局)&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/linearlayout1.png" alt="linearlayout1">&lt;/p>
&lt;p>&lt;a href="https://developer.android.com/guide/topics/ui/layout/linear?hl=zh-cn">Google官方教程&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/u014450015/article/details/50178415">android布局&amp;mdash;&amp;mdash;LinearLayout(线性布局)详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/e6835ed20d9a">Android布局-LinearLayout属性详解&lt;/a>&lt;/p>
&lt;h2 id="relativelayout相对布局">RelativeLayout(相对布局)&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/relativelayout1.png" alt="relativelayout1">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/16894af17ea4">Android布局-RelativeLayout属性详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/yanglh6-jyx/p/Android_RelativeLayout.html">Android开发重点难点1：RelativeLayout(相对布局)详解&lt;/a>&lt;/p>
&lt;h2 id="framelayout帧布局">FrameLayout(帧布局)&lt;/h2>
&lt;p>&lt;a href="https://www.cnblogs.com/skywang12345/p/3154093.html">Android 布局之FrameLayout&lt;/a>&lt;/p>
&lt;h2 id="appbarlayout应用栏布局">AppBarLayout(应用栏布局)&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/AppBarLayout.gif" alt="AppBarLayout">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/d159f0176576">玩转AppBarLayout，更酷炫的顶部栏&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/d4fd636d7c44">Material Design 控件知识梳理(2) - AppBarLayout &amp;amp; CollapsingToolbarLayout&lt;/a>&lt;/p>
&lt;h2 id="coordinatorlayout">CoordinatorLayout&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/CoordinatorLayout.gif" alt="CoordinatorLayout">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/4a77ae4cd82f">CoordinatorLayout 完全解析&lt;/a>&lt;/p>
&lt;h2 id="collapsingtoolbarlayout">CollapsingToolbarLayout&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/CollapsingToolbarLayout.gif" alt="CollapsingToolbarLayout">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/564a0c56022b">Material Design之CollapsingToolbarLayout使用（折叠式标题栏）&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/u010687392/article/details/46906657">Material Design之CollapsingToolbarLayout使用&lt;/a>&lt;/p>
&lt;h2 id="bottomsheet底部操作控件-">BottomSheet(底部操作控件 )&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/BottomSheet.gif" alt="BottomSheet">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/0a7383e0ad0f">BottomSheet、BottomSheetDialog使用详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/2a5be29123e5">Material Design 控件知识梳理(3) - BottomSheet &amp;amp;&amp;amp; BottomSheetDialog &amp;amp;&amp;amp; BottomSheetDialogFragment&lt;/a>&lt;/p>
&lt;h2 id="bottomsheetdialog">BottomSheetDialog&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/wangkeke1860/article/details/55100901">【Android】BottomSheetDialog详解&lt;/a>&lt;/p>
&lt;h2 id="bottomsheetdialogfragment">BottomSheetDialogFragment&lt;/h2>
&lt;h2 id="floatingactionbutton浮动操作按钮">FloatingActionButton(浮动操作按钮)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/5a354e318019">Material Design 控件知识梳理(4) - FloatingActionButton&lt;/a>&lt;/p>
&lt;h2 id="drawerlayout抽屉布局">DrawerLayout(抽屉布局)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/d2b1689a23bf">DrawerLayout和NavigationView使用详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/d70cfd724c7f">Material Design 控件知识梳理(5) - DrawerLayout &amp;amp;&amp;amp; NavigationView&lt;/a>&lt;/p>
&lt;h2 id="navigationview导航视图">NavigationView(导航视图)&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/u012702547/article/details/51253222">Android5.0之NavigationView的使用&lt;/a>&lt;/p>
&lt;h2 id="snackbar">Snackbar&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/6aea94f9ae2f">Material Design 控件知识梳理(6) - Snackbar&lt;/a>&lt;/p>
&lt;h2 id="bottomnavigationbar底部导航栏">BottomNavigationBar(底部导航栏)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/aa499cc64f72">BottomNavigationView&amp;ndash;基本使用总结&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/22ec4fc1cb71">Material Design 控件知识梳理(7) - BottomNavigationBar&lt;/a>&lt;/p>
&lt;h2 id="tablayout布局选项卡">TabLayout(布局选项卡)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/5dd04fda13ab">Material Design 控件知识梳理(8) - TabLayout&lt;/a>&lt;/p>
&lt;h2 id="textinputlayout文本输入布局">TextInputLayout(文本输入布局)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/ed9642fc8634">Material Design 控件知识梳理(9) - TextInputLayout&lt;/a>&lt;/p>
&lt;h2 id="listview">ListView&lt;/h2>
&lt;p>&lt;a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1021/1815.html">ListView之BaseAdapter的基本使用以及ViewHolder模式&lt;/a>&lt;/p>
&lt;h2 id="recyclerview">RecyclerView&lt;/h2>
&lt;p>&lt;a href="https://blog.csdn.net/lmj623565791/article/details/45059587">Android RecyclerView 使用完全解析 体验艺术般的控件&lt;/a>
&lt;a href="https://www.jianshu.com/p/21a1384df9a1">RecyclerView 知识梳理(1) - 综述&lt;/a>
&lt;a href="https://www.jianshu.com/p/ec6585e5220d">RecyclerView 知识梳理(2) - Adapter&lt;/a>
&lt;a href="https://www.jianshu.com/p/1cfca4d34402">RecyclerView 知识梳理(3) - LayoutManager&lt;/a>
&lt;a href="https://www.jianshu.com/p/b2ef4f8e859f">RecyclerView 知识梳理(4) - ItemDecoration&lt;/a>
&lt;a href="https://www.jianshu.com/p/0bbc44cc1582">RecyclerView 知识梳理(5) - ItemTouchHelper&lt;/a>&lt;/p>
&lt;h2 id="viewpager">ViewPager&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-07-24-Android%E6%8E%A7%E4%BB%B6-Material-Design%E6%8E%A7%E4%BB%B6/ViewPager.gif" alt="ViewPager">&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/e5abbda4a71c">ViewPager 全面剖析及使用详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/wangjinyu501/article/details/8169924">Android ViewPager使用详解&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/u012702547/article/details/52334161">一个卡片式的ViewPager，带你玩转ViewPager的PageTransformer属性！&lt;/a>&lt;/p>
&lt;h2 id="toolbar工具栏">Toolbar(工具栏)&lt;/h2>
&lt;p>&lt;a href="http://yifeng.studio/2016/10/12/android-toolbar/">Android Toolbar，你想知道的都在这里了 &lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/e2ae6aaff696">Material Design 之 Toolbar 开发实践总结&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2006.html">android：ToolBar详解（手把手教程）&lt;/a>&lt;/p>
&lt;h2 id="cardview卡片">CardView(卡片)&lt;/h2>
&lt;p>&lt;a href="https://www.jianshu.com/p/b105019028b6">CardView的使用&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jianshu.com/p/ae9d654599ef"># Android5.0 CardView的使用&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/1025/3621.html">关于使用 CardView 开发过程中要注意的细节&lt;/a>&lt;/p>
&lt;h2 id="preferencefragmentcompat">PreferenceFragmentCompat&lt;/h2>
&lt;p>&lt;a href="https://developer.android.com/reference/android/support/v7/preference/PreferenceFragmentCompat">官方教程&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>文章中所有图片版权均归原作者所有,如有侵权,即刻删除&lt;/p>
&lt;/blockquote></description></item><item><title>Hibernate注解</title><link>https://blog.itning.top/post/2018/06/19/hibernate%E6%B3%A8%E8%A7%A3/</link><pubDate>Tue, 19 Jun 2018 20:57:34 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/19/hibernate%E6%B3%A8%E8%A7%A3/</guid><description>&lt;h2 id="类级别">类级别&lt;/h2>
&lt;h3 id="entity">@Entity&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">*（可选）实体名称。
&lt;/span>&lt;span class="cm">*实体类的名称。 此名称是用来指
&lt;/span>&lt;span class="cm">*查询中的实体。 该名称不能是保留字面值
&lt;/span>&lt;span class="cm">*在Java持久性查询语言中。
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="table">@Table&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//表名 优先于@Entity(name=&amp;#34;&amp;#34;)
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">catalog&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">schema&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//表的唯一约束
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">UniqueConstraint&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">uniqueConstraints&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="c1">//表的索引
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Index&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">indexes&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="embeddable">@Embeddable&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">嵌入类
&lt;/span>&lt;span class="cm">@Embeddable
&lt;/span>&lt;span class="cm">public class Info implements Serializable {
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * 家庭地址
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> private String address;
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * 电话
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> private int tel;
&lt;/span>&lt;span class="cm"> }
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">@Entity(name = &amp;#34;t_user&amp;#34;)
&lt;/span>&lt;span class="cm">public class User implements Serializable {
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * Id
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> @Id
&lt;/span>&lt;span class="cm"> private String id;
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * 用户名
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> @Column
&lt;/span>&lt;span class="cm"> private String username;
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * 密码
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> private String password;
&lt;/span>&lt;span class="cm"> /**
&lt;/span>&lt;span class="cm"> * 其他信息
&lt;/span>&lt;span class="cm"> */
&lt;/span>&lt;span class="cm"> private Info info;
&lt;/span>&lt;span class="cm">**/&lt;/span>
&lt;span class="k">create&lt;/span> &lt;span class="k">table&lt;/span> &lt;span class="nf">t_user&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="n">id&lt;/span> &lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">not&lt;/span> &lt;span class="no">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">address&lt;/span> &lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">tel&lt;/span> &lt;span class="kt">integer&lt;/span> &lt;span class="k">not&lt;/span> &lt;span class="no">null&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="n">password&lt;/span> &lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="n">username&lt;/span> &lt;span class="kt">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">255&lt;/span>&lt;span class="p">),&lt;/span>
&lt;span class="k">primary&lt;/span> &lt;span class="k">key&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span> &lt;span class="kp">engine&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">MyISAM&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="方法属性级别">方法/属性级别&lt;/h2>
&lt;h3 id="id">@Id&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//表示主键
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="colum">@Colum&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//字段名,默认属性名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//唯一
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">unique&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//该字段是否允许空
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">nullable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//执行insert语句时,该字段是否出现在insert语句中
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">insertable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//更新(update)的时候是否更新该字段
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">updatable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/*
&lt;/span>&lt;span class="cm">当使用该属性
&lt;/span>&lt;span class="cm">@Column(name = &amp;#34;Email&amp;#34;,columnDefinition=&amp;#34;varchar(128) not null&amp;#34;)
&lt;/span>&lt;span class="cm"> private String email;
&lt;/span>&lt;span class="cm">SQL语句为:
&lt;/span>&lt;span class="cm"> `Email` varchar(128) NOT NULL
&lt;/span>&lt;span class="cm"> ----------------
&lt;/span>&lt;span class="cm"> @Column(name = &amp;#34;Remark&amp;#34;,columnDefinition=&amp;#34;text&amp;#34;)
&lt;/span>&lt;span class="cm"> private String remark;
&lt;/span>&lt;span class="cm">SQL语句:
&lt;/span>&lt;span class="cm"> `Remark` text
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">columnDefinition&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//（可选）包含该列的表的名称。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">table&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//列长度 适用于string
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">255&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//precision属性和scale属性表示精度，当字段类型为double时，precision表示数值的总长度，scale表示小数点所占的位数。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">precision&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">scale&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="generatedvalue">@GeneratedValue&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//表示主键生成策略
&lt;/span>&lt;span class="c1">//public enum GenerationType{
&lt;/span>&lt;span class="c1">// TABLE, 使用指定表来决定主键取值 结合@TableGenerator使用
&lt;/span>&lt;span class="c1">// SEQUENCE, 使用序列来决定主键取值
&lt;/span>&lt;span class="c1">// IDENTITY, 根据数据库的Identity字段生成
&lt;/span>&lt;span class="c1">// AUTO 根据底层数据库自动选择(mysql 默认自动增长(int))
&lt;/span>&lt;span class="c1">//}
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">GenerationType&lt;/span> &lt;span class="nf">strategy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">AUTO&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//表示主键生成器的名称
&lt;/span>&lt;span class="c1">//@GeneratedValue(generator=&amp;#34;aaa&amp;#34;)
&lt;/span>&lt;span class="c1">//@GenericGenerator(name = &amp;#34;aaa&amp;#34;,strategy = &amp;#34;assigned&amp;#34;) //手工赋值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">generator&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="genericgenerator">@GenericGenerator&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">hibernate提供多种主键生成策略，有点是类似于JPA，有的是hibernate特有：
&lt;/span>&lt;span class="cm">native: 对于 oracle 采用 Sequence 方式，对于MySQL 和 SQL Server 采用identity（自增主键生成机制），native就是将主键的生成工作交由数据库完成，hibernate不管（很常用）。
&lt;/span>&lt;span class="cm">uuid: 采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。占用空间大（字符串类型）。
&lt;/span>&lt;span class="cm">hilo: 使用hilo生成策略，要在数据库中建立一张额外的表，默认表名为hibernate_unique_key,默认字段为integer类型，名称是next_hi（比较少用）。
&lt;/span>&lt;span class="cm">assigned: 在插入数据的时候主键由程序处理（很常用），这是 &amp;lt;generator&amp;gt;元素没有指定时的默认生成策略。等同于JPA中的AUTO。
&lt;/span>&lt;span class="cm">identity: 使用SQL Server 和 MySQL 的自增字段，这个方法不能放到 Oracle 中，Oracle 不支持自增字段，要设定sequence（MySQL 和 SQL Server 中很常用）。
&lt;/span>&lt;span class="cm"> 等同于JPA中的INDENTITY。
&lt;/span>&lt;span class="cm">select: 使用触发器生成主键（主要用于早期的数据库主键生成机制，少用）。
&lt;/span>&lt;span class="cm">sequence: 调用底层数据库的序列来生成主键，要设定序列名，不然hibernate无法找到。
&lt;/span>&lt;span class="cm">seqhilo: 通过hilo算法实现，但是主键历史保存在Sequence中，适用于支持 Sequence 的数据库，如 Oracle（比较少用）
&lt;/span>&lt;span class="cm">increment: 插入数据的时候hibernate会给主键添加一个自增的主键，但是一个hibernate实例就维护一个计数器，所以在多个实例运行的时候不能使用这个方法。
&lt;/span>&lt;span class="cm">foreign: 使用另外一个相关联的对象的主键。通常和&amp;lt;one-to-one&amp;gt;联合起来使用。
&lt;/span>&lt;span class="cm">guid: 采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等。
&lt;/span>&lt;span class="cm">uuid.hex: 看uuid，建议用uuid替换。
&lt;/span>&lt;span class="cm">**/&lt;/span>
&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">generator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;paymentableGenerator&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="nd">@GenericGenerator&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;paymentableGenerator&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">strategy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;uuid&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="embedded">@Embedded&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//表示该属性的类是嵌入类,必须结合@Embeddable注解
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="embeddedid">@EmbeddedId&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//使用嵌入式主键类实现复合主键
&lt;/span>&lt;span class="c1">//必须实现 java.io.Serializable;
&lt;/span>&lt;span class="c1">//必须覆盖 equals hashCode方法
&lt;/span>&lt;span class="c1">//复合主键类上结合@Embeddable类注解
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="transient">@Transient&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//表示该属性不需要映射为一个字段
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="onetoone">@OneToOne&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//属性表示默认关联的实体类型。如果集合类中指定了具体类型了，不需要使用targetEntity.否则要指定
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="nf">targetEntity&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kt">void&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//级联策略
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">CascadeType&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">cascade&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;span class="c1">//加载策略:延迟加载 立即加载
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">FetchType&lt;/span> &lt;span class="nf">fetch&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="n">EAGER&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">*（可选）关联是否可选。 如果设置
&lt;/span>&lt;span class="cm">*为false，则必须始终存在非空关系。
&lt;/span>&lt;span class="cm">*/&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">optional&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//用于标记当实体之间是双向 控制权力交给主控方 在被控方加这个属性
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">mappedBy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="cm">/**
&lt;/span>&lt;span class="cm">理解CascadeType.REMOVE和orphanRemoval = true之间差异的简单方法。
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">对于orphanRemoval：如果您调用setOrders（null），相关的Order实体将自动在数据库中被删除。
&lt;/span>&lt;span class="cm">
&lt;/span>&lt;span class="cm">删除级联：如果您调用setOrders（null），相关的Order实体将不会在数据库中自动删除。
&lt;/span>&lt;span class="cm">**/&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">orphanRemoval&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="joincolumn">@JoinColumn&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//外键名,生成字段的时候用这个名字
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//对应的关联字段名称,默认对面的主键
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">referencedColumnName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//是否唯一
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">unique&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">nullable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">insertable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kt">boolean&lt;/span> &lt;span class="nf">updatable&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">columnDefinition&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="nf">table&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="n">ForeignKey&lt;/span> &lt;span class="nf">foreignKey&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nd">@ForeignKey&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jointable">@JoinTable&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//多对多
&lt;/span>&lt;span class="c1">//中间表 表名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">name&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//控制字段名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">JoinColumn&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">joinColumns&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;span class="c1">//反转控制字段名
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">JoinColumn&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">inverseJoinColumns&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="o">{};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="onetomany">@OneToMany&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="cm">/**
&lt;/span>&lt;span class="cm"> * 订单 会向order表自动添加字段:uid
&lt;/span>&lt;span class="cm"> * alter table t_order add constraint FKkymvvaj9rps3st3bkniqi0oci foreign key (uid) * references t_user (id)
&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="nd">@OneToMany&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">cascade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MERGE&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">CascadeType&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">REFRESH&lt;/span>&lt;span class="o">})&lt;/span>
&lt;span class="nd">@JoinColumn&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;uid&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Order&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">orderList&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="manytomany">@ManyToMany&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//用于标记当实体之间是双向 控制权力交给主控方 在被控方加这个属性
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="nf">mappedBy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>操作系统</title><link>https://blog.itning.top/post/2018/06/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link><pubDate>Sun, 17 Jun 2018 19:20:31 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid><description>&lt;h2 id="操作系统概述">操作系统概述&lt;/h2>
&lt;p>操作系统含义很广泛,包括运行在电脑,笔记本,手机,甚至机顶盒中&lt;/p>
&lt;p>操作系统介于硬件和应用软件程序之间&lt;/p>
&lt;h3 id="进程与线程">进程与线程&lt;/h3>
&lt;p>进程与线程有什么区别?&lt;/p>
&lt;p>进程(process) 线程(thread)&lt;/p>
&lt;p>进程本身是容器 线程执行代码&lt;/p>
&lt;p>进程与进程之间相互交互常见为TCP/IP端口&lt;/p>
&lt;h4 id="进程">进程&lt;/h4>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-17-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/a.PNG" alt="a">&lt;/p>
&lt;p>进程与进程之间独立&lt;/p>
&lt;p>进程里边有线程&lt;/p>
&lt;p>进程里边有逻辑内存&lt;/p>
&lt;p>32X 系统有4G的寻址空间 (逻辑内存)&lt;/p>
&lt;p>进程里边寻址空间相互独立&lt;/p>
&lt;p>文件/网络句柄&lt;/p>
&lt;h4 id="线程">线程&lt;/h4>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-17-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/b.PNG" alt="b">&lt;/p>
&lt;p>线程里边有 栈&lt;/p>
&lt;p>栈里边有 有参数和方法返回值&lt;/p>
&lt;p>PC 程序计数器 存放下一条指令的地址&lt;/p>
&lt;p>指令本身存放在内存中&lt;/p>
&lt;p>TLS(Thread-local storage) 线程中独立的内存&lt;/p>
&lt;h3 id="存储和寻址">存储和寻址&lt;/h3>
&lt;h4 id="存储">存储&lt;/h4>
&lt;p>操作系统结构化存储&lt;/p>
&lt;p>贵 寄存器 快&lt;/p>
&lt;p>​ 缓存&lt;/p>
&lt;p>​ 内存&lt;/p>
&lt;p>廉 硬盘 满&lt;/p>
&lt;h4 id="寻址">寻址&lt;/h4>
&lt;p>寻址空间是进程中指针可以取到地址的范围&lt;/p>
&lt;p>寻址空间和机器上装有多少物理内存无关,和进程数量无关&lt;/p>
&lt;p>寻址空间大小: 32X 4G 64X 2的64次方&lt;/p>
&lt;p>int n = * p;&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-17-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/c.PNG" alt="c">&lt;/p>
&lt;p>指针p 指向逻辑内存 2的32次方或2的64次方&lt;/p>
&lt;p>逻辑内存对应物理内存(逻辑内存一般大于物理内存)&lt;/p>
&lt;p>数据可能不在物理内存中,在虚拟内存中(硬盘)&lt;/p>
&lt;p>虚拟内存数据放在物理内存中&lt;/p>
&lt;p>由于p指向数据很小,每次只把这个放过去对系统开销很大,所以有分页概念,放的时候将p所在的分页放过去&lt;/p>
&lt;p>如果物理内存放不下分页 可以将物理内存中的不重要东西交换到虚拟内存中&lt;/p>
&lt;p>物理内存中有p数据,将其取出来放在寄存器中&lt;/p></description></item><item><title>JAVA8中Stream接口用法</title><link>https://blog.itning.top/post/2018/06/09/java8%E4%B8%ADstream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/</link><pubDate>Sat, 09 Jun 2018 00:36:46 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/09/java8%E4%B8%ADstream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/</guid><description>&lt;p>JAVA8 中所有Stream接口&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-09-JAVA8%E4%B8%ADStream%E6%8E%A5%E5%8F%A3%E7%94%A8%E6%B3%95/a.png" alt="a">&lt;/p>
&lt;h2 id="count">count&lt;/h2>
&lt;p>返回Stream中元素的数量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">List&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;aa&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">count&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//输出 2
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="filterforeach">filter&amp;amp;forEach&lt;/h2>
&lt;p>filter : 返回匹配的元素&lt;/p>
&lt;p>forEach:为每个元素执行操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">long&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">count&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//输出1
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">//输出3
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">filter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="anymatchallmatch">anyMatch&amp;amp;allMatch&lt;/h2>
&lt;p>anyMatch: 此流中有一个元素匹配就返回true&lt;/p>
&lt;p>allMatch : 此流中所有元素都匹配返回true&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
list.add(2);
list.add(1);
list.add(3);
boolean anyMatch = list.stream().anyMatch(s -&amp;gt; s &amp;gt; 2);
//输出true
System.out.println(anyMatch);
boolean allMatch = list.stream().allMatch(s -&amp;gt; s &amp;gt; 2);
//输出false
System.out.println(allMatch);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="map">map&lt;/h2>
&lt;p>给定流处理并返回值&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>JAVA设计模式</title><link>https://blog.itning.top/post/2018/06/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 07 Jun 2018 09:20:29 +0800</pubDate><guid>https://blog.itning.top/post/2018/06/07/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>在&lt;a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B">软件工程&lt;/a>中，&lt;strong>设计模式&lt;/strong>（design pattern）是对&lt;a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E8%A8%AD%E8%A8%88">软件设计&lt;/a>中普遍存在（反复出现）的各种问题，所提出的解决方案。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-06-07-JAVA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/a.png" alt="a">&lt;/p>
&lt;h2 id="单例设计模式">单例设计模式&lt;/h2>
&lt;p>单例对象的类必须保证只有一个实例存在。&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;strong>推荐使用饿汉式单例设计模式&lt;/strong>&lt;!-- raw HTML omitted -->&lt;/p>
&lt;h3 id="饿汉式单例设计模式">饿汉式单例设计模式&lt;/h3>
&lt;ol>
&lt;li>私有化构造函数。&lt;/li>
&lt;li>声明本类的引用类型变量，并且使用该变量指向本类对象。&lt;/li>
&lt;li>提供一个公共静态的方法获取本类的对象。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Single&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//声明本类的引用类型变量，并且使用该变量指向本类对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Single&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//私有化构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Single&lt;/span>&lt;span class="o">(){}&lt;/span>
&lt;span class="c1">//提供一个公共静态的方法获取本类的对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="懒汉式单例设计模式">懒汉式单例设计模式&lt;/h3>
&lt;ol>
&lt;li>私有化构造函数。&lt;/li>
&lt;li>声明本类的引用类型变量，但是不要创建对象，&lt;/li>
&lt;li>提供公共静态 的方法获取本类 的对象，获取之前先判断是否已经创建了本类 对象
，如果已经创建了，那么直接返回对象即可，如果还没有创建，那么先创建本类的对象，
然后再返回。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java"> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Single2&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">//声明本类的引用类型变量，不创建本类的对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single2&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//私有化了构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Single2&lt;/span>&lt;span class="o">(){}&lt;/span>
&lt;span class="c1">//懒汉式设计模式有线程安全问题 简单解决:synchronized
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="n">Single2&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Single2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="工厂设计模式">工厂设计模式&lt;/h2>
&lt;p>工厂方法模式(常用)&lt;/p>
&lt;blockquote>
&lt;p>定义一个用于创建对象的接口，让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到其子类。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>适用场景：&lt;/strong>&lt;/p>
&lt;p>　　（1）客户端不需要知道它所创建的对象的类。例子中我们不知道每个图片加载器具体叫什么名，只知道创建它的工厂名就完成了床架过程。
　　（2）客户端可以通过子类来指定创建对应的对象。
以上场景使用于采用工厂方法模式。&lt;/p>
&lt;hr>
&lt;p>现在需要设计一个这样的图片加载类，它具有多个图片加载器，用来加载jpg，png格式的图片，每个加载器都有一个read（）方法，用于读取图片。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="c1">//编写一个加载器的公共接口。
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Reader&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//Jpg图片加载器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JpgReader&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Reader&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;read jpg&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//Png图片加载器
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PngReader&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Reader&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;read png&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//定义一个抽象的工厂接口ReaderFactory
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ReaderFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">Reader&lt;/span> &lt;span class="nf">getReader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//Jpg加载器工厂
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">JpgReaderFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Reader&lt;/span> &lt;span class="nf">getReader&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">JpgReader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//Png加载器工厂
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">PngReaderFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ReaderFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="nd">@Override&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">Reader&lt;/span> &lt;span class="nf">getReader&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">PngReader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">//读取Jpg
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ReaderFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">JpgReaderFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Reader&lt;/span> &lt;span class="n">reader&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getReader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">reader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="c1">//读取Png
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ReaderFactory&lt;/span> &lt;span class="n">factory&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">PngReaderFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">Reader&lt;/span> &lt;span class="n">reader&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">factory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getReader&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="n">reader&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">read&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>volatile工作机制</title><link>https://blog.itning.top/post/2018/05/30/volatile%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 30 May 2018 08:23:52 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/30/volatile%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>&lt;strong>volatile并非线程安全的&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>volatile修饰之后：
　　第一：使用volatile关键字会强制将修改的值立即写入主存；
　　第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；
　　第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。&lt;/p>
&lt;/blockquote>
&lt;p>volatile保证了操作的可见性 但是不保证对变量的操作是原子性
&lt;img src="https://blog.itning.top/images/2018-05-30-volatile%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/a.PNG" alt="a">&lt;/p></description></item><item><title>Win10操作系统安装详解</title><link>https://blog.itning.top/post/2018/05/29/win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 29 May 2018 19:19:25 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="什么是bios">什么是BIOS?&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>BIOS&lt;/strong>（&lt;strong>B&lt;/strong>asic &lt;strong>I&lt;/strong>nput/&lt;strong>O&lt;/strong>utput &lt;strong>S&lt;/strong>ystem的缩写、中文：&lt;strong>基本输入输出系统&lt;/strong>），在&lt;a href="https://zh.wikipedia.org/w/index.php?title=IBM_PC%E7%9B%B8%E5%AE%B9%E7%B3%BB%E7%B5%B1&amp;amp;action=edit&amp;amp;redlink=1">IBM PC兼容系统&lt;/a>上，是一种业界标准的&lt;a href="https://zh.wikipedia.org/wiki/%E9%9F%8C%E9%AB%94">固件&lt;/a>&lt;a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E8%B3%87%E8%A8%8A%E7%A7%91%E6%8A%80)">接口&lt;/a>。[&lt;a href="https://zh.wikipedia.org/wiki/BIOS#cite_note-pcguidedefinition-1">1]&lt;/a>。BIOS这个字眼是在1975年第一次由&lt;a href="https://zh.wikipedia.org/wiki/CP/M">CP/M&lt;/a>操作系统中出现。BIOS是&lt;a href="https://zh.wikipedia.org/wiki/%E4%B8%AA%E4%BA%BA%E7%94%B5%E8%84%91">个人电脑&lt;/a>启动时加载的第一个软件。&lt;/p>
&lt;/blockquote>
&lt;p>这是维基百科对BIOS的介绍&lt;/p>
&lt;p>在我们电脑启动的时候第一个加载的软件就是BIOS,它可以选择开机的启动设备,是硬盘还是U盘,还是光驱&lt;/p>
&lt;h2 id="什么是uefi">什么是UEFI?&lt;/h2>
&lt;p>UEFI中文名为&lt;strong>统一可扩展固件接口&lt;/strong>是BIOS的替代方案&lt;/p>
&lt;h2 id="gpt-mbr又是什么">GPT MBR又是什么?&lt;/h2>
&lt;p>MBR叫&lt;strong>主引导记录&lt;/strong>&lt;/p>
&lt;p>GPT叫&lt;strong>全局唯一标识分区表&lt;/strong> 是EFI标准的一部分&lt;/p>
&lt;p>它俩主要区别&lt;/p>
&lt;p>GPT支持大于2.2TB的硬盘,MBR不支持&lt;/p>
&lt;p>GPT分区数量不限制&lt;/p>
&lt;p>GPT没有BIOS自检,节省时间,加快开机速度&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-29-Win10%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AF%A6%E8%A7%A3/a.png" alt="a">&lt;/p>
&lt;p>磁盘结构：&lt;/p>
&lt;p>A. 磁道
B. 几何扇区
C. 磁道扇区
D. &lt;a href="https://zh.wikipedia.org/wiki/Data_cluster">Cluster&lt;/a>&lt;/p>
&lt;h2 id="diskpart命令">diskpart命令&lt;/h2>
&lt;p>在安装系统的时候按shift+F10 弹出命令提示符&lt;/p>
&lt;p>输入diskpart进入&lt;/p>
&lt;p>list disk 会将计算机上的所有物理硬盘全部列出&lt;/p>
&lt;p>select disk X 选择要操作的硬盘&lt;/p>
&lt;p>例如 select disk 0&lt;/p>
&lt;p>clean 命令来将硬盘擦除数据&lt;/p>
&lt;p>convert gpt 可以将硬盘分区格式转换为GPT格式&lt;/p>
&lt;h2 id="系统安装大致步骤">系统安装大致步骤&lt;/h2>
&lt;ol>
&lt;li>将U盘插入到电脑上&lt;/li>
&lt;li>开启启动选择U盘启动&lt;/li>
&lt;li>如果计算机没有配置UEFI启动,需要进入BIOS进行设置&lt;/li>
&lt;li>使用diskpart命令进行转换硬盘分区&lt;/li>
&lt;li>激活系统&lt;/li>
&lt;li>安装驱动程序&lt;/li>
&lt;/ol></description></item><item><title>Zookeeper 结构 命令行操作</title><link>https://blog.itning.top/post/2018/05/29/zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 29 May 2018 19:08:41 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid><description>&lt;h2 id="zookeeper-特性">Zookeeper 特性&lt;/h2>
&lt;p>1、Zookeeper：一个leader，多个follower组成的集群
2、全局数据一致：每个server保存一份相同的数据副本，client无论连接到哪个server，数据都是一致的
3、分布式读写，更新请求转发，由leader实施
4、更新请求顺序进行，来自同一个client的更新请求按其发送顺序依次执行
5、数据更新原子性，一次数据更新要么成功，要么失败
6、实时性，在一定时间范围内，client能读到最新数据&lt;/p>
&lt;h2 id="节点类型">节点类型&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-29-Zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/b.png" alt="b">&lt;/p>
&lt;p>1、Znode有两种类型：
短暂（ephemeral）（断开连接自己删除）
持久（persistent）（断开连接不删除）
2、Znode有四种形式的目录节点（默认是persistent ）
PERSISTENT
PERSISTENT_SEQUENTIAL（持久序列/test0000000019 ）
EPHEMERAL
EPHEMERAL_SEQUENTIAL
3、创建znode时设置顺序标识，znode名称后会附加一个值，顺序号是一个单调递增的计数器，由父节点维护
4、在分布式系统中，顺序号可以被用于为所有的事件进行全局排序，这样客户端可以通过顺序号推断事件的顺序&lt;/p>
&lt;h2 id="命令行工具">命令行工具&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> ./zkCli.sh –server &amp;lt;ip&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-29-Zookeeper-%E7%BB%93%E6%9E%84-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/a.png" alt="a">&lt;/p></description></item><item><title>Zookeeper 基础</title><link>https://blog.itning.top/post/2018/05/29/zookeeper-%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 29 May 2018 19:07:07 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/29/zookeeper-%E5%9F%BA%E7%A1%80/</guid><description>&lt;blockquote>
&lt;p>Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.&lt;/p>
&lt;/blockquote>
&lt;p>Zookeeper 直译过来是 动物园管理员 说白了就是用来管理Hadoop(大象),Hive(蜜蜂) 的分布式协调服务&lt;/p>
&lt;p>Zookeeper 提供两种服务
&amp;ndash;&amp;gt;管理(存储，读取)用户程序提交的数据；
&amp;ndash;&amp;gt;为用户程序提供数据节点监听服务；&lt;/p>
&lt;hr>
&lt;p>&lt;strong>注意 关闭防火墙 SSH免密登陆&lt;/strong>
&lt;strong>Zookeeper适合安装在奇数台机器上&lt;/strong>
需要修改配置文件:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># 心跳间隔周期(毫秒)
tickTime=2000
# initLimit参数配置初始化连接时, follower和leader之间的最长心跳时间
initLimit=10
# 配置leader和follower之间发送消息, 请求和应答的最大时间长度
syncLimit=5
# 数据目录
dataDir=/home/ning/data/zookeeper
# 客户端连接的端口
clientPort=2181
# the maximum number of client connections.
# increase this if you need to handle more clients
#maxClientCnxns=60
#
# Be sure to read the maintenance section of the
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
#autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to &amp;#34;0&amp;#34; to disable auto purge feature
#autopurge.purgeInterval=1
server.1=node1:2888:3888
server.2=node2:2888:3888
server.3=node3:2888:3888
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;a href="http://shift-alt-ctrl.iteye.com/blog/1845568">http://shift-alt-ctrl.iteye.com/blog/1845568&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>需要在配置文件中设置的目录中新建名为 myid 的文件 内容为当前机器ID&lt;/p>
&lt;p>例如 node1 机器在配置文件中ID 为1 则在myid文件中 内容为 1&lt;/p>
&lt;p>在 bin 目录中&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">./zkServer.sh start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>来进行启动&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">./zkServer.sh status
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>来进行查看节点状态&lt;/p>
&lt;p>Zookeeper集群的角色： Leader 和 follower （Observer）&lt;/p>
&lt;p>&lt;strong>zookeeper的选举机制（全新集群paxos）&lt;/strong>
以一个简单的例子来说明整个选举的过程.
假设有五台服务器组成的zookeeper集群,它们的id从1-5,同时它们都是最新启动的,也就是没有历史数据,在存放数据量这一点上,都是一样的.假设这些服务器依序启动,来看看会发生什么.&lt;/p>
&lt;ol>
&lt;li>服务器1启动,此时只有它一台服务器启动了,它发出去的报没有任何响应,所以它的选举状态一直是LOOKING状态&lt;/li>
&lt;li>服务器2启动,它与最开始启动的服务器1进行通信,互相交换自己的选举结果,由于两者都没有历史数据,所以id值较大的服务器2胜出,但是由于没有达到超过半数以上的服务器都同意选举它(这个例子中的半数以上是3),所以服务器1,2还是继续保持LOOKING状态.&lt;/li>
&lt;li>服务器3启动,根据前面的理论分析,服务器3成为服务器1,2,3中的老大,而与上面不同的是,此时有三台服务器选举了它,所以它成为了这次选举的leader.&lt;/li>
&lt;li>服务器4启动,根据前面的分析,理论上服务器4应该是服务器1,2,3,4中最大的,但是由于前面已经有半数以上的服务器选举了服务器3,所以它只能接收当小弟的命了.&lt;/li>
&lt;li>服务器5启动,同4一样,当小弟.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>非全新集群的选举机制(数据恢复)&lt;/strong>
那么，初始化的时候，是按照上述的说明进行选举的，但是当zookeeper运行了一段时间之后，有机器down掉，重新选举时，选举过程就相对复杂了。
需要加入数据id、leader id和逻辑时钟。
数据id：数据新的id就大，数据每次更新都会更新id。
Leader id：就是我们配置的myid中的值，每个机器一个。
逻辑时钟：这个值从0开始递增,每次选举对应一个值,也就是说: 如果在同一次选举中,那么这个值应该是一致的 ; 逻辑时钟值越大,说明这一次选举leader的进程更新.
选举的标准就变成：
1、逻辑时钟小的选举结果被忽略，重新投票
2、统一逻辑时钟后，数据id大的胜出
3、数据id相同的情况下，leader id大的胜出
根据这个规则选出leader。&lt;/p></description></item><item><title>hadoop集群安装 7节点;HA</title><link>https://blog.itning.top/post/2018/05/27/hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85-7%E8%8A%82%E7%82%B9ha/</link><pubDate>Sun, 27 May 2018 11:57:36 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/27/hadoop%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85-7%E8%8A%82%E7%82%B9ha/</guid><description>&lt;blockquote>
&lt;p>教程使用版本:
hadoop-2.8.1.tar.gz
zookeeper-3.4.10.tar.gz
Linux: Centos 7 x64 (CentOS-7-x86_64-DVD-1708)&lt;/p>
&lt;/blockquote>
&lt;h2 id="前期准备">前期准备:&lt;/h2>
&lt;p>&lt;strong>集群规划：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">主机名&lt;/th>
&lt;th align="center">IP&lt;/th>
&lt;th align="center">安装的软件&lt;/th>
&lt;th align="center">运行的进程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">node1&lt;/td>
&lt;td align="center">192.168.66.3&lt;/td>
&lt;td align="center">jdk、hadoop&lt;/td>
&lt;td align="center">NameNode、DFSZKFailoverController(zkfc)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node2&lt;/td>
&lt;td align="center">192.168.66.4&lt;/td>
&lt;td align="center">jdk、hadoop&lt;/td>
&lt;td align="center">NameNode、DFSZKFailoverController(zkfc)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node3&lt;/td>
&lt;td align="center">192.168.66.5&lt;/td>
&lt;td align="center">jdk、hadoop&lt;/td>
&lt;td align="center">ResourceManager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node4&lt;/td>
&lt;td align="center">192.168.66.6&lt;/td>
&lt;td align="center">jdk、hadoop&lt;/td>
&lt;td align="center">ResourceManager&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node5&lt;/td>
&lt;td align="center">192.168.66.7&lt;/td>
&lt;td align="center">jdk、hadoop、zookeeper&lt;/td>
&lt;td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node6&lt;/td>
&lt;td align="center">192.168.66.8&lt;/td>
&lt;td align="center">jdk、hadoop、zookeeper&lt;/td>
&lt;td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">node7&lt;/td>
&lt;td align="center">192.168.66.9&lt;/td>
&lt;td align="center">jdk、hadoop、zookeeper&lt;/td>
&lt;td align="center">DataNode、NodeManager、JournalNode、QuorumPeerMain&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="修改主机名">修改主机名:&lt;/h3>
&lt;pre>&lt;code>在每个节点上执行
其中node1 为主机名
$hostnamectl set-hostname node1
&lt;/code>&lt;/pre>
&lt;h3 id="修改ip">修改IP&lt;/h3>
&lt;pre>&lt;code>$cd /etc/sysconfig/network-scripts
找到ifcfg-eth0修改内容
TYPE=&amp;quot;Ethernet&amp;quot;
PROXY_METHOD=&amp;quot;none&amp;quot;
BROWSER_ONLY=&amp;quot;no&amp;quot;
BOOTPROTO=&amp;quot;static&amp;quot;
DEFROUTE=&amp;quot;yes&amp;quot;
IPADDR=192.168.66.3 #静态IP
GATEWAY=192.168.66.2 #默认网关
NETMASK=255.255.255.0 #子网掩码
DNS1=192.168.66.2
IPV4_FAILURE_FATAL=&amp;quot;no&amp;quot;
IPV6INIT=&amp;quot;yes&amp;quot;
IPV6_AUTOCONF=&amp;quot;yes&amp;quot;
IPV6_DEFROUTE=&amp;quot;yes&amp;quot;
IPV6_FAILURE_FATAL=&amp;quot;no&amp;quot;
IPV6_ADDR_GEN_MODE=&amp;quot;stable-privacy&amp;quot;
NAME=&amp;quot;ens33&amp;quot;
UUID=&amp;quot;1a7840e2-4b8c-4770-9537-c1aa9ddf42e2&amp;quot;
DEVICE=&amp;quot;ens33&amp;quot;
ONBOOT=&amp;quot;yes&amp;quot;
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">service network restart
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改hosts">修改Hosts&lt;/h3>
&lt;pre>&lt;code>$vi /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.66.3 node1
192.168.66.4 node2
192.168.66.5 node3
192.168.66.6 node4
192.168.66.7 node5
192.168.66.8 node6
192.168.66.9 node7
&lt;/code>&lt;/pre>
&lt;h3 id="关闭防火墙">关闭防火墙&lt;/h3>
&lt;pre>&lt;code>systemctl stop firewalld.service #停止firewall
systemctl disable firewalld.service #禁止firewall开机启动
&lt;/code>&lt;/pre>
&lt;h3 id="ssh免密登陆">ssh免密登陆&lt;/h3>
&lt;ol>
&lt;li>首先要配置node1到node2、node3、node4、node5、node6、node7的免密码登陆
在node1上生产一对钥匙&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ssh-keygen -t rsa
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>将公钥拷贝到其他节点，包括自己&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ssh-copy-id node1
ssh-copy-id node2
ssh-copy-id node3
ssh-copy-id node4
ssh-copy-id node5
ssh-copy-id node6
ssh-copy-id node7
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>配置node3到node4、node5、node6、node7的免密码登陆
在node3上生产一对钥匙&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ssh-keygen -t rsa
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将公钥拷贝到其他节点&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ssh-copy-id node4
ssh-copy-id node5
ssh-copy-id node6
ssh-copy-id node7
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>**注意：**两个namenode之间要配置ssh免密码登陆，别忘了配置node2到node1的免登陆
在node2上生产一对钥匙&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ssh-keygen -t rsa
ssh-copy-id -i node1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="jdk安装环境变量配置">jdk安装&amp;amp;环境变量配置&lt;/h3>
&lt;blockquote>
&lt;p>Linux x64 180.99 MB jdk-8u152-linux-x64.tar.gz&lt;/p>
&lt;/blockquote>
&lt;pre>&lt;code>$vi /etc/profile
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">JAVA_HOME=/home/ning/app/jdk1.8.0_152
JRE_HOME=$JAVA_HOME/jre
PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin
CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
HADOOP_HOME=/home/ning/app/hadoop-2.8.1
export JAVA_HOME
export JRE_HOME
export PATH
export CLASSPATH
export HADOOP_HOME
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="配置zookeeper">配置Zookeeper&lt;/h2>
&lt;p>安装配置zooekeeper集群（在node5上）&lt;/p>
&lt;ol>
&lt;li>解压&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">tar -zxvf zookeeper-3.4.10.tar.gz -C /home/hadoop/app/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>修改配置&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">cd /home/hadoop/app/zookeeper-3.4.5/conf/
cp zoo_sample.cfg zoo.cfg
vi zoo.cfg
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改：&lt;code>dataDir=/home/hadoop/app/zookeeper-3.4.5/tmp&lt;/code>
在最后添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">server.1=node5:2888:3888
server.2=node6:2888:3888
server.3=node7:2888:3888
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>保存退出&lt;/li>
&lt;li>然后创建一个tmp文件夹
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">mkdir /home/hadoop/app/zookeeper-3.4.10/tmp
echo 1 &amp;gt; /home/hadoop/app/zookeeper-3.4.10/tmp/myid
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>将配置好的zookeeper拷贝到其他节点(首先分别在hadoop06、hadoop07根目录下创建一个hadoop目录：mkdir /hadoop)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">scp -r /home/hadoop/app/zookeeper-3.4.5/ hadoop06:/home/hadoop/app/
scp -r /home/hadoop/app/zookeeper-3.4.5/ hadoop07:/home/hadoop/app/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：修改hadoop06、hadoop07对应/hadoop/zookeeper-3.4.5/tmp/myid内容
hadoop06：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">echo 2 &amp;gt; /home/hadoop/app/zookeeper-3.4.5/tmp/myid
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>hadoop07：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">echo 3 &amp;gt; /home/hadoop/app/zookeeper-3.4.5/tmp/myid
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装配置hadoop集群在node1上操作">安装配置hadoop集群（在node1上操作）&lt;/h2>
&lt;ol>
&lt;li>解压&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">tar -zxvf hadoop-2.6.4.tar.gz -C /home/hadoop/app/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>配置HDFS
（hadoop2.0所有的配置文件都在$HADOOP_HOME/etc/hadoop目录下）
将hadoop添加到环境变量中&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> vi /etc/profile
export JAVA_HOME=/usr/java/jdk1.7.0_55
export HADOOP_HOME=/hadoop/hadoop-2.6.4
export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>修改hadoo-env.sh
&lt;code>export JAVA_HOME=/home/hadoop/app/jdk1.7.0_55&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="core-sitexml">core-site.xml&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;configuration&amp;gt;
&amp;lt;!-- 指定hdfs的nameservice为ns1 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;hdfs://ns1/&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定hadoop临时目录 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/ning/app/allAppFiles/hadoop/tmpDir/&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定zookeeper地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;ha.zookeeper.quorum&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node5:2181,node6:2181,node7:2181&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hdfs-sitexml">hdfs-site.xml&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;span class="lnt">69
&lt;/span>&lt;span class="lnt">70
&lt;/span>&lt;span class="lnt">71
&lt;/span>&lt;span class="lnt">72
&lt;/span>&lt;span class="lnt">73
&lt;/span>&lt;span class="lnt">74
&lt;/span>&lt;span class="lnt">75
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;configuration&amp;gt;
&amp;lt;!--指定hdfs的nameservice为bi，需要和core-site.xml中的保持一致 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.nameservices&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;ns1&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- ns1下面有两个NameNode，分别是nn1，nn2 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.ha.namenodes.ns1&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;nn1,nn2&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- nn1的RPC通信地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.rpc-address.ns1.nn1&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node1:9000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- nn1的http通信地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.http-address.ns1.nn1&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node1:50070&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- nn2的RPC通信地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.rpc-address.ns1.nn2&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node2:9000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- nn2的http通信地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.http-address.ns1.nn2&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node2:50070&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定NameNode的edits元数据在JournalNode上的存放位置 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.namenode.shared.edits.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;qjournal://node5:8485;node6:8485;node7:8485/ns1&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.journalnode.edits.dir&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/ning/app/allAppFiles/journalData&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 开启NameNode失败自动切换 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.ha.automatic-failover.enabled&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 配置失败自动切换实现方式 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.client.failover.proxy.provider.ns1&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.ha.fencing.methods&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;
sshfence
shell(/bin/true)
&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.ha.fencing.ssh.private-key-files&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;/home/ning/.ssh/id_rsa&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 配置sshfence隔离机制超时时间30s --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;dfs.ha.fencing.ssh.connect-timeout&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;30000&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mapred-sitexml">mapred-site.xml&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;configuration&amp;gt;
&amp;lt;!-- 指定mr框架为yarn方式 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="yarn-sitexml">yarn-site.xml&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;configuration&amp;gt;
&amp;lt;!-- Site specific YARN configuration properties --&amp;gt;
&amp;lt;!-- 开启RM高可用 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.ha.enabled&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定RM的cluster id --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.cluster-id&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;yrc&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定RM的名字 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.ha.rm-ids&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;rm1,rm2&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 分别指定RM的地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.hostname.rm1&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node3&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.hostname.rm2&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node4&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;!-- 指定zk集群地址 --&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.resourcemanager.zk-address&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;node5:2181,node6:2181,node7:2181&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改slaves">修改slaves&lt;/h3>
&lt;p>因为要在node1上启动HDFS、在node3启动yarn，所以
node1上的slaves文件指定的是datanode的位置，
node3上的slaves文件指定的是nodemanager的位置)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">node5
node6
node7
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动">启动&lt;/h2>
&lt;ol>
&lt;li>启动zookeeper集群（分别在node5、node6、node7上启动zk）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">cd /hadoop/zookeeper-3.4.10/bin/
./zkServer.sh start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>查看状态：一个leader，两个follower&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">./zkServer.sh status
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>启动journalnode（分别在在mini5、mini6、mini7上执行）&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">cd /hadoop/hadoop-2.6.4
sbin/hadoop-daemon.sh start journalnode
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>运行jps命令检验，node5、node6、node7上多了JournalNode进程&lt;/em>&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>格式化HDFS
在node1上执行命令:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">hdfs namenode -format
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>格式化后会在根据core-site.xml中的hadoop.tmp.dir配置生成个文件，
这里我配置的是/hadoop/hadoop-2.6.4/tmp，
然后将/hadoop/hadoop-2.6.4/tmp拷贝到hadoop02的/hadoop/hadoop-2.6.10/下。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">scp -r tmp/ hadoop02:/home/hadoop/app/hadoop-2.6.4/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可以这样，建议hdfs namenode -bootstrapStandby&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式化ZKFC(在mini1上执行一次即可)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">hdfs zkfc -formatZK
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>启动HDFS(在mini1上执行)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sbin/start-dfs.sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>启动YARN
(#####注意#####：是在hadoop02上执行start-yarn.sh，
把namenode和resourcemanager分开是因为性能问题，因为他们都要占用大量资源，所以把他们分开了，他们分开了就要分别在不同的机器上启动)&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">sbin/start-yarn.sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>node4上&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">yarn-daemon.sh start resourcemanager
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="验证">验证&lt;/h2>
&lt;p>浏览器访问:
http://node1:50070
NameNode &amp;lsquo;node1:9000&amp;rsquo; (active)
http://node2:50070
NameNode &amp;lsquo;node2:9000&amp;rsquo; (standby)
http://node4:8088&lt;/p></description></item><item><title>NameNode管理元数据的机制</title><link>https://blog.itning.top/post/2018/05/23/namenode%E7%AE%A1%E7%90%86%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%88%B6/</link><pubDate>Wed, 23 May 2018 10:21:39 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/namenode%E7%AE%A1%E7%90%86%E5%85%83%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%88%B6/</guid><description>&lt;p>当NameNode收到更新元数据请求&lt;/p>
&lt;p>首先更新内存中元数据信息&lt;/p>
&lt;p>记录操作日志 edits&lt;/p>
&lt;p>定期合并(checkpoint) edits 到 fileimage&lt;/p>
&lt;p>checkpoint 触发条件: 定时 ; 按照edits中记录数量 ;&lt;/p>
&lt;p>触发条件达成 NameNode 请求 secondary namenode&lt;/p>
&lt;p>NameNode 将edits正在写入的切断并滚动生成&lt;/p>
&lt;p>secondary namenode 将fsimage和edits下载到本地,并在内存中合并,然后存放到本地,再请求NameNode上传&lt;/p>
&lt;p>下次合并只需下载edits即可&lt;/p>
&lt;p>每一个block大约占用元数据150byte&lt;/p>
&lt;p>NameNode硬盘坏掉后 可以将Secoundary NameNode 的工作目录拷贝到NameNode工作目录中&lt;/p>
&lt;p>可以配置多个NameNode工作目录 hdfs-site.xml&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>客户端向HDFS写数据的流程</title><link>https://blog.itning.top/post/2018/05/23/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%91hdfs%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 23 May 2018 10:03:28 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%91hdfs%E5%86%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B/</guid><description>&lt;h2 id="hdfs集群分为两大角色">HDFS集群分为两大角色:&lt;/h2>
&lt;p>NameNode DataNode (Secondary NameNode)&lt;/p>
&lt;p>NameNode负责管理集群的元数据&lt;/p>
&lt;p>DataNode负责管理用户的文件数据块&lt;/p>
&lt;p>文件会按照固定的大小（blocksize）切成若干块后分布式存储在若干台datanode上&lt;/p>
&lt;p>每一个文件块可以有多个副本，并存放在不同的datanode上&lt;/p>
&lt;h2 id="hdfs写数据流程">HDFS写数据流程&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>客户端向NameNode通信 发送上传文件申请,NameNode查看文件是否已经存在&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件不存在,返回给客户端响应,可以上传文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端向NameNode请求第一个block上传在哪个DataNode上&lt;/p>
&lt;/li>
&lt;li>
&lt;p>NameNode响应可以上传在哪些DataNode上(就近,最远,本机架) -配置机架感知&lt;/p>
&lt;p>副本数量由客户端配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端向一个DataNode建立连接,并告诉还要传到哪个DataNode中,第一个DataNode收到后负责向第二个DataNode建立连接,全部建立后 响应建立完成消息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户端将第一个block传给第一个DataNode,以packet为单位传给下一个DataNode&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当第一个block传送完成,客户端请求NameNode第二个block位置&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>只要一个DataNode上传成功即可&lt;/strong>&lt;/p></description></item><item><title>HDFS读数据流程</title><link>https://blog.itning.top/post/2018/05/23/hdfs%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 23 May 2018 00:09:08 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/23/hdfs%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B/</guid><description>&lt;ol>
&lt;li>客户端向NameNode请求下载文件A&lt;/li>
&lt;li>NameNode从元数据中读取A文件所在位置,副本数量 返回给客户端&lt;/li>
&lt;li>客户端向最近DataNode请求下载block1 建立下载通道&lt;/li>
&lt;li>开始传输数据&lt;/li>
&lt;li>传输完成后客户端找第二个block数据所在DataNode中的位置&lt;/li>
&lt;li>最后所有块在客户端合并&lt;/li>
&lt;/ol></description></item><item><title>OOAD与UML</title><link>https://blog.itning.top/post/2018/05/16/ooad%E4%B8%8Euml/</link><pubDate>Wed, 16 May 2018 08:25:33 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/16/ooad%E4%B8%8Euml/</guid><description>&lt;h2 id="ooadobject-oriented-analysis-and-design-面向对象的分析与设计">OOAD(Object Oriented Analysis and Design) 面向对象的分析与设计&lt;/h2>
&lt;h3 id="ooa-分析阶段">OOA 分析阶段&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>建立针对业务问题域的清晰视图&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出系统必须要完成的核心人物&lt;/p>
&lt;/li>
&lt;li>
&lt;p>针对问题域建立公共词汇表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出针对此问题域的最佳解决方案&lt;/p>
&lt;p>核心问题:What to do ? 要做什么?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="ood-设计阶段">OOD 设计阶段&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>如何解决具体的业务问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>引入系统工作所需的支持元素&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定义系统的实现策略&lt;/p>
&lt;p>核心问题:How to do ? 如何做?&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="关系">关系&lt;/h3>
&lt;h4 id="关联关系-association">关联关系 (Association)&lt;/h4>
&lt;p>用户和订单之间是关联关系&lt;/p>
&lt;p>一个用户对应多个订单(一对多)&lt;/p>
&lt;p>订单和用户之间是多对一&lt;/p>
&lt;p>用户和订单是一对多双向关联&lt;/p>
&lt;h4 id="依赖关系-dependency">依赖关系 (Dependency)&lt;/h4>
&lt;p>某个类依赖某个类的某个方法&lt;/p>
&lt;p>A类new B类实例&lt;/p>
&lt;h4 id="聚集关系-aggregation">聚集关系 (Aggregation)&lt;/h4>
&lt;p>整体与部分之间的关系&lt;/p>
&lt;p>人和手之间&lt;/p>
&lt;h4 id="一般化关系-generalization">一般化关系 (Generalization)&lt;/h4>
&lt;p>指的是类之间继承关系&lt;/p>
&lt;h3 id="内聚和耦合">内聚和耦合&lt;/h3>
&lt;p>&lt;strong>设计原则:增加内聚,减少耦合&lt;/strong>&lt;/p>
&lt;h4 id="内聚">内聚&lt;/h4>
&lt;p>度量一个类独立完成某项工作的能力&lt;/p>
&lt;h4 id="耦合">耦合&lt;/h4>
&lt;p>度量系统内或系统之间依赖关系的复杂度&lt;/p>
&lt;h3 id="软件开发采取迭代递增生命周期">软件开发采取迭代,递增生命周期&lt;/h3>
&lt;p>每一个周期包含一次或多次迭代&lt;/p>
&lt;p>一个阶段的结束称之为**&amp;ldquo;里程碑&amp;rdquo;**(milestone) :M1 M2 M3 版本&lt;/p>
&lt;h2 id="umlunified-modeling-language-统一建模语言">UML(Unified Modeling Language) 统一建模语言&lt;/h2>
&lt;p>图形化的语言表示&lt;/p>
&lt;h3 id="静态模型static-model">静态模型(static model)&lt;/h3>
&lt;p>创建并记录一个系统的静态特征&lt;/p>
&lt;p>反映一个软件系统基础,固定的框架结构&lt;/p>
&lt;p>创建相关问题域主要元素的视图&lt;/p>
&lt;p>该模型包含:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>用例图 (use case diagrams)&lt;/strong>&lt;/li>
&lt;li>&lt;strong>类图 (class diagrams)&lt;/strong>&lt;/li>
&lt;li>对象图 (object diagrams)&lt;/li>
&lt;li>组件图 (component diagrams)&lt;/li>
&lt;li>部署图 (deployment diagrams)&lt;/li>
&lt;/ul>
&lt;h4 id="用例图-use-case-diagrams">用例图 (use case diagrams)&lt;/h4>
&lt;p>展示系统的核心功能及与其交互的用户&lt;/p>
&lt;p>用户被称之为&amp;quot;活动者&amp;rdquo; (Actor)&lt;/p>
&lt;p>用例使用椭圆表示&lt;/p>
&lt;p>为简化建模过程,用例图可标注优先级&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/user_case.PNG" alt="user_case">&lt;/p>
&lt;h4 id="类图-class-diagrams">类图 (class diagrams)&lt;/h4>
&lt;p>表现类的特征&lt;/p>
&lt;p>类图描述了多各类,接口的特征,以及对象之间的协作与交互&lt;/p>
&lt;p>由一个或多个矩形区域构成,内容包括:&lt;/p>
&lt;ul>
&lt;li>类型(类名)&lt;/li>
&lt;li>属性(可选)&lt;/li>
&lt;li>操作(可选)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/class.PNG" alt="class">&lt;/p>
&lt;h4 id="对象图-object-diagrams">对象图 (object diagrams)&lt;/h4>
&lt;p>表现对象的特征&lt;/p>
&lt;p>对象图展示了多个对象的特征及对象之间的交互&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/object.PNG" alt="object">&lt;/p>
&lt;h4 id="组件图-component-diagrams">组件图 (component diagrams)&lt;/h4>
&lt;p>表现软件组件之间的关系&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/component.PNG" alt="component">&lt;/p>
&lt;h4 id="部署图-deployment-diagrams">部署图 (deployment diagrams)&lt;/h4>
&lt;p>用于部署软件应用的物理设备信息&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/deployment.PNG" alt="deployment">&lt;/p>
&lt;h3 id="动态模型dynamic-model">动态模型(dynamic model)&lt;/h3>
&lt;p>用以展示系统的行为&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>时序图 (sequence diagrams)&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>协作图 (collaboration diagrams)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>状态图 (state chart diagrams)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>活动图 (activity diagrams)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="时序图-sequence-diagrams">时序图 (sequence diagrams)&lt;/h4>
&lt;p>捕捉一段时间范围内多个对象之间的交互信息&lt;/p>
&lt;p>强调消息交互的时间顺序&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/sequence.PNG" alt="sequence">&lt;/p>
&lt;h4 id="协作图-collaboration-diagrams">协作图 (collaboration diagrams)&lt;/h4>
&lt;p>表现一定范围内对象之间协作的信息&lt;/p>
&lt;p>强调参与信息交流的对象之间的组织结构&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/collaboration.PNG" alt="collaboration">&lt;/p>
&lt;h4 id="状态图-state-chart-diagrams">状态图 (state chart diagrams)&lt;/h4>
&lt;p>强调一个对象在不同事件触发时,其内部状态的转变过程&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/state_chart.PNG" alt="state_chart">&lt;/p>
&lt;h4 id="活动图-activity-diagrams">活动图 (activity diagrams)&lt;/h4>
&lt;p>描述活动的流程&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-16-OOAD%E4%B8%8EUML/activity.PNG" alt="activity">&lt;/p></description></item><item><title>人生苦短,何妨一试</title><link>https://blog.itning.top/post/2018/05/13/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E4%BD%95%E5%A6%A8%E4%B8%80%E8%AF%95/</link><pubDate>Sun, 13 May 2018 19:34:43 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/13/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%E4%BD%95%E5%A6%A8%E4%B8%80%E8%AF%95/</guid><description>&lt;p>当你认真谈过一次感情 最后分手了 后来你却很难再喜欢上别人 你不想再花心思去了解去用心 就好比你在喝一杯水还剩三分之一的时候有只小蚂蚁不小心爬进了杯子里把水弄脏了 让你从新倒一杯再喝 但你却因为肚子撑喝不下去了 就像爱情还差要一个结尾但却让你从新来过 那时的你已经没有精力了&lt;/p>
&lt;p>你可以一天上九节课两节晚自习,你可以一天写完两支笔芯做至少三套卷子,你可以早起十分钟晚睡十分钟记几个单词和成语,你可以用玩手机的时间弄懂一道数学题,用看杂志的时间写完一篇英语阅读,你可以把K歌看电影聚会打游戏的时间都用在学习上,总有人比你努力,可怕的是比你牛的人比你还努力. 　　&lt;/p>
&lt;p>高考报考人数915万人，其中907.7万人不与你在同省。同省中其中1万人已被保送，2千人对大学后就业没信心不参加高考，8千人是裸考，9千人不能正常发挥，1千人会迟到，4.2万人不和你考一个学校，剩下1000人，630水平不如你，369个会产生心理问题。你的对手只剩自己！　　&lt;/p>
&lt;p>不管你有再多的兴趣爱好 再多的社会关系 再深的对努力学习的厌恶之感 在你青春期的某一个时间点 你都会明白 学习的重要性高过所有 你要无欲则刚 你要学会孤独你要把自己逼出最大的潜能 没有人会为了你的未来买单 你要么努力向上爬 要么烂在社会最底层的泥淖里 这就是生活.　　&lt;/p>
&lt;p>六点起床很困难，背单词很困难，静下心很困难……但是总有一些人，五点可以起床，一天背六课单词，耐心读完一本书。谁也没有超能力，但是自己可以决定一天去做什么事情。你以为没有了路，事实上路可能就在前方一点点。那些比自己强大的人都在拼命，我们还有什么理由停下脚步？　　&lt;/p>
&lt;p>如果你想在高考后换一部新的手机。买一台电脑。去看一次演唱会。享受一次单人旅行。每天早上能睡到自然醒。不用为写不完的作业发愁。不必再听父母的唠叨。自信地说我出去玩了。拉着恋人的手在街上疯癫。碰到班主任反而拉得更紧。那么，去努力吧。至少18岁的暑假需要你。 　　&lt;/p>
&lt;p>你想考哪所大学? 　　&lt;/p>
&lt;p>别说什么只是做梦的话 高考吧最后一年发了狠一下考了一本的数不胜数 你不试试 怎么知道未来到底是怎样?　　你想不想在十年后 　　甚至更久后 在街上或者任何地方遇到自己曾经暗恋过的某某 曾经嘲笑过你看不起的同学 曾经跟你说你永远不可能有出息的老师 曾经狠狠拒绝你因为你不够漂亮不够优秀的男生 　　曾经连正眼都没看过你一眼的那些所谓优等生 都可以骄傲的扬起头笑着说看老子现在就是过得比你好 你还在奔波还在为生活担忧但是我早就过上了自己想要的生活 　　如果你希望有那么一刻 那么一天 那就拿起你的书本吧 任何伟大的梦想不可能从幻想里出来 而任何光辉的时刻必定从一分一秒的努力里得来&lt;/p>
&lt;p>人脑有无限的潜力，一个人的大脑如果完全被开发的话据说可以记住26国语言,4000多本图书的全部内容 全世界最聪明的人爱因斯坦也仅仅只开发了12％而已 所以别以自己蠢为借口 你要是真的发狠了 你是不是下一个爱因斯坦谁又会知道　&lt;/p>
&lt;p>坚信一句话 没有人会让你输 除非你不想赢 　　&lt;/p>
&lt;p>对 我嘴上说我很讨厌学习 说真的 我也搞不懂那些二次三角函数学了到底有什么屁用 我同意柯景腾说的 十年后我的生活中一定没有数学LOGO 但是我仍然可以活得很好 但这并不是你不学习的理由 说句俗的啊 你生在中国 在中国这个应试教育中成绩才是王道 没有成绩你把头昂起来时都会没有底气 你蠢吗?不 那为什么不好好学? 　　你想象一下 当你成绩很好很好那些老师都来讨好你时 你可以骄傲的对他们不屑一顾甚至比中指 还可以暗叫 叫你们看不起老子 是一件多么爽的事情&lt;/p>
&lt;p>如果在几十年后我能再次遇到你 不管是在富豪会所还是阴暗的地下室 或者是公共厕所 我都希望能够认出你 不论你脸上的容颜改变了多少我都愿你能够留住心里善良的模样 　不要被这个世界同化得不剩一点闪光&lt;/p>
&lt;p>亲爱的 分数不够打击你吗 期末考场坐的舒服吗 补作业不累吗 每次决心认真拼三分钟热度不假吗 骂年级前五脑残心里不舒服习惯了吗 手机不离手 　　微信微博人人更新你变美变帅肚子饱了吗 等着心爱的人没心思学习手机聊天你们会结婚吗 清醒点亲爱的 别忘了答应自己的梦想 别傻了 　　那不是你要走的路 　　只要你成绩好了，你爸妈就看你顺眼，你干什么都支持都不管；一旦成绩不理想了，爸妈看你干什么都不爽，处处找你事为难你，然后扯出很多没联系的陈年往事。所以你看成绩还可以避免好多家庭矛盾 多好啊!　&lt;/p>
&lt;p>学习其实并不是那么讨厌的事情啊&lt;/p>
&lt;p>当你背完了整整几页的政治历史语文 别人问你你可以自信的倒背如流收获了别人崇拜的眼神时 当你为了一道数学物理化学题目纠结了整整半天但是最后解出来 被同学老师表扬时 当你中考高考完可以安心的在家等通知书不用向别人一样担心受怕 被家长亲戚鼓励时 当你可以自由支配自己时间谈恋爱都不怕爸爸妈妈骂 可以理直气壮的把成绩单一甩过去时 那种成就感是无与伦比的 谁都想当个优秀的人 他们行 我也行 　　&lt;/p>
&lt;p>既然学不死，就往死了学。&lt;/p>
&lt;p>你以为你花一个小时被一课单词会死吗 你以为你花两个小时只做一道数学题会死吗 你以为把你搞得头大的文言文会杀死你吗 你以为三个小时背不下来近代史的大纲吗 你以为这些会让你死吗 既然学不死你 那有什么好怕的&lt;/p>
&lt;p>15岁觉得游泳难，放弃游泳，到18岁遇到一个你喜欢的人约你去游泳，你只好说“我不会耶”.18岁觉得英文难，放弃英文，28岁出现一个很棒但要会英文的工作，你只好说“我不会耶”.人生前期越嫌麻烦，越懒得学，后来就越可能错过让你动心的人和事，错过新风景 　　&lt;/p>
&lt;p>读书吧做题吧 做烦了做疯了就把书扔了 冷静一两秒再捡回来继续看。周而复始这就是简单枯燥的学习，为了能封住那些三姑六婆的嘴 为了自己十年后不后悔 为了老妈鬓上出现的白发 　　为了老爸应酬时被酒灌坏的胃 为了未来能够毫无顾忌的说：我的高中，可是血泪史!可一秒都没有虚度 我知道 我知道 学习很好很好也许真的不会很有钱 很有势 但是你觉得大字不识几个 　　英文只会说Hi 表面上过着看得过去的生活 实际一无所有真的很好么 　　说真的 　　没文化真可怕 我也知道真的很难坚持 　　&lt;/p>
&lt;p>试一试&lt;/p>
&lt;p>还记得高中生物书上那个21三体综合症的孩子嘛？ 他叫陈峰 20年后 他已经是中国民航大学 机场学院二年级的研究生 什么都无法阻挡他成功的脚步 所以说多一条染色体算什么 奋斗吧少年　　&lt;/p>
&lt;p>俄罗斯方块告诉我们：犯下的错误会积累，获得的成功会消失；植物大战僵尸告诉我们：须常调整状态，方能应付不同挑战；愤怒的小鸟告诉我们：有时沉下身心，是为了飞的更高；跑跑卡丁车告诉我们：永远别觉得时间还多，可浪费；水果忍者告诉我们：水果与炸弹同在，机遇与挑战并存　　记得聚美优品的广告吗，我觉得很励志　　你只闻到我的香水，却没看到我的汗水。你有你的规则，我有我的选择。你否定我的现在，我决定我的未来。你嘲笑我一无所有，不配去爱，我可怜你总是等待。你可以轻视我们的年轻，我们会证明这是谁的时代。&lt;/p>
&lt;p>梦想是注定孤独的旅行，路上少不了置疑和嘲笑，但那又怎样，哪怕遍体鳞伤，也要活的漂亮.　　&lt;/p>
&lt;p>你现在一无所有 但意味着 你有无限可能　　奇迹是努力的另一个名字　　你的爸爸妈妈正在为你们奋斗 这就是你要努力的理由　　要只因一次挫败，就忘记你原先决定想达到的远方　　&lt;/p>
&lt;p>如果你觉得现在走的辛苦，那就证明你在走——上 ！坡 ！路 ！　　&lt;/p>
&lt;p>当你在前进的道路上,永远有一群煞笔跟着你,盼着你跌倒,等着你失败,看你的笑话.所以你必须拼命奔跑,永不言败　　&lt;/p>
&lt;p>一个人至少拥有一个梦想，有一个理由去坚强。　　&lt;/p>
&lt;p>无论失败多少次，只要还活着，就不能放弃 力未尽，气未绝，心未死，不弃不馁，持之以恒 　　成绩不是全部学历不是全部。成功没有模式，只是自己能够甘心，能够不太对不起他人。　　&lt;/p>
&lt;p>不知道自己能活多久，就像你永远无法预测什么时候牙会疼，什么时候你会成功，你不能急，你必须坚信，你是最棒的，独一无二的。　　&lt;/p>
&lt;p>总会有一些事阻止你走向梦想，别在意，你会成功的，相信自己　　那些杀不死我们的，终将使我们更加坚强　　&lt;/p>
&lt;p>如果不奋斗，我们连羡慕别人的资格都没有 你还没有感觉到黑暗 ，你还没有感觉到痛苦 ，你还有时间去担心每天过的太快 ，那只能说明你还没有拼命 ，你还有心思去担心别的事 　&lt;/p>
&lt;p>将来的你一定会感谢现在如此努力的你，所以请你无论如何也别放弃！　　&lt;/p>
&lt;p>人有两条路要走，一条是必须走的，一条是想走的，你必须把必须走的路走漂亮才可以走想走的路，有些路，你不走下去，就不会知道那边的风景有多美　　&lt;/p>
&lt;p>当你打算放弃梦想时，告诉自己再多撑一天，一个星期，一个月，再多撑一年吧，你会发现，拒绝退场的结果令人惊讶&amp;ndash;力克·胡哲《人生不设限》 　　&lt;/p>
&lt;p>每一个优秀的人，都有一段沉默的时光。那一段时光，是付出了很多努力，忍受孤独和寂寞，不抱怨不诉苦，日后说起时，连自己都能被感动日子。　　&lt;/p>
&lt;p>请你，担负起对自己的责任来，不但是活着就算了，更要活得热烈而起劲，不要懦弱，更不要别人太多的指引。每一天，活得踏实，将份内的工作，做得尽自己能力之内的完美，就无愧于天地。——三毛 　　&lt;/p>
&lt;p>坚持不下来的时候，我们要给自己一个最大的拥抱。　　因为亲爱的自己，我们不能辜负自己，辜负我们的梦。&lt;/p>
&lt;p>我们必须告诉自己，心上的伤口，不能用懦弱的泪水浇灌，要用奋斗的热血治愈。　　&lt;/p>
&lt;p>我们可以悲伤，但我们悲伤过后，要调整自己，从悲伤中走出来　不要沮丧，每天对自己笑笑，竖个大拇指，告诉自己，我很牛逼，我是天才。看起来很2B，但是，别人又看不到，自己鼓励鼓励自己，没什么不好的~　　&lt;/p>
&lt;p>不管你之前是怎么想的，如果你想努力，那么第一，你的心态要好要积极，第二，对自己要有信心，那么接下来就是你要付出行动了　　努力不一定会成功，但不努力就一定不会成功　　不一定要考什么清华北大.或许我不会站在年级前十的颁奖台上,我只希望我的高中生活,有我喜欢的事,有喜欢的人,有让我无悔的每一天.最后凭我正常的努力正常的学习,正常的我去完成一个适合我的大学.我认为,青春是该付出在那一纸试卷上,但青春不全是那一张试卷.有目标,有理想,有明天,有你,足够.　　&lt;/p>
&lt;p>语文老师说；如果你爱一个人.不是下课给人家买买水.不是短信发来发去,也不是周末一起出来唱唱歌聊聊天吃吃饭。　　而是做一个出色的人.以后的以后,可能还有别的人爱她.　　&lt;/p>
&lt;p>你要做的,是把别人都比下去.你要变得优秀,要比其他人都优秀.　　&lt;/p>
&lt;p>相信.未来不止是未知.爱情能改变现实&lt;/p>
&lt;p>据统计.大雄在《哆啦A梦》全集中一共被胖虎揍173次.被老师骂60次.被妈妈骂了327次.被狗咬23次.掉进水沟14次.可见我们大雄是多么乐观的活着.成绩的困难算什么.再艰难我也一定会坚持下去的.　　&lt;/p>
&lt;p>你凭什么差别人一等　　&lt;/p>
&lt;p>爸爸妈妈给你的比别人少吗.　　你比别人笨吗.　　凭什么拿着爸爸妈妈的血汗钱不去努力.　　&lt;/p>
&lt;p>当你很累很累很累很累的时候.你应该闭上眼睛做深呼吸，告诉自己你应该坚持的住.　　&lt;/p>
&lt;p>给自己一个梦.梦中的自己过上了自己想要的生活.告诉自己.除了学习这条路可以让梦想成真.别无选择.适当的逼逼自己.　　&lt;/p>
&lt;p>我知道学习不是唯一的出路.可是你忍心让你的爹妈为你的以后奔波吗？为你的将来担心吗？你不觉得不安吗?现在他们给的以后不该还给他们吗? 　　&lt;/p>
&lt;p>如果今天我很努力.　　成绩依旧不好.　至少长大后我可以说.　　那时候的我真的努力过.　　然后想起来也会没有遗憾.　　才坚持几天就要放弃了吗？看别人的成绩眼红了吗？在这样下去你就真的无药可救了.一天又过了吧.你今天完成了什么.？ 撑不住的时候.可以对自己说声“我好累”但不要对自己说“我不行”也可以说“再坚持3分钟”　　　&lt;/p>
&lt;p>我不想再浑浑噩噩地度过每一天了.　　&lt;/p>
&lt;p>我的梦想换了一箩筐却从未付诸过努力.　　&lt;/p>
&lt;p>在空想中挥霍着生活.　　整天无所事事一事无成.　今天的事情推到明天.明天推到大后天.　　我不能再这样下去了.　　我不想以后拿点死工资抱怨生活后悔曾经.　　&lt;/p>
&lt;p>我要去梦去想去努力去奋斗.　　考上好学校　　不让爸妈担心　　不让未来的自己后悔　　为自己的明天拼搏&lt;/p>
&lt;p>如果你有梦想的话.就去捍卫它为它而努力奋斗.　　你爸不是李刚.　　不对梦想付诸于汗水.　　以为干坐着　　梦想就会开花结果实现.　　那就别傻了.梦想早已发霉发臭.　　只有通过自己的不懈努力.坚定信念.　　&lt;/p>
&lt;p>老天是有眼的.　　他不会让你的努力白白浪费.　　&lt;/p>
&lt;p>空想只会让你死在梦中　　活着平庸.　　&lt;/p>
&lt;p>加油.请你向梦想一步步前进.　　它在向你招手　　&lt;/p>
&lt;p>hello.　　你要努力.　　逐渐充实自己.　　让自己不再无意义.　　&lt;/p>
&lt;p>谁都不会是你的谁.只有自己才是最真实的.　　&lt;/p>
&lt;p>没有谁必须要帮助你.任何事情都得靠自己.　　不努力去哪找一个心甘情愿给你依靠的人.　　&lt;/p>
&lt;p>时间长了你会知道.你不优秀就会被社会淘汰.　别把现实当偶像剧.没有天上掉下高富帅的事.　　&lt;/p>
&lt;p>在不久的将来你会变成更好的自己。　　&lt;/p>
&lt;p>一切会变得更好.&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-13-%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD-%E4%BD%95%E5%A6%A8%E4%B8%80%E8%AF%95/a.jpg" alt="hello-su">&lt;/p></description></item><item><title>设内存按字节编址，若8K×8bit存储空间的起始地址为7000H，则该存储空间的最大地址编号为</title><link>https://blog.itning.top/post/2018/05/13/%E8%AE%BE%E5%86%85%E5%AD%98%E6%8C%89%E5%AD%97%E8%8A%82%E7%BC%96%E5%9D%80%E8%8B%A58k8bit%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E4%B8%BA7000h%E5%88%99%E8%AF%A5%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9C%B0%E5%9D%80%E7%BC%96%E5%8F%B7%E4%B8%BA/</link><pubDate>Sun, 13 May 2018 11:33:41 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/13/%E8%AE%BE%E5%86%85%E5%AD%98%E6%8C%89%E5%AD%97%E8%8A%82%E7%BC%96%E5%9D%80%E8%8B%A58k8bit%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B5%B7%E5%A7%8B%E5%9C%B0%E5%9D%80%E4%B8%BA7000h%E5%88%99%E8%AF%A5%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E6%9C%80%E5%A4%A7%E5%9C%B0%E5%9D%80%E7%BC%96%E5%8F%B7%E4%B8%BA/</guid><description>&lt;blockquote>
&lt;p>设内存按字节编址，若8K×8bit存储空间的起始地址为7000H，则该存储空间的最大地址编号为（7）。&lt;/p>
&lt;p>(7)A.7FFF B.8FFF C.9FFF D.AFFF&lt;/p>
&lt;/blockquote>
&lt;p>K=2∧10&lt;/p>
&lt;p>8K=8×2∧10=2∧13&lt;/p>
&lt;p>2∧13(D)=2000(H)&lt;/p>
&lt;p>2000(H)-1(H)=1FFF(H)&lt;/p>
&lt;p>7000(H)+1FFF(H)=8FFF(H)&lt;/p></description></item><item><title>向值栈保存数据&amp;在JSP中获取值栈的数据</title><link>https://blog.itning.top/post/2018/05/09/%E5%90%91%E5%80%BC%E6%A0%88%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%9C%A8jsp%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC%E6%A0%88%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Wed, 09 May 2018 07:53:15 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/09/%E5%90%91%E5%80%BC%E6%A0%88%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%9C%A8jsp%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%80%BC%E6%A0%88%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>&lt;h4 id="向值栈保存数据root">向值栈保存数据(root)&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">ValueStack vs=ActionContext.getContext().getValueStack();
push(Object obj)//底层就是 root.add(0,obj) 将数据存储到栈顶。
set(String name,Object obj);
/*底层是将数据封装到HashMap中，在将这个HashMap通过push存储。*/
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="在jsp中获取值栈的数据">在JSP中获取值栈的数据&lt;/h4>
&lt;p>&lt;strong>Action如果想传递数据给 JSP，只有将数据保存到成员变量，并且提供get方法就可以了&lt;/strong>
&lt;strong>root&lt;/strong>&lt;/p>
&lt;pre>&lt;code>1.fieldError 校验数据错误信息提示
2.actionError 关于逻辑操作时错误信息(例如登录失败)
3.message 就是一个信息.
this.addFieldError(&amp;quot;msg&amp;quot;, &amp;quot;字段错误信息&amp;quot;);
this.addActionError(&amp;quot;Action全局错误信息&amp;quot;);
this.addActionMessage(&amp;quot;Action的消息信息&amp;quot;);
fieldError 针对某一个字段错误信息 （常用于表单校验）、
actionError (普通错误信息，不针对某一个字段 登陆失败)、
actionMessage 通用消息
在jsp中使用 struts2提供标签 显示消息信息
&amp;lt;s:fielderror fieldName=&amp;quot;msg&amp;quot;/&amp;gt;
&amp;lt;s:actionerror/&amp;gt;
&amp;lt;s:actionmessage/&amp;gt;
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1.如果栈顶是一个Map集合，获取时，可以直接通过Map集合的key来获取value.
&amp;lt;s:property value=&amp;#34;username&amp;#34;/&amp;gt;
2.如果栈顶数据不是一个Map，没有key值，可以使用序号来获取。
&amp;lt;s:property value=&amp;#34;[0]&amp;#34;&amp;gt; 从0的位置向下查找所有。
&amp;lt;s:property value=&amp;#34;[0].top&amp;#34;&amp;gt; 只查找0位置上数据。
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>OgnlContext&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">1.request数据 存：request.setAttribute()
2.session数据 存：session.setAttribute()
3.application数据 存：application.setAttribute()
4.attr 依次从request,session.application中查找
5.parameters 获取请求参数
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>项目中session的管理方式</title><link>https://blog.itning.top/post/2018/05/06/%E9%A1%B9%E7%9B%AE%E4%B8%ADsession%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 06 May 2018 20:55:35 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/06/%E9%A1%B9%E7%9B%AE%E4%B8%ADsession%E7%9A%84%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F/</guid><description>&lt;p>项目中session的管理方式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="o">/&lt;/span>&lt;span class="n">getCurrentSession&lt;/span> &lt;span class="n">创建或者获取session&lt;/span>
&lt;span class="c1">// 线程的方式创建session
&lt;/span>&lt;span class="c1">// 一定要配置：&amp;lt;property name=&amp;#34;hibernate.current_session_context_class&amp;#34;&amp;gt;thread&amp;lt;/property&amp;gt;
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Session&lt;/span> &lt;span class="n">session3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentSession&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 创建session，绑定到线程
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Session&lt;/span> &lt;span class="n">session4&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCurrentSession&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">// 从当前访问线程获取session
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">session3&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">session4&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="http://blog.csdn.net/liyunyun6/article/details/8946501">openSession和getCurrentSession的区别&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>在比较openSession和getCurrentSession这两个方法之前，我们先认识一下这两个方法。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>在进行配置信息管理时，我们一般进行一下简单步骤：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Configuration cfg = new Configuration(); // 获得配置信息对象
SessionFactory sf = cfg.configure().buildSessionFactory(); //解析并建立Session工厂&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>Session session = sf.getCurrentSession(); // 获得Session&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="2">
&lt;li>Session session = sf.openSession(); // 打开Session&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>对于上述的两个方法，有以下区别：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;ol>
&lt;li>openSession 从字面上可以看得出来，是打开一个新的session对象，而且每&amp;gt; 次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;ol start="2">
&lt;li>getCurrentSession ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;blockquote>
&lt;p>注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了；&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>对于getCurrentSession 来说，有以下一些特点：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>1.用途，界定事务边界&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>2.事务提交会自动close，不需要像openSession一样自己调用close方法关闭session&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>3.上下文配置（即在hibernate.cfg.xml）中，需要配置：&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;!-- raw HTML omitted -->thread&lt;!-- raw HTML omitted -->&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>（需要注意，这里的current_session_context_class属性有几个属性值：jta 、 &amp;gt; thread 常用 , custom、managed 少用 )&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>a).thread使用connection 单数据库连接管理事务&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>b).jta （Java transaction api） Java 分布式事务管理 （多数据库访问），jta 由中间件提供（JBoss WebLogic 等， 但是tomcat 不支持）&lt;/p>
&lt;/blockquote></description></item><item><title>二叉树-已知先序或后续遍历和中序遍历求画出二叉树及后续或先序遍历</title><link>https://blog.itning.top/post/2018/05/04/%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/</link><pubDate>Fri, 04 May 2018 15:46:16 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/04/%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/</guid><description>&lt;p>二叉树有三种遍历方式:先序遍历,中序遍历,后续遍历&lt;/p>
&lt;p>&lt;strong>1.先序遍历&lt;/strong>&lt;/p>
&lt;p>(1)访问根结点；&lt;/p>
&lt;p>(2)先序遍历左子树；&lt;/p>
&lt;p>(3)先序遍历右子树。&lt;/p>
&lt;p>&lt;strong>2.中序遍历&lt;/strong>&lt;/p>
&lt;p>(1)中序遍历左子树；&lt;/p>
&lt;p>(2)访问根结点；&lt;/p>
&lt;p>(3)中序遍历右子树。&lt;/p>
&lt;p>&lt;strong>3.后序遍历&lt;/strong>&lt;/p>
&lt;p>(1)后序遍历左子树；&lt;/p>
&lt;p>(2)后序遍历右子树；&lt;/p>
&lt;p>(3)访问根结点。&lt;/p>
&lt;p>我们只要知道 先序中序或 后序中序 就能确定一棵二叉树 如果我们只知道 先序 后续 是无法确定一棵二叉树的&lt;/p>
&lt;p>以 2009年上半年程序员上午试题38题为例&lt;/p>
&lt;blockquote>
&lt;p>某二叉树的先序遍历序列为ABFCDE、中序遍历序列为BFADCE，则该二叉树根的左孩子和右孩子结点分别是（38）。&lt;/p>
&lt;p>(38)A.B 和 F B.F 和 B C.B 和 C D.C 和 B&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>首先 题中给我们了 这棵二叉树 的先序序列和中序序列&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过先序序列 我们能够知道第一个字母是根节点 也就是 节点A 为 整个二叉树的根节点(因为先序序列首先访问的就是根节点)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过中序序列 我们能够通过根节点A 判断二叉树的左子节点有BF 右子节点有DCE (因为根节点将整棵二叉树分为左右两边,可以通过中序序列来确定左右子树都有哪些节点)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这个时候我们可以先画出根节点及左右子树都有哪些节点&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/a.png" alt="a">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接下来我们看 先序序列 ABFCDE 把根节点去除 BFCDE 这个时候先序遍历是先访问根节点然后再访问左子树最后右子树.那么BFCDE 这个序列中的B 为 左子树的根节点.序列中去掉左子树的节点和根节点 还剩 CDE 这三个节点 那么C节点则为右子树的根节点(因为先序遍历是先访问根节点的,而C在序列的开头则C为右子树根节点)&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/b.png" alt="b">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现在我们知道了这棵二叉树的根节点和左子树,右子树的根节点,接下来就要确定左子树剩下的F节点是在左子树的左边还是右边&lt;/p>
&lt;/li>
&lt;li>
&lt;p>首先我们假设F节点在B节点的左侧&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/c.png" alt="c">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用先序序列ABFCDE验证:先访问根节点(A),先序遍历左子树(BF),左子树先访问根节点(B),再遍历左子树左节点(F).先序遍历看起来没问题,那么我们用中序序列BFADCE去验证下:首先访问左子树(BF),左子树中先访问左节点(F),再访问左子树根节点(B) 貌似不对 因为这样 中序遍历应该是以 FB开头 而不是 BF开头,那么将F节点放到B节点右侧&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/d.png" alt="d">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这回左子树就对了 先序遍历:先访问根节点A,再访问左子树,左子树先访问根节点B,然后要访问左节点,但是左节点没有,所以继续访问,访问右节点F. 中序遍历:先访问左子树,然后是左子树的左节点,依然为空,则继续访问左子树根节点B,然后访问左子树右节点F&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用同样的方法可以确定右子树,右子树的根节点为C 中序遍历右子树为DCE 则 先访问右子树左节点D 然后访问右子树根节点C 最后访问右子树右节点E. 整个二叉树如图:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%B7%B2%E7%9F%A5%E5%85%88%E5%BA%8F%E6%88%96%E5%90%8E%E7%BB%AD%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E7%94%BB%E5%87%BA%E4%BA%8C%E5%8F%89%E6%A0%91%E5%8F%8A%E5%90%8E%E7%BB%AD%E6%88%96%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86/e.png" alt="e">&lt;/p>
&lt;p>这道题正确答案为 C&lt;/p></description></item><item><title>K2路由器V22.6.507.43及V22.6.506.28以前版本刷breed,潘多拉不死鸟老毛桃教程</title><link>https://blog.itning.top/post/2018/05/04/k2%E8%B7%AF%E7%94%B1%E5%99%A8v22.6.507.43%E5%8F%8Av22.6.506.28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/</link><pubDate>Fri, 04 May 2018 10:42:32 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/04/k2%E8%B7%AF%E7%94%B1%E5%99%A8v22.6.507.43%E5%8F%8Av22.6.506.28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/</guid><description>&lt;p>原帖地址:&lt;a href="http://bbs.zol.com.cn/techbbs/d16_74689.html">斐讯k2_V22.6.507.43降级刷入Breed Web&lt;/a> &lt;a href="http://www.right.com.cn/forum/thread-255017-1-1.html">路由器刷breed Web控制台助手v4.8版本 &lt;/a>&lt;/p>
&lt;p>在此感谢 &lt;a href="http://www.right.com.cn/forum/forum.php">恩山无线论坛&lt;/a>小伙伴们&lt;/p>
&lt;p>附件地址 : &lt;a href="https://guanghou-my.sharepoint.com/:f:/g/personal/wangning_get365_pw/EmX6aycUdRJBmZkdVMVTEMYBo587Xs02LNL8PrRYDGxUWA?e=V67HTT">K2最新固件V22.6.507.43降级刷入breed的方法&lt;/a> &lt;a href="https://guanghou-my.sharepoint.com/:f:/g/personal/wangning_get365_pw/Es3gpId4ZB1ClvQU32gQCIYBenrklWlDSfXn-tSbPt0D_A?e=rHSNNc">路由器刷breed Web控制台助手v4.8版本&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="版本统一到22650628">版本统一到22.6.506.28&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>首先下载 K2_V22.6.506.28.bin 到电脑中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进入路由器后台 默认:192.168.2.1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 高级设置&amp;ndash;&amp;gt;系统设置&amp;ndash;&amp;gt;手动升级&amp;ndash;&amp;gt;浏览 把下载的 K2_V22.6.506.28.bin文件选中&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 升级按钮&lt;/p>
&lt;/li>
&lt;li>
&lt;p>升级成功后重新登陆路由器 检查版本号是否是 V22.6.506.28&lt;/p>
&lt;p>&lt;strong>如果遇到固件非法等问题 请先恢复出厂设置!!!&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="打开telnet">打开Telnet&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>用网线将电脑和路由器连接起来,连接路由器一端插到路由器LAN口中(注意不要插到WAN口)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开电脑 输入 192.168.2.1 看看能不能打开 如果能打开就说明网络连接正常(打不开应该等待5分钟后再试)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>电脑打开 RoutAckProV1B2.exe 这个应用程序
&lt;img src="https://blog.itning.top/images/2018-05-04-K2%E8%B7%AF%E7%94%B1%E5%99%A8V22-6-507-43%E5%8F%8AV22-6-506-28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed-%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/a.jpg" alt="a">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>点击 打开Telnet 这个时候 白框内显示 成功 则 打开 Telnet 成功&lt;/p>
&lt;h2 id="打开控制台助手-开始刷breed">打开控制台助手 开始刷breed&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>电脑 &lt;strong>用鼠标右键&lt;/strong> 点击 路由器刷breed Web控制台助手v4.8版本.exe 这个应用程序 出现的菜单 选择 &lt;strong>以管理员身份运行&lt;/strong> 运行程序如图:&lt;/p>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-K2%E8%B7%AF%E7%94%B1%E5%99%A8V22-6-507-43%E5%8F%8AV22-6-506-28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed-%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/b.jpg" alt="b">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击 开始刷机 按钮 进行刷机&lt;/p>
&lt;p>&lt;strong>注意:这个时候电脑应该将杀毒,防火墙,安全卫士全部关闭,否则可能失败,失败多试几次&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷 成功后 路由器断电 手动按住 路由器屁股后边按钮 插电 电脑浏览器输入 192.168.1.1 如果进入到 breed控制台 则成功&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="刷入固件">刷入固件&lt;/h2>
&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-04-K2%E8%B7%AF%E7%94%B1%E5%99%A8V22-6-507-43%E5%8F%8AV22-6-506-28%E4%BB%A5%E5%89%8D%E7%89%88%E6%9C%AC%E5%88%B7breed-%E6%BD%98%E5%A4%9A%E6%8B%89%E4%B8%8D%E6%AD%BB%E9%B8%9F%E8%80%81%E6%AF%9B%E6%A1%83%E6%95%99%E7%A8%8B/c.jpg" alt="c">&lt;/p></description></item><item><title>JAVA JMS Java消息服务（Java Message Service） 的实现ActiveMQ</title><link>https://blog.itning.top/post/2018/05/03/java-jms-java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1java-message-service-%E7%9A%84%E5%AE%9E%E7%8E%B0activemq/</link><pubDate>Thu, 03 May 2018 12:06:31 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/03/java-jms-java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1java-message-service-%E7%9A%84%E5%AE%9E%E7%8E%B0activemq/</guid><description>&lt;blockquote>
&lt;p>JMS即Java消息服务（Java Message Service）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
JMS是一种与厂商无关的 API，用来访问消息收发系统消息。它类似于JDBC(Java Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本(TextMessage)、可序列化的对象 (ObjectMessage)、属性集合 (MapMessage)、字节流 (BytesMessage)、原始值流 (StreamMessage)，还有无有效负载的消息 (Message)。&lt;/p>
&lt;/blockquote>
&lt;h2 id="java消息服务应用程序结构支持两种模型">Java消息服务应用程序结构支持两种模型&lt;/h2>
&lt;h3 id="点对点或队列模型">点对点或队列模型&lt;/h3>
&lt;p>在点对点或队列模型下，一个生产者向一个特定的队列发布消息，一个消费者从该队列中读取消息。这里，生产者知道消费者的队列，并直接将消息发送到消费者的队列。
&lt;img src="https://blog.itning.top/images/2018-05-03-JAVA-JMS-Java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1%EF%BC%88Java-Message-Service%EF%BC%89-%E7%9A%84%E5%AE%9E%E7%8E%B0ActiveMQ/a.png" alt="点对点或队列模型">
这种模式被概括为：
只有一个消费者将获得消息
生产者不需要在接收者消费该消息期间处于运行状态，接收者也同样不需要在消息发送时处于运行状态。
每一个成功处理的消息都由接收者签收
###发布者/订阅者模型
发布者/订阅者模型支持向一个特定的消息主题发布消息。0或多个订阅者可能对接收来自特定消息主题的消息感兴趣。在这种模型下，发布者和订阅者彼此不知道对方。这种模式好比是匿名公告板。
&lt;img src="https://blog.itning.top/images/2018-05-03-JAVA-JMS-Java%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1%EF%BC%88Java-Message-Service%EF%BC%89-%E7%9A%84%E5%AE%9E%E7%8E%B0ActiveMQ/b.png" alt="发布者/订阅者模型">
这种模式被概括为：
多个消费者可以获得消息
在发布者和订阅者之间存在时间依赖性。发布者需要建立一个订阅（subscription），以便客户能够订阅。订阅者必须保持持续的活动状态以接收消息，除非订阅者建立了持久的订阅。在那种情况下，在订阅者未连接时发布的消息将在订阅者重新连接时重新发布。&lt;/p>
&lt;h2 id="activemq">ActiveMQ&lt;/h2>
&lt;h3 id="安装配置启动">安装,配置,启动&lt;/h3>
&lt;blockquote>
&lt;p>官方下载页面: &lt;a href="http://activemq.apache.org/download.html">http://activemq.apache.org/download.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>解压后 在conf目录中 activemq.xml 这个XML 文件
将 0.0.0.0 改成 localhost&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;transportConnectors&amp;gt;
&amp;lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&amp;gt;
&amp;lt;transportConnector name=&amp;#34;openwire&amp;#34; uri=&amp;#34;tcp://localhost:61616?maximumConnections=1000&amp;amp;amp;wireFormat.maxFrameSize=104857600&amp;#34;/&amp;gt;
&amp;lt;transportConnector name=&amp;#34;amqp&amp;#34; uri=&amp;#34;amqp://localhost:5672?maximumConnections=1000&amp;amp;amp;wireFormat.maxFrameSize=104857600&amp;#34;/&amp;gt;
&amp;lt;transportConnector name=&amp;#34;stomp&amp;#34; uri=&amp;#34;stomp://localhost:61613?maximumConnections=1000&amp;amp;amp;wireFormat.maxFrameSize=104857600&amp;#34;/&amp;gt;
&amp;lt;transportConnector name=&amp;#34;mqtt&amp;#34; uri=&amp;#34;mqtt://localhost:1883?maximumConnections=1000&amp;amp;amp;wireFormat.maxFrameSize=104857600&amp;#34;/&amp;gt;
&amp;lt;transportConnector name=&amp;#34;ws&amp;#34; uri=&amp;#34;ws://localhost:61614?maximumConnections=1000&amp;amp;amp;wireFormat.maxFrameSize=104857600&amp;#34;/&amp;gt;
&amp;lt;/transportConnectors&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>windows 环境 在 bin 目录中 启动 activemq.bat 这个脚本
5.10 版本后&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> .\activemq start
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>5.9 之前&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"> .\activemq
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>JAVA API : &lt;a href="https://github.com/itning/BigData/tree/master/src/main/java/top/itning/activemq">https://github.com/itning/BigData/tree/master/src/main/java/top/itning/activemq&lt;/a>&lt;/p></description></item><item><title>单例设计模式</title><link>https://blog.itning.top/post/2018/05/02/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 02 May 2018 19:15:18 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/02/%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p>解决一个类在内存中只存在一个对象，想要保证对象的唯一。&lt;/p>
&lt;ol>
&lt;li>为了避免其他程序过多的建立该类对象。禁止其他程序建立该类对象。&lt;/li>
&lt;li>为了其他程序可以访问该类对象，在本类中自定义一个对象。&lt;/li>
&lt;li>方便其他程序对自定义类的对象的访问，对外提供一些访问方式。&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;strong>饿汉单例设计模式&lt;/strong>
1. 私有化构造函数。
2. 声明本类的引用类型变量，并且使用该变量指向本类对象。
3. 提供一个公共静态的方法获取本类的对象。&lt;/p>
&lt;p>&lt;strong>懒汉单例设计模式：&lt;/strong>
1. 私有化构造函数。
2. 声明本类的引用类型变量，但是不要创建对象，
3. 提供公共静态 的方法获取本类 的对象，获取之前先判断是否已经创建了本类 对象
，如果已经创建了，那么直接返回对象即可，如果还没有创建，那么先创建本类的对象，
然后再返回。&lt;/p>
&lt;p>推荐使用： &lt;strong>饿汉单例设计模式&lt;/strong>。 因为懒汉单例设计模式会存在线程安全问题，目前还不能保证一类在内存中只有一个对象。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Single&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Single&lt;/span>&lt;span class="o">();&lt;/span> &lt;span class="c1">// 恶汉式
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">Single&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">class&lt;/span> &lt;span class="nc">Single2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single2&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 懒汉
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="nf">Single2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single2&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Single2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>懒汉单例设计模式线程安全模式解决方案&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-JAVA" data-lang="JAVA">
&lt;span class="c1">//懒汉单例设计模式
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Single&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="c1">// 声明本类引用类型变量，但是不要创建对象。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="c1">//私有化构造函数
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="nf">Single&lt;/span>&lt;span class="o">(){}&lt;/span>
&lt;span class="c1">// 声明一个公共静态的方法获取本类的对象
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">Single&lt;/span> &lt;span class="nf">getInstance&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;锁&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">){&lt;/span>
&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Single&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>学习笔记（3）-指令（Directive)</title><link>https://blog.itning.top/post/2018/05/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%8C%87%E4%BB%A4directive/</link><pubDate>Wed, 02 May 2018 18:09:14 +0800</pubDate><guid>https://blog.itning.top/post/2018/05/02/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03-%E6%8C%87%E4%BB%A4directive/</guid><description>&lt;h2 id="指令directive">指令（Directive）&lt;/h2>
&lt;blockquote>
&lt;p>AngularJS 有一套完整的、可扩展的、用来帮助 Web 应用开发的指令集
在 DOM 编译期间，和 HTML 关联着的指令会被检测到，并且被执行
在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等
简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作
HTML5 允许扩展的（自制的）属性，以 data- 开头。
AngularJS 属性以 ng- 开头，但是可以使用 data-ng- 来让网页对 HTML5 有效。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="http://www.angularjs.net.cn/api/ng/directive/">指令API文档&amp;raquo;&amp;gt;&lt;/a>&lt;/p>
&lt;h3 id="ng-app">ng-app&lt;/h3>
&lt;ol>
&lt;li>ng-app 指令用于&lt;strong>告诉 AngularJS 应用当前这个元素是根元素。&lt;/strong>&lt;/li>
&lt;li>所有 AngularJS 应用都&lt;strong>必须要一个根元素&lt;/strong>。&lt;/li>
&lt;li>HTML文档中&lt;strong>只允许有一个 ng-app 指令&lt;/strong>，如有多个 ng-app 指令，则&lt;strong>只有第一个会被使用&lt;/strong>。&lt;/li>
&lt;li>常放在html标签上&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;zh-CN&amp;#34; ng-app=&amp;#34;MyApp&amp;#34;&amp;gt; &amp;lt;!--常放于此--&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;
&amp;lt;title&amp;gt;ng-app 指令&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script&amp;gt;
var myp = angular.module(&amp;#34;MyApp&amp;#34;, []);
myp.controller(&amp;#39;HelloController&amp;#39;, [&amp;#39;$scope&amp;#39;,function($scope) {
$scope.p = {name: &amp;#39;MyName&amp;#39;};
}
]);
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ng-repeat">ng-repeat&lt;/h3>
&lt;ol>
&lt;li>ng-repeat指令用来编译一个数组重复创建当前元素&lt;/li>
&lt;li>&lt;strong>元素如果相同可以使用 &lt;em>item in items track by $index&lt;/em>&lt;/strong>&lt;/li>
&lt;li>循环中的特殊变量，包括：&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">变量&lt;/th>
&lt;th align="center">类型&lt;/th>
&lt;th align="left">描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">$index&lt;/td>
&lt;td align="center">number&lt;/td>
&lt;td align="left">当前索引。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">$first&lt;/td>
&lt;td align="center">boolean&lt;/td>
&lt;td align="left">当循环的对象存在第一项时为true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">$middle&lt;/td>
&lt;td align="center">boolean&lt;/td>
&lt;td align="left">当循环的对象存在中间项时为true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">$last&lt;/td>
&lt;td align="center">boolean&lt;/td>
&lt;td align="left">当循环对象存在最后一项时为true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">$even&lt;/td>
&lt;td align="center">boolean&lt;/td>
&lt;td align="left">当前索引是偶数则为true，否则为false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">$odd&lt;/td>
&lt;td align="center">boolean&lt;/td>
&lt;td align="left">当前索引是奇数则为true，否则为false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span> &lt;span class="na">ng-app&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;myApp&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">ng-controller&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;ListController&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="c">&amp;lt;!-- ng-repeat 会遍历数组中每一个元素，分别创建li --&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">ng-repeat&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;item in items&amp;#34;&lt;/span> &lt;span class="na">data-id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{{item.id}}&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{item.name}}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;../angular/angular.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="nx">angular&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">module&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;myApp&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[])&lt;/span>
&lt;span class="p">.&lt;/span>&lt;span class="nx">controller&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ListController&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;$scope&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">$scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">$scope&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;id:&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}]);&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ng-bind">ng-bind&lt;/h3>
&lt;p>ng-bind指令在绑定的值包含HTML时&lt;strong>会转义&lt;/strong>，为了安全（跨站脚本攻击）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;body ng-app ng-init=&amp;#34;username=&amp;#39;&amp;lt;h1&amp;gt;shit&amp;lt;/h1&amp;gt;&amp;#39;&amp;#34;&amp;gt;
&amp;lt;!-- &amp;lt;strong&amp;gt;{{username}}&amp;lt;/strong&amp;gt; --&amp;gt;
&amp;lt;strong ng-bind=&amp;#34;username&amp;#34;&amp;gt;&amp;lt;/strong&amp;gt;
&amp;lt;script src=&amp;#34;../angular/angular.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ng-bind-html">ng-bind-html&lt;/h3>
&lt;blockquote>
&lt;p>ng-bind-html 指令是通一个安全的方式将内容绑定到 HTML 元素上。
当你想让 AngularJS 在你的应用中写入 HTML，你就需要去检测一些危险代码。通过在应用中引入 &amp;ldquo;angular-santize.js&amp;rdquo; 模块，使用 ngSanitize 函数来检测代码的安全性。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;body ng-app=&amp;#34;myApp&amp;#34; ng-init=&amp;#34;username=&amp;#39;&amp;lt;h1&amp;gt;shit&amp;lt;/h1&amp;gt;&amp;#39;&amp;#34;&amp;gt;
&amp;lt;!-- &amp;lt;strong&amp;gt;{{username}}&amp;lt;/strong&amp;gt; --&amp;gt;
&amp;lt;!-- ng-bind指令在绑定的值包含HTML时会转义，为了安全（跨站脚本攻击） --&amp;gt;
&amp;lt;strong ng-bind-html=&amp;#34;username&amp;#34;&amp;gt;&amp;lt;/strong&amp;gt;
&amp;lt;script src=&amp;#34;../angular/angular.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;#34;../angular-sanitize/angular-sanitize.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
// 使用自定义的模块才可以依赖别的包里面定义模块，angular定义的默认模块没有依赖任何
angular.module(&amp;#39;myApp&amp;#39;, [&amp;#39;ngSanitize&amp;#39;]);
&amp;lt;/script&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ng-class">ng-class&lt;/h3>
&lt;blockquote>
&lt;p>ng-class 指令用于给 HTML 元素动态绑定一个或多个 CSS 类。
ng-class 指令的值可以是字符串，对象，或一个数组。
如果是字符串，多个类名使用空格分隔。
如果是对象，需要使用 key-value 对，key 是一个布尔值，value 为你想要添加的类名。只有在 key 为 true 时类才会被添加。
如果是数组，可以由字符串或对象组合组成，数组的元素可以是字符串或对象。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;ul class=&amp;#34;messages&amp;#34;&amp;gt;
&amp;lt;li ng-repeat=&amp;#34;item in messages track by $index&amp;#34; ng-class=&amp;#34;{red:item.read}&amp;#34;&amp;gt;
{{item.content}}
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ng-showng-hide">ng-show/ng-hide&lt;/h3>
&lt;ol>
&lt;li>ng-show 指令在表达式为 true 时显示指定的 HTML 元素，否则隐藏指定的 HTML 元素。&lt;/li>
&lt;li>ng-hide 指令在表达式为 true 时隐藏 HTML 元素。&lt;/li>
&lt;li>ng-hide 是 AngularJS 的预定义类，设置元素的 display 为 none。&lt;/li>
&lt;/ol>
&lt;h3 id="ng-if">ng-if&lt;/h3>
&lt;blockquote>
&lt;p>ng-if 指令用于在表达式为 false 时移除 HTML 元素。
如果 if 语句执行的结果为 true，会添加移除元素，并显示。
ng-if 指令不同于 ng-hide， ng-hide 隐藏元素，而 ng-if 是从 DOM 中移除元素。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">保留 HTML:
&amp;lt;input type=&amp;#34;checkbox&amp;#34; ng-model=&amp;#34;myVar&amp;#34; ng-init=&amp;#34;myVar = true&amp;#34;&amp;gt;
&amp;lt;div ng-if=&amp;#34;myVar&amp;#34;&amp;gt;
&amp;lt;h1&amp;gt;Welcome&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Welcome to my home.&amp;lt;/p&amp;gt;
&amp;lt;hr&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a href="http://www.angularjs.net.cn/demo/117" title="AngularJs在线测试">尝试一下&amp;raquo;&amp;gt;&lt;/a>&lt;/p>
&lt;h3 id="ng-hrefng-src">ng-href/ng-src&lt;/h3>
&lt;blockquote>
&lt;p>ng-href 指令覆盖了原生的 &amp;lt;a&amp;gt; 元素 href 属性。
如果在 href 的值中有 AngularJS 代码，则需要使用 ng-href 而不是 href。
ng-href 指令确保了链接是正常的，即使在 AngularJS 执行代码前点击链接。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>ng-src 指令覆盖了 &amp;lt;img&amp;gt; 元素的 src 属性。
如果你使用了 AngularJS 代码设置图片地址，请使用 ng-src 指令替代 src 属性。
ng-src 指令确保的 AngularJS 代码执行前不显示图片。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;img ng-src=&amp;#34;{{imgUrl}}&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;
&amp;lt;a ng-href=&amp;#34;{{imgUrl}}&amp;#34;&amp;gt;跳转到图片&amp;lt;/a&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Docker Dockerfile 创建镜像</title><link>https://blog.itning.top/post/2018/03/31/docker-dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</link><pubDate>Sat, 31 Mar 2018 18:53:17 +0800</pubDate><guid>https://blog.itning.top/post/2018/03/31/docker-dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</guid><description>&lt;blockquote>
&lt;p>从刚才的 docker commit 的学习中，我们可以了解到，镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback"># 第一行必须指定基于的基础镜像
FROM centos
#维护者信息
MAINTAINER itning itning@itning.top
#注意压缩文件要和Dockerfile文件在同一文件夹下
#ADD指令自动将压缩文件解压为目录
ADD jdk-8u152-linux-x64.tar.gz /usr/local
ADD apache-tomcat-9.0.6.tar.gz /usr/local
#设置环境变量
ENV PATH /usr/local/jdk-8u152-linux-x64/bin:$PATH
#运行指令
RUN /usr/local/apache-tomcat-9.0.6/bin/startup.sh
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://blog.itning.top/images/2018-05-03-Docker-Dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/a.jpg" alt="a">
&lt;img src="https://blog.itning.top/images/2018-05-03-Docker-Dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/b.jpg" alt="b">
&lt;img src="https://blog.itning.top/images/2018-05-03-Docker-Dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/c.jpg" alt="c">
&lt;img src="https://blog.itning.top/images/2018-05-03-Docker-Dockerfile-%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/d.jpg" alt="d">&lt;/p></description></item><item><title>Docker 简介 安装 启动 常用命令</title><link>https://blog.itning.top/post/2018/03/30/docker-%E7%AE%80%E4%BB%8B-%E5%AE%89%E8%A3%85-%E5%90%AF%E5%8A%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 30 Mar 2018 21:04:43 +0800</pubDate><guid>https://blog.itning.top/post/2018/03/30/docker-%E7%AE%80%E4%BB%8B-%E5%AE%89%E8%A3%85-%E5%90%AF%E5%8A%A8-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;h2 id="简介">简介&lt;/h2>
&lt;blockquote>
&lt;p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制[1]。Docker利用Linux核心中的资源分脱机制，例如cgroups，以及Linux核心名字空间（name space），来创建独立的软件容器（containers）。这可以在单一Linux实体下运作，避免引导一个虚拟机造成的额外负担[2]。Linux核心对名字空间的支持完全隔离了工作环境中应用程序的视野，包括进程树、网络、用户ID与挂载文件系统，而核心的cgroup提供资源隔离，包括CPU、内存、block I/O与网络。从0.9版本起，Dockers在使用抽象虚拟是经由libvirt的LXC与systemd - nspawn提供界面的基础上，开始包括libcontainer库做为以自己的方式开始直接使用由Linux核心提供的虚拟化的设施，依据行业分析公司“451研究”：“Dockers是有能力打包应用程序及其虚拟容器，可以在任何Linux服务器上运行的依赖性工具，这有助于实现灵活性和便携性，应用程序在任何地方都可以运行，无论是公有云、私有云、单机等。”&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装centos中">安装(Centos中)&lt;/h2>
&lt;p>&lt;strong>切换到root&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">yum -y install docker
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="启动">启动&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">systemctl enable docker # 开机自动启动docker
systemctl start docker # 启动docker
systemctl restart docker # 重启dokcer
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="常用命令">常用命令&lt;/h2>
&lt;h3 id="1-镜像images">1. 镜像(IMAGES)&lt;/h3>
&lt;h4 id="11-获取镜像">1.1 获取镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker pull NAME[:TAG]
例:
docker pull centos:latest
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="12-查看镜像信息">1.2 查看镜像信息&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker images # 列出本机上所有映像
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="13-搜索镜像">1.3 搜索镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker search ImageName
例:
docker search centos
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="14-删除镜像">1.4 删除镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker rmi 标签/ID
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="15-保存镜像">1.5 保存镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker save -o xxx.tar ImageName
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="16-读取镜像">1.6 读取镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker load --input xxx.tar
docker load &amp;lt; xxx.tar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="17-上传镜像">1.7 上传镜像&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker push ImageName
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-容器container">2. 容器(CONTAINER)&lt;/h3>
&lt;blockquote>
&lt;p>参数说明:
-t 让Docker分配一个伪终端并绑定到容器的标准输入上
-i 让容器的标准输入保持打开&lt;/p>
&lt;/blockquote>
&lt;h4 id="21-创建容器">2.1 创建容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker create -it centos #创建一个基于centos镜像的容器
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="22-启动容器">2.2 启动容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker start CONTAINERID
docker restart CONTAINERID #重启容器
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="23-新建并启动容器">2.3 新建并启动容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -it centos
docker run -it --name mycentos centos #指定容器名称为mycentos
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="24-守护态运行容器">2.4 守护态运行容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -d tomcat #后台运行tomcat镜像的容器
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="25-停止容器">2.5 停止容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker stop CONTAINERID
docker kill CONTAINERID #强行停止
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="26-删除容器">2.6 删除容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker rm CONTAINERID
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="27-进入容器">2.7 进入容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker attach CONTAINER_NAME #通过容器名来进入容器 使用Ctrl+P Ctrl+Q来退出
docker exec -ti CONTAINERID /bin/bash #根据容器ID进入容器并启动bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 NSENTER 进入容器 脚本:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nv">CNAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;span class="nv">CPID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>docker inspect --format &lt;span class="s2">&amp;#34;{{.State.Pid}}&amp;#34;&lt;/span> &lt;span class="nv">$CNAME&lt;/span>&lt;span class="k">)&lt;/span>
nsenter --target &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$CPID&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --mount --uts --ipc --net --pid
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">./in.sh CONTAINER_NAME/ID
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="28-查看容器">2.8 查看容器&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker ps #列出正在运行的容器
docker ps -a #列出所有容器
docker ps -l #列出最新创建的容器
docker inspect CONTAINERID #列出容器的详细信息(JSON格式)
其中 inspect 可以使用 -format 参数指定显示JSON中的某项信息 例:
docker inspect -f &amp;#34;{{.State.Pid}}&amp;#34; c4a2097de5c1 #获取容器PID
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="29-设置容器名称">2.9 设置容器名称&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -it --name mytomcat tomcat
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-网络">3. 网络&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -d -P --name mytomcat tomcat
使用 -P (大写) 参数时,会将容器内端口映射到主机的随机端口上
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -d -p 80:8080 --name mytomcat tomcat
使用 -p (小写) 参数时,冒号(:)左边为主机端口,右边为容器端口 即
将容器的8080端口映射到主机的80端口上
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-数据卷">4. 数据卷&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -d -P -v /home/ning/data:/data --name mytomcat tomcat
将 /home/ning/data映射到容器 /data 上
docker run -d -P -v /home/ning/data:/data:ro --name mytomcat tomcat
加上 :ro 参数 使容器/data 目录为只读
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker run -d -P -volumes-from mytomcat --name tom1 tomcat
tom1容器或mytomcat容器任何一方对/data目录的修改都会互相看到
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="5-日志logs">5. 日志(LOGS)&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker logs [-f][-t][--tail] CONTAINER_NAME
-f --follows=true | false 默认false 是否一直跟踪日志变化并返回结果
-t --timestamps=true | false 默认false 是否在返回的结果上加上时间戳
--tail=&amp;#34;all&amp;#34; 返回结尾处多少数量的日志;不指定默认返回所有日志
例: --tail 10 #只显示最新的10条日志
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="6-查看容器进程">6. 查看容器进程&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">docker top CONTAINER_NAME/ID
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Web.xml</title><link>https://blog.itning.top/post/2017/04/21/web.xml/</link><pubDate>Fri, 21 Apr 2017 13:10:59 +0800</pubDate><guid>https://blog.itning.top/post/2017/04/21/web.xml/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;!DOCTYPE web-app PUBLIC
&amp;#34;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&amp;#34;
&amp;#34;http://java.sun.com/dtd/web-app_2_3.dtd&amp;#34; &amp;gt;
&amp;lt;web-app&amp;gt;
&amp;lt;!-- spring --&amp;gt;
&amp;lt;context-param&amp;gt;
&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
&amp;lt;param-value&amp;gt;classpath:applicationContext.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/context-param&amp;gt;
&amp;lt;!-- 编码过滤器 --&amp;gt;
&amp;lt;filter&amp;gt;
&amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt;
&amp;lt;filter-class&amp;gt;
org.springframework.web.filter.CharacterEncodingFilter
&amp;lt;/filter-class&amp;gt;
&amp;lt;init-param&amp;gt;
&amp;lt;param-name&amp;gt;encoding&amp;lt;/param-name&amp;gt;
&amp;lt;param-value&amp;gt;UTF-8&amp;lt;/param-value&amp;gt;
&amp;lt;/init-param&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;filter-mapping&amp;gt;
&amp;lt;filter-name&amp;gt;CharacterEncodingFilter&amp;lt;/filter-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
&amp;lt;/filter-mapping&amp;gt;
&amp;lt;listener&amp;gt;
&amp;lt;listener-class&amp;gt;org.springframework.web.context.ContextLoaderListener&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;DispatcherServlet&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;org.springframework.web.servlet.DispatcherServlet&amp;lt;/servlet-class&amp;gt;
&amp;lt;init-param&amp;gt;
&amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt;
&amp;lt;param-value&amp;gt;classpath:spring-mvc.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/init-param&amp;gt;
&amp;lt;/servlet&amp;gt;
&amp;lt;servlet-mapping&amp;gt;
&amp;lt;servlet-name&amp;gt;DispatcherServlet&amp;lt;/servlet-name&amp;gt;
&amp;lt;url-pattern&amp;gt;/&amp;lt;/url-pattern&amp;gt;
&amp;lt;/servlet-mapping&amp;gt;
&amp;lt;welcome-file-list&amp;gt;
&amp;lt;welcome-file&amp;gt;index.jsp&amp;lt;/welcome-file&amp;gt;
&amp;lt;/welcome-file-list&amp;gt;
&amp;lt;/web-app&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>基于springframework中HandlerExceptionResolver接口的统一异常处理</title><link>https://blog.itning.top/post/2017/03/29/%E5%9F%BA%E4%BA%8Espringframework%E4%B8%ADhandlerexceptionresolver%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Wed, 29 Mar 2017 17:49:49 +0800</pubDate><guid>https://blog.itning.top/post/2017/03/29/%E5%9F%BA%E4%BA%8Espringframework%E4%B8%ADhandlerexceptionresolver%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>&lt;blockquote>
&lt;p>系统中异常类型有哪些？
包括预期可能发生的异常、运行时异常（RuntimeException），运行时异常不是预期会发生的。
针对预期可能发生的异常，在代码手动处理异常可以try/catch捕获，可以向上抛出。
针对运行时异常，只能通过规范代码质量、在系统测试时详细测试等排除运行时异常。&lt;/p>
&lt;/blockquote>
&lt;h4 id="1定义异常类继承exception">1.定义异常类继承Exception&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">//登录异常（账号不存在 密码错误..）
public class LoginException extends Exception{
private String errorMessage;
public LoginException(String message) {
super(message);
this.errorMessage=message;
}
public String getErrorMessage() {
return errorMessage;
}
public void setErrorMessage(String errorMessage) {
this.errorMessage = errorMessage;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="2异常处理统一异常处理器实现handlerexceptionresolver接口">2.异常处理（统一异常处理器实现HandlerExceptionResolver接口）&lt;/h4>
&lt;blockquote>
&lt;p>前端控制器DispatcherServlet在进行HandlerMapping、调用HandlerAdapter执行Handler过程中，如果遇到异常，进行异常处理。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">public class ExceptionResolver implements HandlerExceptionResolver{
public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) {
//打印异常信息
e.printStackTrace();
//所有异常类声明
LoginException loginException;
DefaultException defaultException;
//
String errorMessage;
if(e instanceof LoginException){
loginException=(LoginException)e;
errorMessage=loginException.getErrorMessage();
}
else {
defaultException = new DefaultException(&amp;#34;未知错误&amp;#34;);
errorMessage=defaultException.getErrorMessage();
}
httpServletRequest.setAttribute(&amp;#34;errorMessage&amp;#34;,errorMessage);
try {
//转发到错误页面
httpServletRequest.getRequestDispatcher(&amp;#34;error.jsp&amp;#34;).forward(httpServletRequest,httpServletResponse);
} catch (ServletException e1) {
e1.printStackTrace();
} catch (IOException e1) {
e1.printStackTrace();
}
return new ModelAndView();
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="3在springmvc配置文件中配置异常处理bean">3.在SpringMVC配置文件中配置异常处理bean&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;bean class=&amp;#34;com.ning.exception.ExceptionResolver&amp;#34;/&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="4在可能发生异常的位置抛出自定义异常">4.在可能发生异常的位置抛出自定义异常&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">throw new LoginException(&amp;#34;登陆失败&amp;#34;);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>根据不同的异常类型进行异常处理。
系统自定义异常类，在controller方法中、service方法中手动抛出此类异常。
针对系统自定义的异常，就可以直接从异常类中获取异常信息，将异常处理在错误页面展示。
针对非自定义异常，对这类重新构造成一个自定义异常，异常信息为“未知错误”，此类错误需要在系统测试阶段去排除。
在统一异常处理器中实现上边的逻辑。&lt;/p>
&lt;/blockquote></description></item><item><title>C++ 构造函数 笔记</title><link>https://blog.itning.top/post/2016/10/06/c-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 06 Oct 2016 21:34:05 +0800</pubDate><guid>https://blog.itning.top/post/2016/10/06/c-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-%E7%AC%94%E8%AE%B0/</guid><description>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="c1">//main.cpp
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;
&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;ClassT.h&amp;#34;
&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">Anmial&lt;/span> &lt;span class="n">pig&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s">&amp;#34;哈哈&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">pig&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Anmial&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">run&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; Anmial类中的run()方法&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">i_&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">s_&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Anmial&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">eat&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; Anmial类中的eat()方法&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Anmial&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">jump&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; Anmial类中的jump()方法&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="n">Anmial&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34; Anmial类中的sleep()方法&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Anmial&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Anmial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//构造函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">i_&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">s_&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;构造函数被调用&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">Anmial&lt;/span>&lt;span class="o">::~&lt;/span>&lt;span class="n">Anmial&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="c1">//析构函数
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;析构函数被调用&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="c1">//ClassT.h
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="cp">#ifndef CLASST_H
&lt;/span>&lt;span class="cp">#define CLASST_H
&lt;/span>&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;string&amp;gt;
&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Anmial&lt;/span>
&lt;span class="p">{&lt;/span>
&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//私有
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="c1">//公有
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Anmial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="o">~&lt;/span>&lt;span class="n">Anmial&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">jump&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">eat&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sleep&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="cp">#endif &lt;/span>&lt;span class="c1">// CLASST_H
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ClassTest.exe&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">构造函数被调用
Anmial类中的run&lt;span class="o">()&lt;/span>方法
3哈哈
析构函数被调用
Process returned &lt;span class="m">0&lt;/span> &lt;span class="o">(&lt;/span>0x0&lt;span class="o">)&lt;/span> execution &lt;span class="nb">time&lt;/span> : 0.069 s
Press any key to &lt;span class="k">continue&lt;/span>.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>