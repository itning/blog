<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on itning</title><link>https://blog.itning.top/tags/jvm/</link><description>Recent content in JVM on itning</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 Apr 2020 11:40:52 +0800</lastBuildDate><atom:link href="https://blog.itning.top/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM系列5 执行子系统</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</link><pubDate>Fri, 10 Apr 2020 11:40:52 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%975-%E6%89%A7%E8%A1%8C%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid><description>&lt;blockquote>
&lt;p>字节码执行引擎&lt;/p>
&lt;/blockquote>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>执行引擎是Java虚拟机非常最核心的部分，对于物理级的执行引擎是直接建立在处理器、硬件、指令集合操作系统层面，而虚拟机执行引擎则是由自行定制的指令集与执行引擎的结构体系。执行引擎在执行Java会有解释执行(通过解释器)和编译执行(通过JIT生成的本地代码)两种选择，对于Android ART又多了一种提前编译器(AOT)。&lt;/p></description></item><item><title>JVM系列4 类的加载</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</link><pubDate>Fri, 10 Apr 2020 11:33:02 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%974-%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD/</guid><description>&lt;h2 id="一概述">一、概述&lt;/h2>
&lt;p>本文主要讲述虚拟机如何把 Class文件加载到内存的过程。校验、转换解析和初始化，最终形成可被虚拟机使用的Java类型，这就是虚拟机的类加载机制。类型的加载、连接和初始化都是在程序运行期间完成，这样做的优劣势，如下：&lt;/p>
&lt;ul>
&lt;li>优势：提高Java程序的灵活性，Java动态扩展的语言特性就是依赖运行期动态加载和动态连接。当面向接口的应用程序，可以等到运行时指定实现类；可以通过类加载器，让程序运行时加载一个二进制流作为程序一部分。&lt;/li>
&lt;li>劣势：增加类加载的性能开销。&lt;/li>
&lt;/ul></description></item><item><title>JVM系列3 字节码指令</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</link><pubDate>Fri, 10 Apr 2020 11:21:18 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%973-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</guid><description>&lt;blockquote>
&lt;p>介绍java虚拟机的指令功能，至少能阅读java代码生成的字节码指令含义&lt;/p>
&lt;/blockquote>
&lt;h1 id="一概述">一、概述&lt;/h1>
&lt;p>Java虚拟机采用基于栈的架构，其指令由操作码和操作数组成。&lt;/p>
&lt;ul>
&lt;li>操作码：一个字节长度(0~255)，意味着指令集的操作码个数不能操作256条。&lt;/li>
&lt;li>操作数：一条指令可以有零或者多个操作数，且操作数可以是1个或者多个字节。编译后的代码没有采用操作数长度对齐方式，比如16位无符号整数需使用两个字节储存(假设为byte1和byte2)，那么真实值是 &lt;code>(byte1 &amp;lt;&amp;lt; 8) | byte2&lt;/code>。&lt;/li>
&lt;/ul></description></item><item><title>JVM系列2 Class文件格式</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</link><pubDate>Fri, 10 Apr 2020 11:02:39 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%972-class%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F/</guid><description>&lt;blockquote>
&lt;p>Java编译过程是将Java文件转换为Claaa文件，从而实现了跨平台的功能， 本文详细讲述Class文件结构。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一-概述">一、 概述&lt;/h2>
&lt;p>计算机只能识别0和1，所以大家编写的程序都需要经过编译器，转换为由0和1组成的二进制本地机器码(Native Code)。随着虚拟机的不断发展，很多程序语言开始选择与操作系统和机器指令集无关的格式作为编译后的存储格式（Class文件），从而实现”Write Once, Run Anywhere”。 Java设计之初，考虑后期能让Java虚拟机运行其他语言，目前有越来越多的其他语言都可以直接需要在Java虚拟机，虚拟机只能识别Class文件，至于是由何种语言编译而来的，虚拟机并不关心，如下图：&lt;/p></description></item><item><title>JVM系列1 运行时内存结构</title><link>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</link><pubDate>Fri, 10 Apr 2020 10:50:16 +0800</pubDate><guid>https://blog.itning.top/post/2020/04/10/jvm%E7%B3%BB%E5%88%971-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</guid><description>&lt;blockquote>
&lt;p>java是在java虚拟机上运行，一般地大家讲到的Java运行时内存结构其实就是Jvm内存&lt;/p>
&lt;/blockquote>
&lt;h2 id="一运行时内存结构">一、运行时内存结构&lt;/h2>
&lt;p>Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，故Java运行时内存结构，也就是指Java虚拟机的运行时内存结构。&lt;/p></description></item><item><title>Java生产环境下性能监控与调优详解</title><link>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 23 Apr 2019 11:36:10 +0800</pubDate><guid>https://blog.itning.top/post/2019/04/23/java%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E8%B0%83%E4%BC%98%E8%AF%A6%E8%A7%A3/</guid><description>&lt;h2 id="基于jdk命令行工具的监控">基于JDK命令行工具的监控&lt;/h2>
&lt;h3 id="x参数">X参数&lt;/h3>
&lt;p>非标准化参数 有可能会变 但变化比较小&lt;/p>
&lt;ul>
&lt;li>
&lt;p>-Xint&lt;/p>
&lt;p>解释执行&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xcomp&lt;/p>
&lt;p>第一次使用就编译成本地代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>-Xmixed&lt;/p>
&lt;p>混合模式，JVM自己来决定是否编译成本地代码&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>